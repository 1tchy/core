# Language zh-CN translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-12-19 20:26+0000\n"
"PO-Revision-Date: 2009-02-16 14:16+0800\n"
"Last-Translator: Sean Wu <alartin@gmail.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: extend.xml:4
#, no-c-format
msgid "Extending Web Beans"
msgstr "扩展Web Bean"

#. Tag: para
#: extend.xml:6
#, no-c-format
msgid "Web Beans is intended to be a platform for frameworks, extensions and integration with other technologies. Therefore, Web Beans exposes a set of SPIs for the use of developers of portable extensions to Web Beans. For example, the following kinds of extensions were envisaged by the designers of Web Beans:"
msgstr "Web Beans意图成为框架的平台，扩展的平台，和能够与其他技术整合的平台。因此，Web Bean将一套SPI暴露给开发者，从而能够让他们便于扩展Web Bean。例如，下面是Web Bean设计者设想的扩展类型："

#. Tag: para
#: extend.xml:14
#, no-c-format
msgid "integration with Business Process Management engines,"
msgstr "整合业务流程管理引擎，"

#. Tag: para
#: extend.xml:17
#, no-c-format
msgid "integration with third-party frameworks such as Spring, Seam, GWT or Wicket, and"
msgstr "整合第三方框架，例如Spring, Seam, GWT或者Wicket，和"

#. Tag: para
#: extend.xml:21
#, no-c-format
msgid "new technology based upon the Web Beans programming model."
msgstr "基于Web Bean编程模型的新技术。"

#. Tag: para
#: extend.xml:25
#, no-c-format
msgid "The nerve center for extending Web Beans is the <literal>Manager</literal> object."
msgstr "扩展Web Bean的神经中枢是 <literal>Manager</literal> 对象。"

#. Tag: title
#: extend.xml:29
#, no-c-format
msgid "The <literal>Manager</literal> object"
msgstr " <literal>Manager</literal> 对象"

#. Tag: para
#: extend.xml:31
#, no-c-format
msgid "The <literal>Manager</literal> interface lets us register and obtain Web Beans, interceptors, decorators, observers and contexts programatically."
msgstr " <literal>Manager</literal> 接口能够让我们通过编程来注册和获得Web Bean，拦截器，装饰器，观察者和上下文。"

#. Tag: programlisting
#: extend.xml:34
#, no-c-format
msgid ""
"<![CDATA[public interface Manager\n"
"{\n"
"\n"
"   public <T> Set<Bean<T>> resolveByType(Class<T> type, Annotation... bindings);\n"
"\n"
"   public <T> Set<Bean<T>> resolveByType(TypeLiteral<T> apiType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> T getInstanceByType(Class<T> type, Annotation... bindings);\n"
"\n"
"   public <T> T getInstanceByType(TypeLiteral<T> type,\n"
"         Annotation... bindings);\n"
"\n"
"   public Set<Bean<?>> resolveByName(String name);\n"
"\n"
"   public Object getInstanceByName(String name);\n"
"\n"
"   public <T> T getInstance(Bean<T> bean);\n"
"\n"
"   public void fireEvent(Object event, Annotation... bindings);\n"
"\n"
"   public Context getContext(Class<? extends Annotation> scopeType);\n"
"\n"
"   public Manager addContext(Context context);\n"
"\n"
"   public Manager addBean(Bean<?> bean);\n"
"\n"
"   public Manager addInterceptor(Interceptor interceptor);\n"
"\n"
"   public Manager addDecorator(Decorator decorator);\n"
"\n"
"   public <T> Manager addObserver(Observer<T> observer, Class<T> eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager addObserver(Observer<T> observer, TypeLiteral<T> eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager removeObserver(Observer<T> observer, Class<T> eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager removeObserver(Observer<T> observer,\n"
"         TypeLiteral<T> eventType, Annotation... bindings);\n"
"\n"
"   public <T> Set<Observer<T>> resolveObservers(T event, Annotation... bindings);\n"
"\n"
"   public List<Interceptor> resolveInterceptors(InterceptionType type,\n"
"         Annotation... interceptorBindings);\n"
"\n"
"   public List<Decorator> resolveDecorators(Set<Class<?>> types,\n"
"         Annotation... bindings);\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[public interface Manager\n"
"{\n"
"\n"
"   public <T> Set<Bean<T>> resolveByType(Class<T> type, Annotation... bindings);\n"
"\n"
"   public <T> Set<Bean<T>> resolveByType(TypeLiteral<T> apiType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> T getInstanceByType(Class<T> type, Annotation... bindings);\n"
"\n"
"   public <T> T getInstanceByType(TypeLiteral<T> type,\n"
"         Annotation... bindings);\n"
"\n"
"   public Set<Bean<?>> resolveByName(String name);\n"
"\n"
"   public Object getInstanceByName(String name);\n"
"\n"
"   public <T> T getInstance(Bean<T> bean);\n"
"\n"
"   public void fireEvent(Object event, Annotation... bindings);\n"
"\n"
"   public Context getContext(Class<? extends Annotation> scopeType);\n"
"\n"
"   public Manager addContext(Context context);\n"
"\n"
"   public Manager addBean(Bean<?> bean);\n"
"\n"
"   public Manager addInterceptor(Interceptor interceptor);\n"
"\n"
"   public Manager addDecorator(Decorator decorator);\n"
"\n"
"   public <T> Manager addObserver(Observer<T> observer, Class<T> eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager addObserver(Observer<T> observer, TypeLiteral<T> eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager removeObserver(Observer<T> observer, Class<T> eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager removeObserver(Observer<T> observer,\n"
"         TypeLiteral<T> eventType, Annotation... bindings);\n"
"\n"
"   public <T> Set<Observer<T>> resolveObservers(T event, Annotation... bindings);\n"
"\n"
"   public List<Interceptor> resolveInterceptors(InterceptionType type,\n"
"         Annotation... interceptorBindings);\n"
"\n"
"   public List<Decorator> resolveDecorators(Set<Class<?>> types,\n"
"         Annotation... bindings);\n"
"\n"
"}]]>"

#. Tag: para
#: extend.xml:36
#, no-c-format
msgid "We can obtain an instance of <literal>Manager</literal> via injection:"
msgstr "我们可以通过注入来获得一个 <literal>Manager</literal> 实例："

#. Tag: programlisting
#: extend.xml:38
#, no-c-format
msgid "@Current Manager manager"
msgstr "@Current Manager manager"

#. Tag: title
#: extend.xml:43
#, no-c-format
msgid "The <literal>Bean</literal> class"
msgstr " <literal>Bean</literal> 类"

#. Tag: para
#: extend.xml:45
#, no-c-format
msgid "Instances of the abstract class <literal>Bean</literal> represent Web Beans. There is an instance of <literal>Bean</literal> registered with the <literal>Manager</literal> object for every Web Bean in the application."
msgstr "抽象类 <literal>Bean</literal> 的实例代表Web Bean。应用中的每个Web Bean都有一个在 <literal>Manager</literal> 注册的  <literal>Bean</literal> 实例。"

#. Tag: programlisting
#: extend.xml:50
#, no-c-format
msgid ""
"public abstract class Bean&lt;T&gt; {\n"
"    \n"
"    private final Manager manager;\n"
"    \n"
"    protected Bean(Manager manager) {\n"
"        this.manager=manager;\n"
"    }\n"
"    \n"
"    protected Manager getManager() {\n"
"        return manager;\n"
"    }\n"
"    \n"
"    public abstract Set&lt;Class&gt; getTypes();\n"
"    public abstract Set&lt;Annotation&gt; getBindingTypes();\n"
"    public abstract Class&lt;? extends Annotation&gt; getScopeType();\n"
"    public abstract Class&lt;? extends Annotation&gt; getDeploymentType(); \n"
"    public abstract String getName();\n"
"    \n"
"    public abstract boolean isSerializable();\n"
"    public abstract boolean isNullable();\n"
"\n"
"    public abstract T create();\n"
"    public abstract void destroy(T instance);\n"
"    \n"
"}"
msgstr ""
"public abstract class Bean&lt;T&gt; {\n"
"    \n"
"    private final Manager manager;\n"
"    \n"
"    protected Bean(Manager manager) {\n"
"        this.manager=manager;\n"
"    }\n"
"    \n"
"    protected Manager getManager() {\n"
"        return manager;\n"
"    }\n"
"    \n"
"    public abstract Set&lt;Class&gt; getTypes();\n"
"    public abstract Set&lt;Annotation&gt; getBindingTypes();\n"
"    public abstract Class&lt;? extends Annotation&gt; getScopeType();\n"
"    public abstract Class&lt;? extends Annotation&gt; getDeploymentType(); \n"
"    public abstract String getName();\n"
"    \n"
"    public abstract boolean isSerializable();\n"
"    public abstract boolean isNullable();\n"
"\n"
"    public abstract T create();\n"
"    public abstract void destroy(T instance);\n"
"    \n"
"}"

#. Tag: para
#: extend.xml:52
#, no-c-format
msgid "It's possible to extend the <literal>Bean</literal> class and register instances by calling <literal>Manager.addBean()</literal> to provide support for new kinds of Web Beans, beyond those defined by the Web Beans specification (simple and enterprise Web Beans, producer methods and JMS endpoints). For example, we could use the <literal>Bean</literal> class to allow objects managed by another framework to be injected into Web Beans."
msgstr "我们可以继承 <literal>Bean</literal> 类，通过调用 <literal>Manager.addBean()</literal> 方法注册实例，从而提供超出Web Bean规范之外（简单Web Bean, 企业WebBean, 生产者方法和JMS端点）的新的Web Bean类型。例如，我们可以使用 <literal>Bean</literal> 类来允许其他框架管理的对象能够注入到Web Bean中。"

#. Tag: para
#: extend.xml:60
#, no-c-format
msgid "There are two subclasses of <literal>Bean</literal> defined by the Web Beans specification: <literal>Interceptor</literal> and <literal>Decorator</literal>."
msgstr "Web Bean规范定义了两种 <literal>Bean</literal> 的子类：<literal>拦截器</literal> 和 <literal>装饰器</literal>。"

#. Tag: title
#: extend.xml:67
#, no-c-format
msgid "The <literal>Context</literal> interface"
msgstr " <literal>Context</literal> 接口"

#. Tag: para
#: extend.xml:69
#, no-c-format
msgid "The <literal>Context</literal> interface supports addition of new scopes to Web Beans, or extension of the built-in scopes to new environments."
msgstr " <literal>Context</literal> 接口支持向Web Bean中添加新的范围，或者在新的环境中扩展内置的范围。"

#. Tag: programlisting
#: extend.xml:72
#, no-c-format
msgid ""
"public interface Context {\n"
"    \n"
"    public Class&lt;? extends Annotation&gt; getScopeType();\n"
"    \n"
"    public &lt;T&gt; T get(Bean&lt;T&gt; bean, boolean create);\n"
"    \n"
"    boolean isActive();\n"
"    \n"
"}"
msgstr ""
"public interface Context {\n"
"    \n"
"    public Class&lt;? extends Annotation&gt; getScopeType();\n"
"    \n"
"    public &lt;T&gt; T get(Bean&lt;T&gt; bean, boolean create);\n"
"    \n"
"    boolean isActive();\n"
"    \n"
"}"

#. Tag: para
#: extend.xml:74
#, no-c-format
msgid "For example, we might implement <literal>Context</literal> to add a business process scope to Web Beans, or to add support for the conversation scope to an application that uses Wicket."
msgstr "例如，我们可以实现 <literal>Context</literal> ，向Web Bean添加一个业务流程范围，或者向使用Wicket框架的应用添加对对话的支持。"

