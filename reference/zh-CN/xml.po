# Language zh-CN translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-12-19 20:26+0000\n"
"PO-Revision-Date: 2009-03-13 15:01+0800\n"
"Last-Translator: Sean Wu <alartin@gmail.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: xml.xml:4
#, no-c-format
msgid "Defining Web Beans using XML"
msgstr "使用XML定义Web Bean"

#. Tag: para
#: xml.xml:6
#, no-c-format
msgid "So far, we've seen plenty of examples of Web Beans declared using annotations. However, there are a couple of occasions when we can't use annotations to define the Web Bean:"
msgstr "目前为止，我们看了大量使用注释来声明Web Bean的例子。然而，我们有时候并不使用注释来定义Web Bean，如下列情况:"

#. Tag: para
#: xml.xml:12
#, no-c-format
msgid "when the implementation class comes from some preexisting library, or"
msgstr "当实现类是从先前已经存在的类库中产生的时候，或者"

#. Tag: para
#: xml.xml:15
#, no-c-format
msgid "when there should be multiple Web Beans with the same implementation class."
msgstr "多个Web Bean对应同一个实现类的时候。"

#. Tag: para
#: xml.xml:20
#, no-c-format
msgid "In either of these cases, Web Beans gives us two options:"
msgstr "在上述任何一种情况下，Web Bean给我们两种选择："

#. Tag: para
#: xml.xml:23
#, no-c-format
msgid "write a producer method, or"
msgstr "写一个生产者方法，或者"

#. Tag: para
#: xml.xml:24
#, no-c-format
msgid "declare the Web Bean using XML."
msgstr "使用XML来声明Web Bean。"

#. Tag: para
#: xml.xml:27
#, no-c-format
msgid "Many frameworks use XML to provide metadata relating to Java classes. However, Web Beans uses a very different approach to specifying the names of Java classes, fields or methods to most other frameworks. Instead of writing class and member names as the string values of XML elements and attributes, Web Beans lets you use the class or member name as the name of the XML element."
msgstr "很多框架使用XML来提供Java类相关的元数据。然而，Web Bean使用了和大多其他框架不同的方法来指定Java类的名字，域或者方法。Web Bean让你使用类或者成员名作为XML元素名，而不是将类和成员名作为XML元素的字符串值来声明Web Bean。"

#. Tag: para
#: xml.xml:33
#, no-c-format
msgid "The advantage of this approach is that you can write an XML schema that prevents spelling errors in your XML document. It's even possible for a tool to generate the XML schema automatically from the compiled Java code. Or, an integrated development environment could perform the same validation without the need for the explicit intermediate generation step."
msgstr "这种方法的好处是你可以使用XML模式来验证XML, 阻止XML文档中的拼写错误。它甚至可以让一个工具从编译好的Java代码中自动生成XML模式。或者一个整合开发环境（IDE）可以直接进行验证，无需使用显式的中间生成步骤。"

#. Tag: title
#: xml.xml:40
#, no-c-format
msgid "Declaring Web Bean classes"
msgstr "声明Web Bean类"

#. Tag: para
#: xml.xml:42
#, no-c-format
msgid "For each Java package, Web Beans defines a corresponding XML namespace. The namespace is formed by prepending <literal>urn:java:</literal> to the Java package name. For the package <literal>com.mydomain.myapp</literal>, the XML namespace is <literal>urn:java:com.mydomain.myapp</literal>."
msgstr "对于每个Java包，Web Bean定义了一个对应的XML名域空间。这个名域由 <literal>urn:java:</literal>前缀加上Java包名组成。对于 <literal>com.mydomain.myapp</literal> 包来说，对应的XML名域是 <literal>urn:java:com.mydomain.myapp</literal>。"

#. Tag: para
#: xml.xml:47
#, no-c-format
msgid "Java types belonging to a package are referred to using an XML element in the namespace corresponding to the package. The name of the element is the name of the Java type. Fields and methods of the type are specified by child elements in the same namespace. If the type is an annotation, members are specified by attributes of the element."
msgstr "属于一个包的Java类型指的是在对应这个包的名域中使用一个XML元素。元素的名字就是Java类型的名字。类型的域和方法通过相同的名域下的子元素定义。如果类型是一个注释的话，其成员通过这个元素的属性指定。"

#. Tag: para
#: xml.xml:53
#, no-c-format
msgid "For example, the element <literal>&lt;util:Date/&gt;</literal> in the following XML fragment refers to the class <literal>java.util.Date</literal>:"
msgstr "例如， 在下面的XML片段中的元素<literal>&lt;util:Date/&gt;</literal>指的是 <literal>java.util.Date</literal> 类："

#. Tag: programlisting
#: xml.xml:56
#, no-c-format
msgid ""
"<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
"          xmlns:util=\"urn:java:java.util\">\n"
"\n"
"    <util:Date/>\n"
"\n"
"</WebBeans>]]>"
msgstr ""
"<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
"          xmlns:util=\"urn:java:java.util\">\n"
"\n"
"    <util:Date/>\n"
"\n"
"</WebBeans>]]>"

#. Tag: para
#: xml.xml:58
#, no-c-format
msgid "And this is all the code we need to declare that <literal>Date</literal> is a simple Web Bean! An instance of <literal>Date</literal> may now be injected by any other Web Bean:"
msgstr "这个是将<literal>Date</literal> 声明为一个简单web Bean所需的所有代码！现在任何一个 <literal>Date</literal> 实例都可以被任何其他Web Bean注入了："

#. Tag: programlisting
#: xml.xml:62
#, no-c-format
msgid "<![CDATA[@Current Date date]]>"
msgstr "<![CDATA[@Current Date date]]>"

#. Tag: title
#: xml.xml:67
#, no-c-format
msgid "Declaring Web Bean metadata"
msgstr "声明Web Bean的元数据"

#. Tag: para
#: xml.xml:69
#, no-c-format
msgid "We can declare the scope, deployment type and interceptor binding types using direct child elements of the Web Bean declaration:"
msgstr "我们可以直接通过Web Bean声明的子元素来声明范围，部署类型和拦截器绑定类型："

#. Tag: programlisting
#: xml.xml:72
#, no-c-format
msgid ""
"<![CDATA[<myapp:ShoppingCart>\n"
"    <SessionScoped/>\n"
"    <myfwk:Transactional requiresNew=\"true\"/>\n"
"    <myfwk:Secure/>\n"
"</myapp:ShoppingCart>]]>"
msgstr ""
"<![CDATA[<myapp:ShoppingCart>\n"
"    <SessionScoped/>\n"
"    <myfwk:Transactional requiresNew=\"true\"/>\n"
"    <myfwk:Secure/>\n"
"</myapp:ShoppingCart>]]>"

#. Tag: para
#: xml.xml:74
#, no-c-format
msgid "We use exactly the same approach to specify names and binding type:"
msgstr "我们可以使用相同方法来指定名字和绑定类型："

#. Tag: programlisting
#: xml.xml:76
#, no-c-format
msgid ""
"<![CDATA[<util:Date>\n"
"    <Named>currentTime</Named>\n"
"</util:Date>\n"
"\n"
"<util:Date>\n"
"    <SessionScoped/>\n"
"    <myapp:Login/>\n"
"    <Named>loginTime</Named>\n"
"</util:Date>\n"
"\n"
"<util:Date>\n"
"    <ApplicationScoped/>\n"
"    <myapp:SystemStart/>\n"
"    <Named>systemStartTime</Named>\n"
"</util:Date>]]>"
msgstr ""
"<![CDATA[<util:Date>\n"
"    <Named>currentTime</Named>\n"
"</util:Date>\n"
"\n"
"<util:Date>\n"
"    <SessionScoped/>\n"
"    <myapp:Login/>\n"
"    <Named>loginTime</Named>\n"
"</util:Date>\n"
"\n"
"<util:Date>\n"
"    <ApplicationScoped/>\n"
"    <myapp:SystemStart/>\n"
"    <Named>systemStartTime</Named>\n"
"</util:Date>]]>"

#. Tag: para
#: xml.xml:78
#, no-c-format
msgid "Where <literal>@Login</literal> and <literal>@SystemStart</literal> are binding annotations types."
msgstr "<literal>@Login</literal> 和 <literal>@SystemStart</literal> 是绑定注释类型。"

#. Tag: programlisting
#: xml.xml:81
#, no-c-format
msgid ""
"<![CDATA[@Current Date currentTime;\n"
"@Login Date loginTime;\n"
"@SystemStart Date systemStartTime;]]>"
msgstr ""
"<![CDATA[@Current Date currentTime;\n"
"@Login Date loginTime;\n"
"@SystemStart Date systemStartTime;]]>"

#. Tag: para
#: xml.xml:83
#, no-c-format
msgid "As usual, a Web Bean may support multiple binding types:"
msgstr "通常，一个Web Bean可以支持多个绑定类型："

#. Tag: programlisting
#: xml.xml:85
#, no-c-format
msgid ""
"<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
"    <myapp:PayByCheque/>\n"
"    <myapp:Asynchronous/>\n"
"</myapp:AsynchronousChequePaymentProcessor>]]>"
msgstr ""
"<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
"    <myapp:PayByCheque/>\n"
"    <myapp:Asynchronous/>\n"
"</myapp:AsynchronousChequePaymentProcessor>]]>"

#. Tag: para
#: xml.xml:87
#, no-c-format
msgid "Interceptors and decorators are just simple Web Beans, so they may be declared just like any other simple Web Bean:"
msgstr "拦截器和装饰器只不过是简单的Web Beans，所以它们可以像其他简单Web Bean一样被声明："

#. Tag: programlisting
#: xml.xml:90
#, no-c-format
msgid ""
"<![CDATA[<myfwk:TransactionInterceptor>\n"
"    <Interceptor/>\n"
"    <myfwk:Transactional/>\n"
"</myfwk:TransactionInterceptor>]]>"
msgstr ""
"<![CDATA[<myfwk:TransactionInterceptor>\n"
"    <Interceptor/>\n"
"    <myfwk:Transactional/>\n"
"</myfwk:TransactionInterceptor>]]>"

#. Tag: title
#: xml.xml:95
#, no-c-format
msgid "Declaring Web Bean members"
msgstr "声明Web Bean成员"

#. Tag: para
#: xml.xml:97
#, no-c-format
msgid "TODO!"
msgstr "TODO!"

#. Tag: title
#: xml.xml:104
#, no-c-format
msgid "Declaring inline Web Beans"
msgstr "声明内联的Web Beans"

#. Tag: para
#: xml.xml:106
#, no-c-format
msgid "Web Beans lets us define a Web Bean at an injection point. For example:"
msgstr "Web Beans让我们能够在一个注入点定义一个Web Bean。例如："

#. Tag: programlisting
#: xml.xml:108
#, no-c-format
msgid ""
"<![CDATA[<myapp:System>\n"
"    <ApplicationScoped/>\n"
"    <myapp:admin>\n"
"        <myapp:Name>\n"
"            <myapp:firstname>Gavin</myapp:firstname>\n"
"            <myapp:lastname>King</myapp:lastname>\n"
"            <myapp:email>gavin@hibernate.org</myapp:email>\n"
"        </myapp:Name>\n"
"    </myapp:admin>\n"
"</myapp:System>]]>"
msgstr ""
"<![CDATA[<myapp:System>\n"
"    <ApplicationScoped/>\n"
"    <myapp:admin>\n"
"        <myapp:Name>\n"
"            <myapp:firstname>Gavin</myapp:firstname>\n"
"            <myapp:lastname>King</myapp:lastname>\n"
"            <myapp:email>gavin@hibernate.org</myapp:email>\n"
"        </myapp:Name>\n"
"    </myapp:admin>\n"
"</myapp:System>]]>"

#. Tag: para
#: xml.xml:110
#, no-c-format
msgid "The <literal>&lt;Name&gt;</literal> element declares a simple Web Bean of scope <literal>@Dependent</literal> and class <literal>Name</literal>, with a set of initial field values. This Web Bean has a special, container-generated binding and is therefore injectable only to the specific injection point at which it is declared."
msgstr " <literal>&lt;Name&gt;</literal> 元素声明了一个范围为 <literal>@Dependent</literal> ，类为 <literal>Name</literal> 的一个简单的Web Bean，并且设置了一套初始的域值。这个Web Bean有一个特殊的，容器生成的绑定，因此只能在它声明的特定注入点被注入。"

#. Tag: para
#: xml.xml:116
#, no-c-format
msgid "This simple but powerful feature allows the Web Beans XML format to be used to specify whole graphs of Java objects. It's not quite a full databinding solution, but it's close!"
msgstr "这个简单但是很强大的特性能够让我们使用Web Bean XML配置格式来指定整个Java类的图。这并不是完整的数据绑定方案，但是它很接近了！"

#. Tag: title
#: xml.xml:123
#, no-c-format
msgid "Using a schema"
msgstr "使用一个模式"

#. Tag: para
#: xml.xml:125
#, no-c-format
msgid "If we want our XML document format to be authored by people who aren't Java developers, or who don't have access to our code, we need to provide a schema. There's nothing specific to Web Beans about writing or using the schema."
msgstr "如果我们希望我们的XML文档格式由非Java开发者或者没有权限访问我们代码的人来制定，我们需要提供一个模式。在Web Beans中使用模式没有什么特殊的地方。"

#. Tag: programlisting
#: xml.xml:130
#, no-c-format
msgid ""
"<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
"          xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
"          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"          xsi:schemaLocation=\"urn:java:javax.webbeans http://java.sun.com/jee/web-beans-1.0.xsd\n"
"                              urn:java:com.mydomain.myapp http://mydomain.com/xsd/myapp-1.2.xsd\">\n"
"\n"
"    <myapp:System>\n"
"        ...\n"
"    </myapp:System>\n"
"\n"
"</WebBeans>]]>"
msgstr ""
"<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
"          xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
"          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"          xsi:schemaLocation=\"urn:java:javax.webbeans http://java.sun.com/jee/web-beans-1.0.xsd\n"
"                              urn:java:com.mydomain.myapp http://mydomain.com/xsd/myapp-1.2.xsd\">\n"
"\n"
"    <myapp:System>\n"
"        ...\n"
"    </myapp:System>\n"
"\n"
"</WebBeans>]]>"

#. Tag: para
#: xml.xml:132
#, no-c-format
msgid "Writing an XML schema is quite tedious. Therefore, the Web Beans RI project will provide a tool which automatically generates the XML schema from compiled Java code."
msgstr "编写一个XML模式相当繁琐。因此，Web Bean的参考实现项目提供了一个工具，可以从编译好的Java代码中自动化生成XML模式。"

