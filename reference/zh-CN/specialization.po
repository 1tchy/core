# Language zh-CN translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml \n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-01-04 23:18+0000\n"
"PO-Revision-Date: 2008-12-19 20:26+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: specialization.xml:4
#, no-c-format
msgid "Specialization"
msgstr ""

#. Tag: para
#: specialization.xml:6
#, no-c-format
msgid ""
"We've already seen how the Web Beans dependency injection model lets us "
"<emphasis>override</emphasis> the implementation of an API at deployment "
"time. For example, the following enterprise Web Bean provides an "
"implementation of the API <literal>PaymentProcessor</literal> in production:"
msgstr ""

#. Tag: programlisting
#: specialization.xml:11
#, no-c-format
msgid ""
"@CreditCard @Stateless\n"
"public class CreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"
msgstr ""

#. Tag: para
#: specialization.xml:13
#, no-c-format
msgid ""
"But in our staging environment, we override that implementation of "
"<literal>PaymentProcessor</literal> with a different Web Bean:"
msgstr ""

#. Tag: programlisting
#: specialization.xml:16
#, no-c-format
msgid ""
"@CreditCard @Stateless @Staging\n"
"public class StagingCreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"
msgstr ""

#. Tag: para
#: specialization.xml:18
#, no-c-format
msgid ""
"What we've tried to do with <literal>StagingCreditCardPaymentProcessor</"
"literal> is to completely replace <literal>AsyncPaymentProcessor</literal> "
"in a particular deployment of the system. In that deployment, the deployment "
"type <literal>@Staging</literal> would have a higher priority than the "
"default deployment type <literal>@Production</literal>, and therefore "
"clients with the following injection point:"
msgstr ""

#. Tag: programlisting
#: specialization.xml:24
#, no-c-format
msgid "@CreditCard PaymentProcessor ccpp"
msgstr ""

#. Tag: para
#: specialization.xml:26
#, no-c-format
msgid ""
"Would receive an instance of <literal>StagingCreditCardPaymentProcessor</"
"literal>."
msgstr ""

#. Tag: para
#: specialization.xml:28
#, no-c-format
msgid "Unfortunately, there are several traps we can easily fall into:"
msgstr ""

#. Tag: para
#: specialization.xml:32
#, no-c-format
msgid ""
"the higher-priority Web Bean may not implement all the API types of the Web "
"Bean that it attempts to override,"
msgstr ""

#. Tag: para
#: specialization.xml:36
#, no-c-format
msgid ""
"the higher-priority Web Bean may not declare all the binding types of the "
"Web Bean that it attempts to override,"
msgstr ""

#. Tag: para
#: specialization.xml:40
#, no-c-format
msgid ""
"the higher-priority Web Bean might not have the same name as the Web Bean "
"that it attempts to override, or"
msgstr ""

#. Tag: para
#: specialization.xml:44
#, no-c-format
msgid ""
"the Web Bean that it attempts to override might declare a producer method, "
"disposal method or observer method."
msgstr ""

#. Tag: para
#: specialization.xml:49
#, no-c-format
msgid ""
"In each of these cases, the Web Bean that we tried to override could still "
"be called at runtime. Therefore, overriding is somewhat prone to developer "
"error."
msgstr ""

#. Tag: para
#: specialization.xml:52
#, no-c-format
msgid ""
"Web Beans provides a special feature, called <emphasis>specialization</"
"emphasis>, that helps the developer avoid these traps. Specialization looks "
"a little esoteric at first, but it's easy to use in practice, and you'll "
"really appreciate the extra security it provides."
msgstr ""

#. Tag: title
#: specialization.xml:58
#, no-c-format
msgid "Using specialization"
msgstr ""

#. Tag: para
#: specialization.xml:60
#, no-c-format
msgid ""
"Specialization is a feature that is specific to simple and enterprise Web "
"Beans. To make use of specialization, the higher-priority Web Bean must:"
msgstr ""

#. Tag: para
#: specialization.xml:65
#, no-c-format
msgid "be a direct subclass of the Web Bean it overrides, and"
msgstr ""

#. Tag: para
#: specialization.xml:68
#, no-c-format
msgid ""
"be a simple Web Bean if the Web Bean it overrides is a simple Web Bean or an "
"enterprise Web Bean if the Web Bean it overrides is an enterprise Web Bean, "
"and"
msgstr ""

#. Tag: para
#: specialization.xml:73
#, no-c-format
msgid "be annotated <literal>@Specializes</literal>."
msgstr ""

#. Tag: programlisting
#: specialization.xml:77
#, no-c-format
msgid ""
"@Stateless @Staging @Specializes\n"
"public class StagingCreditCardPaymentProcessor \n"
"        extends CreditCardPaymentProcessor {\n"
"    ...\n"
"}"
msgstr ""

#. Tag: para
#: specialization.xml:79
#, no-c-format
msgid ""
"We say that the higher-priority Web Bean <emphasis>specializes</emphasis> "
"its superclass."
msgstr ""

#. Tag: title
#: specialization.xml:85
#, no-c-format
msgid "Advantages of specialization"
msgstr ""

#. Tag: para
#: specialization.xml:87
#, no-c-format
msgid "When specialization is used:"
msgstr ""

#. Tag: para
#: specialization.xml:91
#, no-c-format
msgid ""
"the binding types of the superclass are automatically inherited by the Web "
"Bean annotated <literal>@Specializes</literal>, and"
msgstr ""

#. Tag: para
#: specialization.xml:95
#, no-c-format
msgid ""
"the Web Bean name of the superclass is automatically inherited by the Web "
"Bean annotated <literal>@Specializes</literal>, and"
msgstr ""

#. Tag: para
#: specialization.xml:99
#, no-c-format
msgid ""
"producer methods, disposal methods and observer methods declared by the "
"superclass are called upon an instance of the Web Bean annotated "
"<literal>@Specializes</literal>."
msgstr ""

#. Tag: para
#: specialization.xml:105
#, no-c-format
msgid ""
"In our example, the binding type <literal>@CreditCard</literal> of "
"<literal>CreditCardPaymentProcessor</literal> is inherited by "
"<literal>StagingCreditCardPaymentProcessor</literal>."
msgstr ""

#. Tag: para
#: specialization.xml:109
#, no-c-format
msgid "Furthermore, the Web Bean manager will validate that:"
msgstr ""

#. Tag: para
#: specialization.xml:113
#, no-c-format
msgid ""
"all API types of the superclass are API types of the Web Bean annotated "
"<literal>@Specializes</literal> (all local interfaces of the superclass "
"enterprise bean are also local interfaces of the subclass),"
msgstr ""

#. Tag: para
#: specialization.xml:119
#, no-c-format
msgid ""
"the deployment type of the Web Bean annotated <literal>@Specializes</"
"literal> has a higher precedence than the deployment type of the superclass, "
"and"
msgstr ""

#. Tag: para
#: specialization.xml:124
#, no-c-format
msgid ""
"there is no other enabled Web Bean that also specializes the superclass."
msgstr ""

#. Tag: para
#: specialization.xml:129
#, no-c-format
msgid ""
"If any of these conditions are violated, the Web Bean manager throws an "
"exception at initialization time."
msgstr ""

#. Tag: para
#: specialization.xml:132
#, no-c-format
msgid ""
"Therefore, we can be certain that the superclass will <emphasis>never</"
"emphasis> be called in any deployment of the system where the Web Bean "
"annotated <literal>@Specializes</literal> is deployed and enabled."
msgstr ""
