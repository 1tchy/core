# translation of extend.po to Spanish
# Language es-ES translations for master.xml package.
#
# Automatically generated, 2008.
# Gladys Guerrero Lozano <gguerrer@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: extend\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-12-19 20:26+0000\n"
"PO-Revision-Date: 2009-01-19 14:15+1000\n"
"Last-Translator: Gladys Guerrero Lozano <gguerrer@redhat.com>\n"
"Language-Team: Spanish <fedora-trans-es@redhat.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#: extend.xml:4
#, no-c-format
msgid "Extending Web Beans"
msgstr "Extensión de Web Beans"

#. Tag: para
#: extend.xml:6
#, no-c-format
msgid ""
"Web Beans is intended to be a platform for frameworks, extensions and "
"integration with other technologies. Therefore, Web Beans exposes a set of "
"SPIs for the use of developers of portable extensions to Web Beans. For "
"example, the following kinds of extensions were envisaged by the designers "
"of Web Beans:"
msgstr "Web Beans pretende ser una plataforma para marcos, extensiones e integración con otras tecnologías. Por lo tanto, Web Beans expone una serie de SPI para el uso de desarrolladores de extensiones portátiles para Web Beans. Por ejemplo, las siguientes clases de extensiones fueron previstas por los diseñadores de Web Beans:"

#. Tag: para
#: extend.xml:14
#, no-c-format
msgid "integration with Business Process Management engines,"
msgstr "integración con motores de Gestión de Proceso de Negocios,"

#. Tag: para
#: extend.xml:17
#, no-c-format
msgid ""
"integration with third-party frameworks such as Spring, Seam, GWT or Wicket, "
"and"
msgstr "integración con marcos de terceras partes tales como Spring, Seam, GWT o Wicket, y"

#. Tag: para
#: extend.xml:21
#, no-c-format
msgid "new technology based upon the Web Beans programming model."
msgstr "nueva tecnología basada en el modelo de programación de Web Beans."

#. Tag: para
#: extend.xml:25
#, no-c-format
msgid ""
"The nerve center for extending Web Beans is the <literal>Manager</literal> "
"object."
msgstr "El centro nervioso para extender Web Beans es el objeto <literal>Manager</literal>. "

#. Tag: title
#: extend.xml:29
#, no-c-format
msgid "The <literal>Manager</literal> object"
msgstr "El objeto <literal>Manager</literal>"

#. Tag: para
#: extend.xml:31
#, no-c-format
msgid ""
"The <literal>Manager</literal> interface lets us register and obtain Web "
"Beans, interceptors, decorators, observers and contexts programatically."
msgstr ""
"La interfaz <literal>Manager</literal> nos permite registrar y obtener Web "
"Beans, interceptores, decoradores, observadores y contextos en forma programada."

#. Tag: programlisting
#: extend.xml:34
#, no-c-format
msgid ""
"<![CDATA[public interface Manager\n"
"{\n"
"\n"
"   public <T> Set<Bean<T>> resolveByType(Class<T> type, Annotation... "
"bindings);\n"
"\n"
"   public <T> Set<Bean<T>> resolveByType(TypeLiteral<T> apiType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> T getInstanceByType(Class<T> type, Annotation... bindings);\n"
"\n"
"   public <T> T getInstanceByType(TypeLiteral<T> type,\n"
"         Annotation... bindings);\n"
"\n"
"   public Set<Bean<?>> resolveByName(String name);\n"
"\n"
"   public Object getInstanceByName(String name);\n"
"\n"
"   public <T> T getInstance(Bean<T> bean);\n"
"\n"
"   public void fireEvent(Object event, Annotation... bindings);\n"
"\n"
"   public Context getContext(Class<? extends Annotation> scopeType);\n"
"\n"
"   public Manager addContext(Context context);\n"
"\n"
"   public Manager addBean(Bean<?> bean);\n"
"\n"
"   public Manager addInterceptor(Interceptor interceptor);\n"
"\n"
"   public Manager addDecorator(Decorator decorator);\n"
"\n"
"   public <T> Manager addObserver(Observer<T> observer, Class<T> eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager addObserver(Observer<T> observer, TypeLiteral<T> "
"eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager removeObserver(Observer<T> observer, Class<T> "
"eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager removeObserver(Observer<T> observer,\n"
"         TypeLiteral<T> eventType, Annotation... bindings);\n"
"\n"
"   public <T> Set<Observer<T>> resolveObservers(T event, Annotation... "
"bindings);\n"
"\n"
"   public List<Interceptor> resolveInterceptors(InterceptionType type,\n"
"         Annotation... interceptorBindings);\n"
"\n"
"   public List<Decorator> resolveDecorators(Set<Class<?>> types,\n"
"         Annotation... bindings);\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[public interface Manager\n"
"{\n"
"\n"
"   public <T> Set<Bean<T>> resolveByType(Class<T> type, Annotation... "
"bindings);\n"
"\n"
"   public <T> Set<Bean<T>> resolveByType(TypeLiteral<T> apiType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> T getInstanceByType(Class<T> type, Annotation... bindings);\n"
"\n"
"   public <T> T getInstanceByType(TypeLiteral<T> type,\n"
"         Annotation... bindings);\n"
"\n"
"   public Set<Bean<?>> resolveByName(String name);\n"
"\n"
"   public Object getInstanceByName(String name);\n"
"\n"
"   public <T> T getInstance(Bean<T> bean);\n"
"\n"
"   public void fireEvent(Object event, Annotation... bindings);\n"
"\n"
"   public Context getContext(Class<? extends Annotation> scopeType);\n"
"\n"
"   public Manager addContext(Context context);\n"
"\n"
"   public Manager addBean(Bean<?> bean);\n"
"\n"
"   public Manager addInterceptor(Interceptor interceptor);\n"
"\n"
"   public Manager addDecorator(Decorator decorator);\n"
"\n"
"   public <T> Manager addObserver(Observer<T> observer, Class<T> eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager addObserver(Observer<T> observer, TypeLiteral<T> "
"eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager removeObserver(Observer<T> observer, Class<T> "
"eventType,\n"
"         Annotation... bindings);\n"
"\n"
"   public <T> Manager removeObserver(Observer<T> observer,\n"
"         TypeLiteral<T> eventType, Annotation... bindings);\n"
"\n"
"   public <T> Set<Observer<T>> resolveObservers(T event, Annotation... "
"bindings);\n"
"\n"
"   public List<Interceptor> resolveInterceptors(InterceptionType type,\n"
"         Annotation... interceptorBindings);\n"
"\n"
"   public List<Decorator> resolveDecorators(Set<Class<?>> types,\n"
"         Annotation... bindings);\n"
"\n"
"}]]>"

#. Tag: para
#: extend.xml:36
#, no-c-format
msgid "We can obtain an instance of <literal>Manager</literal> via injection:"
msgstr "Podemos obtener una instancia de <literal>Manager</literal> vía inyección:"

#. Tag: programlisting
#: extend.xml:38
#, no-c-format
msgid "@Current Manager manager"
msgstr "@Current Manager manager"

#. Tag: title
#: extend.xml:43
#, no-c-format
msgid "The <literal>Bean</literal> class"
msgstr "La clase <literal>Bean</literal>"

#. Tag: para
#: extend.xml:45
#, no-c-format
msgid ""
"Instances of the abstract class <literal>Bean</literal> represent Web Beans. "
"There is an instance of <literal>Bean</literal> registered with the "
"<literal>Manager</literal> object for every Web Bean in the application."
msgstr "Instancias de clase abstracta <literal>Bean</literal> representan Web Beans. Hay una instancia de <literal>Bean</literal> registrada con el objeto <literal>Manager</literal> para cada Web Bean en la aplicación."

#. Tag: programlisting
#: extend.xml:50
#, no-c-format
msgid ""
"public abstract class Bean&lt;T&gt; {\n"
"    \n"
"    private final Manager manager;\n"
"    \n"
"    protected Bean(Manager manager) {\n"
"        this.manager=manager;\n"
"    }\n"
"    \n"
"    protected Manager getManager() {\n"
"        return manager;\n"
"    }\n"
"    \n"
"    public abstract Set&lt;Class&gt; getTypes();\n"
"    public abstract Set&lt;Annotation&gt; getBindingTypes();\n"
"    public abstract Class&lt;? extends Annotation&gt; getScopeType();\n"
"    public abstract Class&lt;? extends Annotation&gt; getDeploymentType(); \n"
"    public abstract String getName();\n"
"    \n"
"    public abstract boolean isSerializable();\n"
"    public abstract boolean isNullable();\n"
"\n"
"    public abstract T create();\n"
"    public abstract void destroy(T instance);\n"
"    \n"
"}"
msgstr ""
"public abstract class Bean&lt;T&gt; {\n"
"    \n"
"    private final Manager manager;\n"
"    \n"
"    protected Bean(Manager manager) {\n"
"        this.manager=manager;\n"
"    }\n"
"    \n"
"    protected Manager getManager() {\n"
"        return manager;\n"
"    }\n"
"    \n"
"    public abstract Set&lt;Class&gt; getTypes();\n"
"    public abstract Set&lt;Annotation&gt; getBindingTypes();\n"
"    public abstract Class&lt;? extends Annotation&gt; getScopeType();\n"
"    public abstract Class&lt;? extends Annotation&gt; getDeploymentType(); \n"
"    public abstract String getName();\n"
"    \n"
"    public abstract boolean isSerializable();\n"
"    public abstract boolean isNullable();\n"
"\n"
"    public abstract T create();\n"
"    public abstract void destroy(T instance);\n"
"    \n"
"}"

#. Tag: para
#: extend.xml:52
#, no-c-format
msgid ""
"It's possible to extend the <literal>Bean</literal> class and register "
"instances by calling <literal>Manager.addBean()</literal> to provide support "
"for new kinds of Web Beans, beyond those defined by the Web Beans "
"specification (simple and enterprise Web Beans, producer methods and JMS "
"endpoints). For example, we could use the <literal>Bean</literal> class to "
"allow objects managed by another framework to be injected into Web Beans."
msgstr "Es posible extender la clase <literal>Bean</literal> y registrar instancias llamando a <literal>Manager.addBean()</literal> para proveer soporte a nuevas clases de Web Beans, además de los definidos por la especificación Web Beans (Web Beans sencillos y empresariales, métodos de productor y endpoints JMS). Por ejemplo, podríamos utilizar la clase <literal>Bean</literal> para permitir que los objetos sean administrados por otro marco que se inyecta en Web Beans."

#. Tag: para
#: extend.xml:60
#, no-c-format
msgid ""
"There are two subclasses of <literal>Bean</literal> defined by the Web Beans "
"specification: <literal>Interceptor</literal> and <literal>Decorator</"
"literal>."
msgstr ""
"Hay dos subclases de <literal>Bean</literal> definidas por la especificación de Web Beans: <literal>Interceptor</literal> y <literal>Decorador</"
"literal>."

#. Tag: title
#: extend.xml:67
#, no-c-format
msgid "The <literal>Context</literal> interface"
msgstr "La interfaz <literal>Contexto</literal>"

#. Tag: para
#: extend.xml:69
#, no-c-format
msgid ""
"The <literal>Context</literal> interface supports addition of new scopes to "
"Web Beans, or extension of the built-in scopes to new environments."
msgstr "La interfaz <literal>Contexto</literal> soporta la adición de nuevos ámbitos a Web Beans, o extensión de los ámbitos incorporados a nuevos entornos."

#. Tag: programlisting
#: extend.xml:72
#, no-c-format
msgid ""
"public interface Context {\n"
"    \n"
"    public Class&lt;? extends Annotation&gt; getScopeType();\n"
"    \n"
"    public &lt;T&gt; T get(Bean&lt;T&gt; bean, boolean create);\n"
"    \n"
"    boolean isActive();\n"
"    \n"
"}"
msgstr ""
"public interface Context {\n"
"    \n"
"    public Class&lt;? extends Annotation&gt; getScopeType();\n"
"    \n"
"    public &lt;T&gt; T get(Bean&lt;T&gt; bean, boolean create);\n"
"    \n"
"    boolean isActive();\n"
"    \n"
"}"

#. Tag: para
#: extend.xml:74
#, no-c-format
msgid ""
"For example, we might implement <literal>Context</literal> to add a business "
"process scope to Web Beans, or to add support for the conversation scope to "
"an application that uses Wicket."
msgstr "Por ejemplo, podríamos implementar <literal>Contexto</literal> para agregar un ámbito de proceso de negocio a Web Beans, o agregar soporte para el ámbito de conversación a una aplicación que utiliza Wicket."

