# translation of producermethods.po to Spanish
# Language es-ES translations for master.xml package.
#
# Automatically generated, 2008.
# Gladys Guerrero Lozano <gguerrer@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: producermethods\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-04-19 20:36+0000\n"
"PO-Revision-Date: 2009-01-19 17:00+1000\n"
"Last-Translator: Gladys Guerrero Lozano <gguerrer@redhat.com>\n"
"Language-Team: Spanish <fedora-trans-es@redhat.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#: producermethods.xml:5
#, no-c-format
msgid "Producer methods"
msgstr "Métodos de productor"

#. Tag: para
#: producermethods.xml:7
#, no-c-format
msgid ""
"Producer methods let us overcome certain limitations that arise when the Web "
"Bean manager, instead of the application, is responsible for instantiating "
"objects. They're also the easiest way to integrate objects which are not Web "
"Beans into the Web Beans environment. (We'll meet a second approach in <xref "
"linkend=\"xml\"/>.)"
msgstr ""
"Los métodos de productor nos permiten sobrepasar algunas limitaciones que se "
"presentan cuando el administrador de Web Bean, en lugar de la aplicación, es "
"responsable de instanciar objetos. También son la forma  más fácil de "
"integrar objetos que no son Web Beans dentro del entorno de Web Beans. "
"(Veremos un segundo método en <xref linkend=\"xml\"/>.)"

#. Tag: para
#: producermethods.xml:12
#, no-c-format
msgid "According to the spec:"
msgstr "Según las especificaciones:"

#. Tag: para
#: producermethods.xml:16
#, no-c-format
msgid ""
"A Web Beans producer method acts as a source of objects to be injected, "
"where:"
msgstr ""

#. Tag: para
#: producermethods.xml:20
#, no-c-format
msgid ""
"the objects to be injected are not required to be instances of Web Beans,"
msgstr ""

#. Tag: para
#: producermethods.xml:23
#, no-c-format
msgid "the concrete type of the objects to be injected may vary at runtime or"
msgstr ""

#. Tag: para
#: producermethods.xml:26
#, no-c-format
msgid ""
"the objects require some custom initialization that is not performed by the "
"Web Bean constructor"
msgstr ""

#. Tag: para
#: producermethods.xml:33
#, fuzzy, no-c-format
msgid "For example, producer methods let us:"
msgstr "Ámbito de un método de productor"

#. Tag: para
#: producermethods.xml:37
#, no-c-format
msgid "expose a JPA entity as a Web Bean,"
msgstr ""

#. Tag: para
#: producermethods.xml:40
#, no-c-format
msgid "expose any JDK class as a Web Bean,"
msgstr ""

#. Tag: para
#: producermethods.xml:43
#, no-c-format
msgid ""
"define multiple Web Beans, with different scopes or initialization, for the "
"same implementation class, or"
msgstr ""

#. Tag: para
#: producermethods.xml:47
#, no-c-format
msgid "vary the implementation of an API type at runtime."
msgstr ""

#. Tag: para
#: producermethods.xml:51
#, no-c-format
msgid ""
"In particular, producer methods let us use runtime polymorphism with Web "
"Beans. As we've seen, deployment types are a powerful solution to the "
"problem of deployment-time polymorphism. But once the system is deployed, "
"the Web Bean implementation is fixed. A producer method has no such "
"limitation:"
msgstr ""

#. Tag: programlisting
#: producermethods.xml:56
#, fuzzy, no-c-format
msgid ""
"<![CDATA[@SessionScoped\n"
"public class Preferences {\n"
"    \n"
"    private PaymentStrategyType paymentStrategy;\n"
"    \n"
"    ...\n"
"    \n"
"    @Produces @Preferred \n"
"    public PaymentStrategy getPaymentStrategy() {\n"
"        switch (paymentStrategy) {\n"
"            case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
"            case CHEQUE: return new ChequePaymentStrategy();\n"
"            case PAYPAL: return new PayPalPaymentStrategy();\n"
"            default: return null;\n"
"        } \n"
"    }\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy ccps,\n"
"                                          ChequePaymentStrategy cps,\n"
"                                          PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"

#. Tag: para
#: producermethods.xml:58
#, no-c-format
msgid "Consider an injection point:"
msgstr ""

#. Tag: programlisting
#: producermethods.xml:60
#, fuzzy, no-c-format
msgid "<![CDATA[@Preferred PaymentStrategy paymentStrat;]]>"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy() {\n"
"    ...\n"
"}]]>"

#. Tag: para
#: producermethods.xml:62
#, no-c-format
msgid ""
"This injection point has the same type and binding annotations as the "
"producer method, so it resolves to the producer method using the usual Web "
"Beans injection rules. The producer method will be called by the Web Bean "
"manager to obtain an instance to service this injection point."
msgstr ""

#. Tag: chapter
#: producermethods.xml:65
#, no-c-format
msgid "<chapter>.</chapter>"
msgstr ""

#. Tag: title
#: producermethods.xml:68
#, no-c-format
msgid "Scope of a producer method"
msgstr "Ámbito de un método de productor"

#. Tag: para
#: producermethods.xml:70
#, no-c-format
msgid ""
"The scope of the producer method defaults to <literal>@Dependent</literal>, "
"and so it will be called <emphasis>every time</emphasis> the Web Bean "
"manager injects this field or any other field that resolves to the same "
"producer method. Thus, there could be multiple instances of the "
"<literal>PaymentStrategy</literal> object for each user session."
msgstr ""
"El ámbito del método de productor está predeterminado a <literal>@Dependent</"
"literal>, y así será llamado <emphasis>cada vez</emphasis> que el "
"administrador de Web Bean inyecte este campo o cualquier otro campo que "
"apunte al mismo método de productor. Así, podría haber múltiples instancias "
"del objeto <literal>PaymentStrategy</literal> para cada sesión de usuario."

#. Tag: para
#: producermethods.xml:75
#, no-c-format
msgid ""
"To change this behavior, we can add a <literal>@SessionScoped</literal> "
"annotation to the method."
msgstr ""
"Para cambiar esta conducta, podemos agregar una anotación "
"<literal>@SessionScoped</literal> a este método."

#. Tag: programlisting
#: producermethods.xml:78
#, no-c-format
msgid ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy() {\n"
"    ...\n"
"}]]>"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy() {\n"
"    ...\n"
"}]]>"

#. Tag: para
#: producermethods.xml:80
#, no-c-format
msgid ""
"Now, when the producer method is called, the returned "
"<literal>PaymentStrategy</literal> will be bound to the session context. The "
"producer method won't be called again in the same session."
msgstr ""
"Ahora, cuando el método de productor es llamado, el "
"<literal>PaymentStrategy</literal> devuelto se enlazará con el contexto de "
"sesión. El método de productor no será llamado otra vez en la misma sesión."

#. Tag: title
#: producermethods.xml:87
#, no-c-format
msgid "Injection into producer methods"
msgstr "Inyección dentro de métodos de productor"

#. Tag: para
#: producermethods.xml:89
#, no-c-format
msgid ""
"There's one potential problem with the code above. The implementations of "
"<literal>CreditCardPaymentStrategy</literal> are instantiated using the Java "
"<literal>new</literal> operator. Objects instantiated directly by the "
"application can't take advantage of dependency injection and don't have "
"interceptors."
msgstr ""
"No hay un problema en potencia con el código anterior. Las implementaciones "
"de <literal>CreditCardPaymentStrategy</literal> son instanciadas mediante el "
"operador <literal>nuevo</literal> de Java. Los objetos instanciados "
"directamente por la aplicación no pueden hacer uso de la inyección de "
"dependencia y no tienen interceptores."

#. Tag: para
#: producermethods.xml:94
#, no-c-format
msgid ""
"If this isn't what we want we can use dependency injection into the producer "
"method to obtain Web Bean instances:"
msgstr ""
"Si esto no es lo que deseamos podemos utilizar la inyección de dependencia "
"dentro del método del productor para obtener las instancias de Web Bean:"

#. Tag: programlisting
#: producermethods.xml:97
#, no-c-format
msgid ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy ccps,\n"
"                                          ChequePaymentStrategy cps,\n"
"                                          PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy ccps,\n"
"                                          ChequePaymentStrategy cps,\n"
"                                          PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"

#. Tag: para
#: producermethods.xml:99
#, no-c-format
msgid ""
"Wait, what if <literal>CreditCardPaymentStrategy</literal> is a request "
"scoped Web Bean? Then the producer method has the effect of \"promoting\" "
"the current request scoped instance into session scope. This is almost "
"certainly a bug! The request scoped object will be destroyed by the Web Bean "
"manager before the session ends, but the reference to the object will be "
"left \"hanging\" in the session scope. This error will <emphasis>not</"
"emphasis> be detected by the Web Bean manager, so please take extra care "
"when returning Web Bean instances from producer methods!"
msgstr ""
"Espere, ¿qué sucede si <literal>CreditCardPaymentStrategy</literal> es una "
"petición en ámbito de Web Bean? Entonces el método del productor tiene el "
"efecto de \"promover\" la instancia de petición en ámbito actual dentro del "
"ámbito de sesión. ¡Esto casi seguro es un error! El objeto en ámbito de "
"petición será destruido por el administrador de Web Bean antes de finalizar "
"la sesión, pero la referencia al objeto se dejará \"colgando\" en el ámbito "
"de sesión. Este error <emphasis>no</emphasis> será detectado por el "
"administrador de Web Bean, entonces, ¡por favor tenga un cuidado especial al "
"retornar instancias de Web Bean desde métodos de productor!"

#. Tag: para
#: producermethods.xml:107
#, no-c-format
msgid ""
"There's at least three ways we could go about fixing this bug. We could "
"change the scope of the <literal>CreditCardPaymentStrategy</literal> "
"implementation, but this would affect other clients of that Web Bean. A "
"better option would be to change the scope of the producer method to "
"<literal>@Dependent</literal> or <literal>@RequestScoped</literal>."
msgstr ""
"Hay por lo menos tres formas de corregir este error. Podemos cambiar el "
"ámbito de la implementación <literal>CreditCardPaymentStrategy</literal>, "
"pero podría afectar a otros clientes de ese Web Bean. Una mejor opción sería "
"cambiar el ámbito del método del productor a <literal>@Dependent</literal> o "
"<literal>@RequestScoped</literal>."

#. Tag: para
#: producermethods.xml:113
#, no-c-format
msgid ""
"But a more common solution is to use the special <literal>@New</literal> "
"binding annotation."
msgstr ""
"Pero una solución más común es utilizar la anotación especial de enlace "
"<literal>@New</literal>."

#. Tag: title
#: producermethods.xml:119
#, no-c-format
msgid "Use of <literal>@New</literal> with producer methods"
msgstr "Uso de <literal>@New</literal> con métodos de productor"

#. Tag: para
#: producermethods.xml:121
#, no-c-format
msgid "Consider the following producer method:"
msgstr "Considere el siguiente método de productor:"

#. Tag: programlisting
#: producermethods.xml:123
#, no-c-format
msgid ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(@New CreditCardPaymentStrategy "
"ccps,\n"
"                                          @New ChequePaymentStrategy cps,\n"
"                                          @New PayPalPaymentStrategy ppps) "
"{\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(@New CreditCardPaymentStrategy "
"ccps,\n"
"                                          @New ChequePaymentStrategy cps,\n"
"                                          @New PayPalPaymentStrategy ppps) "
"{\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"

#. Tag: para
#: producermethods.xml:125
#, no-c-format
msgid ""
"Then a new <emphasis>dependent</emphasis> instance of "
"<literal>CreditCardPaymentStrategy</literal> will be created, passed to the "
"producer method, returned by the producer method and finally bound to the "
"session context. The dependent object won't be destroyed until the "
"<literal>Preferences</literal> object is destroyed, at the end of the "
"session."
msgstr ""
"Entonces una nueva instancia <emphasis>dependiente</emphasis> "
"de<literal>CreditCardPaymentStrategy</literal> será creada, pasada al método "
"de productor, devuelta por el método de productor y finalmente vinculada al "
"contexto de sesión. El objeto dependiente no será destruido hasta que el "
"objeto <literal>Preferencias</literal> sea destruido, al final de la sesión."

#~ msgid ""
#~ "<blockquote> <para>A Web Beans producer method acts as a source of "
#~ "objects to be injected, where:</para> <itemizedlist> <listitem> <para>the "
#~ "objects to be injected are not required to be instances of Web Beans,</"
#~ "para> </listitem> <listitem> <para>the concrete type of the objects to be "
#~ "injected may vary at runtime or</para> </listitem> <listitem> <para>the "
#~ "objects require some custom initialization that is not performed by the "
#~ "Web Bean constructor</para> </listitem> </itemizedlist> </blockquote> "
#~ "<para>For example, producer methods let us:</para> <itemizedlist> "
#~ "<listitem> <para>expose a JPA entity as a Web Bean,</para> </listitem> "
#~ "<listitem> <para>expose any JDK class as a Web Bean,</para> </listitem> "
#~ "<listitem> <para>define multiple Web Beans, with different scopes or "
#~ "initialization, for the same implementation class, or</para> </listitem> "
#~ "<listitem> <para>vary the implementation of an API type at runtime.</"
#~ "para> </listitem> </itemizedlist> <para>In particular, producer methods "
#~ "let us use runtime polymorphism with Web Beans. As we've seen, deployment "
#~ "types are a powerful solution to the problem of deployment-time "
#~ "polymorphism. But once the system is deployed, the Web Bean "
#~ "implementation is fixed. A producer method has no such limitation:</para> "
#~ "<programlisting role=\"JAVA\"><![CDATA[@SessionScoped\n"
#~ "public class Preferences {\n"
#~ "    \n"
#~ "    private PaymentStrategyType paymentStrategy;\n"
#~ "    \n"
#~ "    ...\n"
#~ "    \n"
#~ "    @Produces @Preferred \n"
#~ "    public PaymentStrategy getPaymentStrategy() {\n"
#~ "        switch (paymentStrategy) {\n"
#~ "            case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
#~ "            case CHEQUE: return new ChequePaymentStrategy();\n"
#~ "            case PAYPAL: return new PayPalPaymentStrategy();\n"
#~ "            default: return null;\n"
#~ "        } \n"
#~ "    }\n"
#~ "    \n"
#~ "}]]></programlisting> <para>Consider an injection point:</para> "
#~ "<programlisting role=\"JAVA\"><![CDATA[@Preferred PaymentStrategy "
#~ "paymentStrat;]]></programlisting> <para>This injection point has the same "
#~ "type and binding annotations as the producer method, so it resolves to "
#~ "the producer method using the usual Web Beans injection rules. The "
#~ "producer method will be called by the Web Bean manager to obtain an "
#~ "instance to service this injection point.</para>."
#~ msgstr ""
#~ "<blockquote> <para>Un productor de Web Beans actúa como fuente de objetos "
#~ "a ser inyectados, donde:</para> <itemizedlist> <listitem> <para>los "
#~ "objetos que van a ser inyectados no necesitan ser instancias de Web Beans,"
#~ "</para> </listitem> <listitem> <para>el tipo concreto de objetos a ser "
#~ "inyectado puede variar en tiempo de ejecución o</para> </listitem> "
#~ "<listitem> <para>los objetos requieren alguna especificación de "
#~ "inicialización que no es realizada por el constructor de Web Bean</para> "
#~ "</listitem> </itemizedlist> </blockquote> <para>Por ejemplo, los métodos "
#~ "de productor nos permiten:</para> <itemizedlist> <listitem> <para>exponer "
#~ "una entidad JPA como un Web Bean,</para> </listitem> <listitem> "
#~ "<para>exponer cualquier clase JDK como un Web Bean,</para> </listitem> "
#~ "<listitem> <para>definir múltiples Web Beans, con diferentes ámbitos o "
#~ "inicialización para la misma clase de implementación, o</para> </"
#~ "listitem> <listitem> <para>variar la implementación de un tipo API en "
#~ "tiempo de ejecución.</para> </listitem> </itemizedlist> <para>En "
#~ "particular, los métodos de productor nos permiten utilizar polimorfismo "
#~ "de tiempo de ejecución con Web Beans. Como hemos visto, los tipos de "
#~ "despliegue son una solución potente para el problema del polimorfismo de "
#~ "tiempo de despliegue. Sin embargo, una vez que el sistema es desplegado, "
#~ "la implementación de Web Bean es corregida. El método de productor no "
#~ "tiene dicha limitación:</para> <programlisting role=\"JAVA\"><![CDATA"
#~ "[@SessionScoped\n"
#~ "public class Preferences {\n"
#~ "    \n"
#~ "    private PaymentStrategyType paymentStrategy;\n"
#~ "    \n"
#~ "    ...\n"
#~ "    \n"
#~ "    @Produces @Preferred \n"
#~ "    public PaymentStrategy getPaymentStrategy() {\n"
#~ "        switch (paymentStrategy) {\n"
#~ "            case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
#~ "            case CHEQUE: return new ChequePaymentStrategy();\n"
#~ "            case PAYPAL: return new PayPalPaymentStrategy();\n"
#~ "            default: return null;\n"
#~ "        } \n"
#~ "    }\n"
#~ "    \n"
#~ "}]]></programlisting> <para>Consider an injection point:</para> "
#~ "<programlisting role=\"JAVA\"><![CDATA[@Preferred PaymentStrategy "
#~ "paymentStrat;]]></programlisting> <para>Este punto de inyección tiene el "
#~ "mismo tipo de anotaciones de enlace que el método de productor, por lo "
#~ "tanto apunta al método de productor mediante las reglas de inyección "
#~ "usuales de Web Beans. El método del productor será llamado por el "
#~ "administrador de Web Bean a fin de obtener una instancia para servir a "
#~ "este punto de inyección.</para>."
