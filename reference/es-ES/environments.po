# Language es-ES translations for Web_Beans:_Java_Contexts_and_Dependency_Injection package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: Web_Beans:_Java_Contexts_and_Dependency_Injection "
"VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-01-06 12:17+0000\n"
"PO-Revision-Date: 2009-03-28 17:09+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: environments.xml:4
#, no-c-format
msgid "Application servers and environments supported by Weld"
msgstr ""

#. Tag: title
#: environments.xml:7
#, no-c-format
msgid "Using Weld with JBoss AS"
msgstr ""

#. Tag: para
#: environments.xml:9
#, no-c-format
msgid ""
"If you are using JBoss AS 5.2, no additional configuration is required to "
"use Weld (or CDI for that matter). All you need to do is make your "
"application a bean bean archive by adding <literal>META-INF/beans.xml</"
"literal> to the classpath or <literal>WEB-INF/beans.xml</literal> to the web "
"root!"
msgstr ""

#. Tag: para
#: environments.xml:15
#, no-c-format
msgid ""
"Unfortunately, you can't use Weld with earlier versions of JBoss AS since "
"they are missing key libraries. If you want to learn how to upgrade the "
"built-in support on JBoss AS 5.2, then read on."
msgstr ""

#. Tag: para
#: environments.xml:20
#, no-c-format
msgid ""
"Upgrading the Weld add-on is easy. The Weld distribution has a build that "
"can take care of this task for you in a single command. First, we need to "
"tell Weld where JBoss AS is located. Create a new file named <literal>local."
"build.properties</literal> in the examples directory of the Weld "
"distribution and assign the path of your JBoss AS installation to the "
"property key <literal>jboss.home</literal>, as follows:"
msgstr ""

#. Tag: programlisting
#: environments.xml:27
#, no-c-format
msgid "<![CDATA[jboss.home=/path/to/jboss-as-5.x]]>"
msgstr ""

#. Tag: para
#: environments.xml:29
#, no-c-format
msgid ""
"Now we can install the Weld deployer from the <literal>jboss-as</literal> "
"directory of the Weld distribution:"
msgstr ""

#. Tag: programlisting
#: environments.xml:33
#, no-c-format
msgid ""
"$> cd jboss-as\n"
"$> ant update"
msgstr ""

#. Tag: para
#: environments.xml:36
#, no-c-format
msgid ""
"A new deployer, <literal>weld.deployer</literal> is added to JBoss AS. This "
"adds supports for JSR-299 deployments to JBoss AS, and allows Weld to query "
"the EJB 3 container and discover which EJBs are installed in your "
"application. It also performs an upgrade of the Javassist library, if "
"necessary."
msgstr ""

#. Tag: title
#: environments.xml:46
#, no-c-format
msgid "GlassFish"
msgstr ""

#. Tag: para
#: environments.xml:48
#, no-c-format
msgid ""
"Weld is also built into GlassFish from V3 onwards. Since GlassFish V3 is the "
"Java EE 6 reference implementation, it must support all features of CDI. "
"What better way for GlassFish to support these features than to use Weld, "
"the JSR-299 reference implementation? Just package up your CDI application "
"and deploy."
msgstr ""

#. Tag: title
#: environments.xml:56
#, no-c-format
msgid "Servlet containers (such as Tomcat or Jetty)"
msgstr ""

#. Tag: para
#: environments.xml:58
#, no-c-format
msgid ""
"While JSR-299 does not require support for servlet environments, Weld can be "
"used in any servlet container, such as Tomcat 6.0 or Jetty 6.1."
msgstr ""

#. Tag: para
#: environments.xml:64
#, no-c-format
msgid ""
"There is a major limitation to using a servlet container. Weld doesn't "
"support deploying session beans, injection using <literal>@EJB</literal> or "
"<literal>@PersistenceContext</literal>, or using transactional events in "
"servlet containers. For enterprise features such as these, you should really "
"be looking at a Java EE application server."
msgstr ""

#. Tag: para
#: environments.xml:72
#, no-c-format
msgid ""
"Weld should be used as a web application library in a servlet container. You "
"should place <literal>weld-servlet.jar</literal> in <literal>WEB-INF/lib</"
"literal> in the web root. <literal>weld-servlet.jar</literal> is an \"uber-"
"jar\", meaning it bundles all the bits of Weld and CDI required for running "
"in a servlet container, provided for your convenience. Alternatively, you "
"could use its component jars:"
msgstr ""

#. Tag: literal
#: environments.xml:84
#, no-c-format
msgid "jsr299-api.jar"
msgstr ""

#. Tag: literal
#: environments.xml:89
#, no-c-format
msgid "weld-api.jar"
msgstr ""

#. Tag: literal
#: environments.xml:94
#, no-c-format
msgid "weld-spi.jar"
msgstr ""

#. Tag: literal
#: environments.xml:99
#, no-c-format
msgid "weld-core.jar"
msgstr ""

#. Tag: literal
#: environments.xml:104
#, no-c-format
msgid "weld-logging.jar"
msgstr ""

#. Tag: literal
#: environments.xml:109
#, no-c-format
msgid "weld-servlet-int.jar"
msgstr ""

#. Tag: literal
#: environments.xml:114
#, no-c-format
msgid "javassist.jar"
msgstr ""

#. Tag: literal
#: environments.xml:119
#, no-c-format
msgid "dom4j.jar"
msgstr ""

#. Tag: literal
#: environments.xml:124
#, no-c-format
msgid "google-collections.jar"
msgstr ""

#. Tag: para
#: environments.xml:129
#, no-c-format
msgid ""
"You also need to explicitly specify the servlet listener (used to boot Weld, "
"and control its interaction with requests) in <literal>WEB-INF/web.xml</"
"literal> in the web root:"
msgstr ""

#. Tag: programlisting
#: environments.xml:134
#, no-c-format
msgid ""
"<![CDATA[<listener>\n"
"   <listener-class>org.jboss.weld.environment.servlet.Listener</listener-"
"class>\n"
"</listener>]]>"
msgstr ""

#. Tag: title
#: environments.xml:137
#, no-c-format
msgid "Tomcat"
msgstr ""

#. Tag: para
#: environments.xml:139
#, no-c-format
msgid ""
"Tomcat has a read-only JNDI, so Weld can't automatically bind the "
"BeanManager extension SPI. To bind the BeanManager into JNDI, you should "
"populate <literal>META-INF/context.xml</literal> in the web root with the "
"following contents:"
msgstr ""

#. Tag: programlisting
#: environments.xml:145
#, no-c-format
msgid ""
"<![CDATA[<Context>\n"
"   <Resource name=\"BeanManager\" \n"
"      auth=\"Container\"\n"
"      type=\"javax.enterprise.inject.spi.BeanManager\"\n"
"      factory=\"org.jboss.weld.resources.ManagerObjectFactory\"/>\n"
"</Context>]]>"
msgstr ""

#. Tag: para
#: environments.xml:147
#, no-c-format
msgid ""
"and make it available to your deployment by adding this to the bottom of "
"<literal>web.xml</literal>:"
msgstr ""

#. Tag: programlisting
#: environments.xml:151
#, no-c-format
msgid ""
"<![CDATA[<resource-env-ref>\n"
"   <resource-env-ref-name>BeanManager</resource-env-ref-name>\n"
"   <resource-env-ref-type>\n"
"      javax.enterprise.inject.spi.BeanManager\n"
"   </resource-env-ref-type>\n"
"</resource-env-ref>]]>"
msgstr ""

#. Tag: para
#: environments.xml:153
#, no-c-format
msgid ""
"Tomcat only allows you to bind entries to <literal>java:comp/env</literal>, "
"so the BeanManager will be available at <literal>java:comp/env/BeanManager</"
"literal>"
msgstr ""

#. Tag: para
#: environments.xml:158
#, no-c-format
msgid ""
"Weld also supports Servlet injection in Tomcat. To enable this, place the "
"<literal>weld-tomcat-support.jar</literal> in <literal>$TOMCAT_HOME/lib</"
"literal>, and add the following to <literal>META-INF/context.xml</literal>:"
msgstr ""

#. Tag: programlisting
#: environments.xml:164
#, no-c-format
msgid ""
"<![CDATA[<Listener className=\"org.jboss.weld.environment.tomcat."
"WeldLifecycleListener\"/>]]>"
msgstr ""

#. Tag: title
#: environments.xml:169
#, no-c-format
msgid "Jetty"
msgstr ""

#. Tag: para
#: environments.xml:171
#, no-c-format
msgid ""
"Like Tomcat, Jetty has a read-only JNDI, so Weld can't automatically bind "
"the Manager. To bind the Manager to JNDI, you should populate <literal>WEB-"
"INF/jetty-env.xml</literal> with the following contents:"
msgstr ""

#. Tag: programlisting
#: environments.xml:176
#, no-c-format
msgid ""
"<![CDATA[<!DOCTYPE Configure PUBLIC \"-//Mort Bay Consulting//DTD Configure//"
"EN\"\n"
"   \"http://jetty.mortbay.org/configure.dtd\">\n"
"<Configure id=\"webAppCtx\" class=\"org.mortbay.jetty.webapp.WebAppContext"
"\">\n"
"   <New id=\"BeanManager\" class=\"org.mortbay.jetty.plus.naming.Resource"
"\">\n"
"      <Arg><Ref id=\"webAppCtx\"/></Arg> \n"
"      <Arg>BeanManager</Arg>\n"
"      <Arg>\n"
"         <New class=\"javax.naming.Reference\">\n"
"            <Arg>javax.enterprise.inject.spi.BeanManager</Arg> \n"
"            <Arg>org.jboss.weld.resources.ManagerObjectFactory</Arg>\n"
"            <Arg/>\n"
"         </New>\n"
"      </Arg>\n"
"   </New>\n"
"</Configure>]]>"
msgstr ""

#. Tag: para
#: environments.xml:178
#, no-c-format
msgid ""
"Notice that Jetty doesn't not have built-in support for an <literal>javax."
"naming.spi.ObjectFactory</literal> like Tomcat, so it's necessary to "
"manually create the <literal>javax.naming.Reference</literal> to wrap around "
"it."
msgstr ""

#. Tag: para
#: environments.xml:184
#, no-c-format
msgid ""
"Jetty only allows you to bind entries to <literal>java:comp/env</literal>, "
"so the BeanManager will be available at <literal>java:comp/env/BeanManager</"
"literal>"
msgstr ""

#. Tag: para
#: environments.xml:189
#, no-c-format
msgid "Weld does not currently support Servlet injection in Jetty."
msgstr ""

#. Tag: title
#: environments.xml:198
#, no-c-format
msgid "Java SE"
msgstr ""

#. Tag: para
#: environments.xml:200
#, no-c-format
msgid ""
"In addition to improved integration of the Enterprise Java stack, the "
"\"Contexts and Dependency Injection for the Java EE platform\" specification "
"also defines a state of the art typesafe, stateful dependency injection "
"framework, which can prove useful in a wide range of application types. To "
"help developers take advantage of this, Weld provides a simple means for "
"being executed in the Java Standard Edition (SE) environment independently "
"of any Java EE APIs."
msgstr ""

#. Tag: para
#: environments.xml:208
#, no-c-format
msgid ""
"When executing in the SE environment the following features of Weld are "
"available:"
msgstr ""

#. Tag: para
#: environments.xml:214
#, no-c-format
msgid ""
"Managed beans with <literal>@PostConstruct</literal> and "
"<literal>@PreDestroy</literal> lifecycle callbacks"
msgstr ""

#. Tag: para
#: environments.xml:220
#, no-c-format
msgid "Dependency injection with qualifiers and alternatives"
msgstr ""

#. Tag: para
#: environments.xml:225
#, no-c-format
msgid ""
"<literal>@Application</literal>, <literal>@Dependent</literal> and "
"<literal>@Singleton</literal> scopes"
msgstr ""

#. Tag: para
#: environments.xml:231
#, no-c-format
msgid "Interceptors and decorators"
msgstr ""

#. Tag: para
#: environments.xml:236
#, no-c-format
msgid "Stereotypes"
msgstr ""

#. Tag: para
#: environments.xml:241
#, no-c-format
msgid "Events"
msgstr ""

#. Tag: para
#: environments.xml:246
#, no-c-format
msgid "Portable extension support"
msgstr ""

#. Tag: para
#: environments.xml:252
#, no-c-format
msgid "EJB beans are not supported."
msgstr ""

#. Tag: title
#: environments.xml:257
#, no-c-format
msgid "CDI SE Module"
msgstr ""

#. Tag: para
#: environments.xml:259
#, no-c-format
msgid ""
"Weld provides an extension which will boot a CDI bean manager in Java SE, "
"automatically registering all simple beans found on the classpath. The "
"command line parameters can be injected using either of the following:"
msgstr ""

#. Tag: programlisting
#: environments.xml:264
#, no-c-format
msgid "<![CDATA[@Inject @Parameters List<String> params;]]>"
msgstr ""

#. Tag: programlisting
#: environments.xml:266
#, no-c-format
msgid "<![CDATA[@Inject @Parameters String[] paramsArray;]]>"
msgstr ""

#. Tag: para
#: environments.xml:268
#, no-c-format
msgid "The second form is useful for compatibility with existing classes."
msgstr ""

#. Tag: para
#: environments.xml:273
#, no-c-format
msgid ""
"The command line parameters do not become available for injection until the "
"<literal>ContainerInitialized</literal> event is fired. If you need access "
"to the parameters during initialization you can do so via the "
"<literal>public static String[] getParameters()</literal> method in "
"<literal>StartMain</literal>."
msgstr ""

#. Tag: para
#: environments.xml:282
#, no-c-format
msgid "Here's an example of a simple CDI SE application:"
msgstr ""

#. Tag: programlisting
#: environments.xml:286
#, no-c-format
msgid ""
"<![CDATA[@Singleton\n"
"public class HelloWorld\n"
"{\n"
"   public void printHello(@Observes ContainerInitialized event, @Parameters "
"List<String> parameters) {\n"
"       System.out.println(\"Hello \" + parameters.get(0));\n"
"   }\n"
"}]]>"
msgstr ""

#. Tag: title
#: environments.xml:292
#, no-c-format
msgid "Bootstrapping CDI SE"
msgstr ""

#. Tag: para
#: environments.xml:294
#, no-c-format
msgid "CDI SE applications can be bootstrapped in the following ways."
msgstr ""

#. Tag: title
#: environments.xml:300
#, no-c-format
msgid "The ContainerInitialized Event"
msgstr ""

#. Tag: para
#: environments.xml:302
#, no-c-format
msgid ""
"Thanks to the power of CDI's typesafe event model, application developers "
"need not write any bootstrapping code. The Weld SE module comes with a built-"
"in main method which will bootstrap CDI for you and then fire a "
"<literal>ContainerInitialized</literal> event. The entry point for your "
"application code would therefore be a simple bean which observes the "
"<literal>ContainerInitialized</literal> event, as in the previous example."
msgstr ""

#. Tag: para
#: environments.xml:310
#, no-c-format
msgid ""
"In this case your application can be started by calling the provided main "
"method like so:"
msgstr ""

#. Tag: programlisting
#: environments.xml:313
#, no-c-format
msgid "<![CDATA[java org.jboss.weld.environments.se.StartMain <args>]]>"
msgstr ""

#. Tag: title
#: environments.xml:319
#, no-c-format
msgid "Programatic Bootstrap API"
msgstr ""

#. Tag: para
#: environments.xml:321
#, no-c-format
msgid ""
"For added flexibility, CDI SE also comes with a bootstrap API which can be "
"called from within your application in order to initialize CDI and obtain "
"references to your application's beans and events. The API consists of two "
"classes: <literal>Weld</literal> and <literal>WeldContainer</literal>."
msgstr ""

#. Tag: programlisting
#: environments.xml:327
#, no-c-format
msgid ""
"<![CDATA[public class Weld\n"
"{\n"
"\n"
"   /** Boots Weld and creates and returns a WeldContainer instance, through "
"which\n"
"    * beans and events can be accesed. */\n"
"   public WeldContainer initialize() {...}\n"
"\n"
"   /** Convenience method for shutting down the container. */\n"
"   public void shutdown() {...}\n"
"\n"
"}]]>"
msgstr ""

#. Tag: programlisting
#: environments.xml:329
#, no-c-format
msgid ""
"<![CDATA[public class WeldContainer\n"
"{\n"
"\n"
"   /** Provides access to all beans within the application. */\n"
"   public Instance<Object> instance() {...}\n"
"\n"
"   /** Provides access to all events within the application. */\n"
"   public Event<Object> event() {...}\n"
"\n"
"   /** Provides direct access to the BeanManager. */\n"
"   public BeanManager getBeanManager() {...}\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: environments.xml:331
#, no-c-format
msgid ""
"Here's an example application main method which uses this API to initialize "
"a bean of type <literal>MyApplicationBean</literal>."
msgstr ""

#. Tag: programlisting
#: environments.xml:334
#, no-c-format
msgid ""
"<![CDATA[public static void main(String[] args) {\n"
"   WeldContainer weld = new Weld().initialize();\n"
"   weld.instance().select(MyApplicationBean.class).get();\n"
"   weld.shutdown();\n"
"}]]>"
msgstr ""

#. Tag: para
#: environments.xml:336
#, no-c-format
msgid ""
"Alternatively the application could be started by firing a custom event "
"which would then be observed by another simple bean. The following example "
"fires <literal>MyEvent</literal> on startup."
msgstr ""

#. Tag: programlisting
#: environments.xml:340
#, no-c-format
msgid ""
"<![CDATA[public static void main(String[] args) {\n"
"   WeldContainer weld = new Weld().initialize();\n"
"   weld.event().select(MyEvent.class).fire( new MyEvent() );\n"
"   weld.shutdown();\n"
"}]]>"
msgstr ""

#. Tag: title
#: environments.xml:348
#, no-c-format
msgid "Setting the Classpath"
msgstr ""

#. Tag: para
#: environments.xml:350
#, no-c-format
msgid ""
"Weld SE comes packaged as a 'shaded' jar which includes the CDI API, Weld "
"Core and all dependant classes bundled into a single jar. Therefore the only "
"Weld jar you need on the classpath, in addition to your application's "
"classes and dependant jars, is the Weld SE jar."
msgstr ""
