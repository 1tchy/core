# Language pt-BR translations for Introduction_to_Web_Beans package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: Introduction_to_Web_Beans VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-11-11 15:00+0000\n"
"PO-Revision-Date: 2009-12-19 18:01-0300\n"
"Last-Translator: João Paulo Viragine <joao.viragine@redhat.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: example.xml:4
#, no-c-format
msgid "JSF web application example"
msgstr "Exemplo de aplicação web JSF "

#. Tag: para
#: example.xml:6
#, fuzzy, no-c-format
msgid "Let's illustrate these ideas with a full example. We're going to implement user login/logout for an application that uses JSF. First, we'll define a request-scoped bean to hold the username and password entered during login:"
msgstr "Ilustraremos essas idéias com um exemplo completo. Nós  implementaremos um login/logout de usuário de uma aplicação que utiliza JSF. Primeiro, definiremos um Web Bean que irá armazenar o nome do usuário (username) e a senha (password) fornecidos durante o login:"

#. Tag: programlisting
#: example.xml:11
#, no-c-format
msgid ""
"<![CDATA[@Named @RequestScoped\n"
"public class Credentials {\n"
"    private String username;\n"
"    private String password;\n"
"    \n"
"    public String getUsername() { return username; }\n"
"    public void setUsername(String username) { this.username = username; }\n"
"    \n"
"    public String getPassword() { return password; }\n"
"    public void setPassword(String password) { this.password = password; }\n"
"}]]>"
msgstr ""
"<![CDATA[@Named @RequestScoped\n"
"public class Credentials {\n"
"    private String username;\n"
"    private String password;\n"
"    \n"
"    public String getUsername() { return username; }\n"
"    public void setUsername(String username) { this.username = username; }\n"
"    \n"
"    public String getPassword() { return password; }\n"
"    public void setPassword(String password) { this.password = password; }\n"
"}]]>"

#. Tag: para
#: example.xml:13
#, fuzzy, no-c-format
msgid "This bean is bound to the login prompt in the following JSF form:"
msgstr "Esse Web Bean é vinculado ao prompt de login do seguinte formulário JSF:"

#. Tag: programlisting
#: example.xml:15
#, no-c-format
msgid ""
"<![CDATA[<h:form>\n"
"   <h:panelGrid columns=\"2\" rendered=\"#{!login.loggedIn}\">\n"
"      <h:outputLabel for=\"username\">Username:</h:outputLabel>\n"
"      <h:inputText id=\"username\" value=\"#{credentials.username}\"/>\n"
"      <h:outputLabel for=\"password\">Password:</h:outputLabel>\n"
"      <h:inputText id=\"password\" value=\"#{credentials.password}\"/>\n"
"   </h:panelGrid>\n"
"   <h:commandButton value=\"Login\" action=\"#{login.login}\" rendered=\"#{!login.loggedIn}\"/>\n"
"   <h:commandButton value=\"Logout\" action=\"#{login.logout}\" rendered=\"#{login.loggedIn}\"/>\n"
"</h:form>]]>"
msgstr ""
"<![CDATA[<h:form>\n"
"   <h:panelGrid columns=\"2\" rendered=\"#{!login.loggedIn}\">\n"
"      <h:outputLabel for=\"username\">Username:</h:outputLabel>\n"
"      <h:inputText id=\"username\" value=\"#{credentials.username}\"/>\n"
"      <h:outputLabel for=\"password\">Password:</h:outputLabel>\n"
"      <h:inputText id=\"password\" value=\"#{credentials.password}\"/>\n"
"   </h:panelGrid>\n"
"   <h:commandButton value=\"Login\" action=\"#{login.login}\" rendered=\"#{!login.loggedIn}\"/>\n"
"   <h:commandButton value=\"Logout\" action=\"#{login.logout}\" rendered=\"#{login.loggedIn}\"/>\n"
"</h:form>]]>"

#. Tag: para
#: example.xml:17
#, fuzzy, no-c-format
msgid "The actual work is done by a session-scoped bean that maintains information about the currently logged-in user and exposes the <literal>User</literal> entity to other beans:"
msgstr "O verdadeiro trabalho é realizado por um Web Bean em escopo de sessão que mantém informações sobre o atual usuário conectado e expõe a entidade <literal>User</literal> para outros Web Beans:"

#. Tag: programlisting
#: example.xml:22
#, no-c-format
msgid ""
"<![CDATA[@SessionScoped @Named\n"
"public class Login implements Serializable {\n"
"\n"
"   @Inject Credentials credentials;\n"
"   @Inject @UserDatabase EntityManager userDatabase;\n"
"\n"
"   private User user;\n"
"    \n"
"   public void login() {\n"
"      List<User> results = userDatabase.createQuery(\n"
"         \"select u from User u where u.username = :username and u.password = :password\")\n"
"         .setParameter(\"username\", credentials.getUsername())\n"
"         .setParameter(\"password\", credentials.getPassword())\n"
"         .getResultList();\n"
"        \n"
"      if (!results.isEmpty()) {\n"
"         user = results.get(0);\n"
"      }\n"
"      else {\n"
"         // perhaps add code here to report a failed login\n"
"      }\n"
"   }\n"
"    \n"
"   public void logout() {\n"
"      user = null;\n"
"   }\n"
"    \n"
"   public boolean isLoggedIn() {\n"
"      return user != null;\n"
"   }\n"
"    \n"
"   @Produces @LoggedIn User getCurrentUser() {\n"
"      return user;\n"
"   }\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[@SessionScoped @Named\n"
"public class Login implements Serializable {\n"
"\n"
"   @Inject Credentials credentials;\n"
"   @Inject @UserDatabase EntityManager userDatabase;\n"
"\n"
"   private User user;\n"
"    \n"
"   public void login() {\n"
"      List<User> results = userDatabase.createQuery(\n"
"         \"select u from User u where u.username = :username and u.password = :password\")\n"
"         .setParameter(\"username\", credentials.getUsername())\n"
"         .setParameter(\"password\", credentials.getPassword())\n"
"         .getResultList();\n"
"        \n"
"      if (!results.isEmpty()) {\n"
"         user = results.get(0);\n"
"      }\n"
"      else {\n"
"         // perhaps add code here to report a failed login\n"
"      }\n"
"   }\n"
"    \n"
"   public void logout() {\n"
"      user = null;\n"
"   }\n"
"    \n"
"   public boolean isLoggedIn() {\n"
"      return user != null;\n"
"   }\n"
"    \n"
"   @Produces @LoggedIn User getCurrentUser() {\n"
"      return user;\n"
"   }\n"
"\n"
"}]]>"

#. Tag: para
#: example.xml:24
#, no-c-format
msgid "<literal>@LoggedIn</literal> and <literal>@UserDatabase</literal> are custom qualifier annotations:"
msgstr ""

#. Tag: programlisting
#: example.xml:26
#, no-c-format
msgid ""
"<![CDATA[@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, PARAMETER, FIELD})\n"
"public @interface LoggedIn {}]]>"
msgstr ""
"<![CDATA[@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, PARAMETER, FIELD})\n"
"public @interface LoggedIn {}]]>"

#. Tag: programlisting
#: example.xml:28
#, no-c-format
msgid ""
"<![CDATA[@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({METHOD, PARAMETER, FIELD})\n"
"public @interface UserDatabase {}]]>"
msgstr ""
"<![CDATA[@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({METHOD, PARAMETER, FIELD})\n"
"public @interface UserDatabase {}]]>"

#. Tag: para
#: example.xml:30
#, no-c-format
msgid "We need an adaptor bean to expose our typesafe <literal>EntityManager</literal>:"
msgstr ""

#. Tag: programlisting
#: example.xml:34
#, no-c-format
msgid ""
"<![CDATA[public class UserDatabaseProducer {\n"
"   @Produces @UserDatabase @PersistenceContext EntityManager userDatabase;\n"
"}]]>"
msgstr ""
"<![CDATA[public class UserDatabaseProducer {\n"
"   @Produces @UserDatabase @PersistenceContext EntityManager userDatabase;\n"
"}]]>"

#. Tag: para
#: example.xml:36
#, fuzzy, no-c-format
msgid "Now <literal>DocumentEditor</literal>, or any other bean, can easily inject the current user:"
msgstr "Agora, qualquer outro Web Bean pode facilmente injetar o usuário atual:"

#. Tag: programlisting
#: example.xml:38
#, no-c-format
msgid ""
"<![CDATA[public class DocumentEditor {\n"
"   @Inject Document document;\n"
"   @Inject @LoggedIn User currentUser;\n"
"   @Inject @DocumentDatabase EntityManager docDatabase;\n"
"    \n"
"   public void save() {\n"
"      document.setCreatedBy(currentUser);\n"
"      docDatabase.persist(document);\n"
"   }\n"
"}]]>"
msgstr ""
"<![CDATA[public class DocumentEditor {\n"
"   @Inject Document document;\n"
"   @Inject @LoggedIn User currentUser;\n"
"   @Inject @DocumentDatabase EntityManager docDatabase;\n"
"    \n"
"   public void save() {\n"
"      document.setCreatedBy(currentUser);\n"
"      docDatabase.persist(document);\n"
"   }\n"
"}]]>"

#. Tag: para
#: example.xml:40
#, no-c-format
msgid "Or we can reference the current user in a JSF view:"
msgstr ""

#. Tag: programlisting
#: example.xml:42
#, no-c-format
msgid ""
"<![CDATA[<h:panelGroup rendered=\"#{login.loggedIn}\">\n"
"   signed in as #{currentUser.username}\n"
"</h:panelGroup>]]>"
msgstr ""
"<![CDATA[<h:panelGroup rendered=\"#{login.loggedIn}\">\n"
"   signed in as #{currentUser.username}\n"
"</h:panelGroup>]]>"

#. Tag: para
#: example.xml:44
#, fuzzy, no-c-format
msgid "Hopefully, this example gave you a taste of the CDI programming model. In the next chapter, we'll explore dependency injection in greater depth."
msgstr "Esperamos que esse exemplo tenha dado um gostinho do modelo de programação com Web Beans. No capítulo seguinte, exploraremos a injeção de dependência da Web Beans em profundidade."

#~ msgid "Of course, <literal>@LoggedIn</literal> is a binding annotation:"
#~ msgstr ""
#~ "Certamente, <literal>@LoggedIn</literal> é uma anotação de binding "
#~ "(binding annotation):"

