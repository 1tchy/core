# Language pt-BR translations for Introduction_to_Web_Beans package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: Introduction_to_Web_Beans VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-03-28 17:09+0000\n"
"PO-Revision-Date: 2009-04-10 16:06-0300\n"
"Last-Translator: João Paulo Viragine <joao.viragine@redhat.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: producermethods.xml:5
#, no-c-format
msgid "Producer methods"
msgstr "Métodos produtores"

#. Tag: para
#: producermethods.xml:7
#, no-c-format
msgid "Producer methods let us overcome certain limitations that arise when the Web Bean manager, instead of the application, is responsible for instantiating objects. They're also the easiest way to integrate objects which are not Web Beans into the Web Beans environment. (We'll meet a second approach in <xref linkend=\"xml\"/>.)"
msgstr "Métodos produtores permitem superarmos certas limitações que surgem quando o gerenciador do Web Bean, em vez da aplicação, é responsável por instanciar objetos. Eles são também a forma mais fácil de integrar os objetos que não são Web Beans ao ambiente Web Beans. (Veremos uma segunda abordagem em <xref linkend=\"xml\"/>.)"

#. Tag: para
#: producermethods.xml:12
#, no-c-format
msgid "According to the spec:"
msgstr "De acordo com a especificação:"

#. Tag: para
#: producermethods.xml:16
#, no-c-format
msgid "A Web Beans producer method acts as a source of objects to be injected, where:"
msgstr "Um método produtor Web Beans funciona como uma fonte de objetos a ser injetado, quando:"

#. Tag: para
#: producermethods.xml:20
#, no-c-format
msgid "the objects to be injected are not required to be instances of Web Beans,"
msgstr "os objetos a serem injetados não forem obrigados a ser instâncias de Web Beans,"

#. Tag: para
#: producermethods.xml:23
#, no-c-format
msgid "the concrete type of the objects to be injected may vary at runtime or"
msgstr "o tipo concreto dos objetos a serem injetados pode variar em tempo de execução ou"

#. Tag: para
#: producermethods.xml:26
#, no-c-format
msgid "the objects require some custom initialization that is not performed by the Web Bean constructor"
msgstr "os objetos requerem alguma inicialização personalizada que não é realizada pelo construtor do Web Bean"

#. Tag: para
#: producermethods.xml:33
#, no-c-format
msgid "For example, producer methods let us:"
msgstr "Por exemplo, métodos produtores permitem:"

#. Tag: para
#: producermethods.xml:37
#, no-c-format
msgid "expose a JPA entity as a Web Bean,"
msgstr "expor uma entidade JPA como um Web Bean,"

#. Tag: para
#: producermethods.xml:40
#, no-c-format
msgid "expose any JDK class as a Web Bean,"
msgstr "expor qualquer classe do JDK como um Web Bean,"

#. Tag: para
#: producermethods.xml:43
#, no-c-format
msgid "define multiple Web Beans, with different scopes or initialization, for the same implementation class, or"
msgstr "definir vários Web Beans, com diferentes escopos ou inicialização, para a mesma implementação da classe, ou"

#. Tag: para
#: producermethods.xml:47
#, no-c-format
msgid "vary the implementation of an API type at runtime."
msgstr "variar a implementação de um tipo da API em tempo de execução."

#. Tag: para
#: producermethods.xml:51
#, no-c-format
msgid "In particular, producer methods let us use runtime polymorphism with Web Beans. As we've seen, deployment types are a powerful solution to the problem of deployment-time polymorphism. But once the system is deployed, the Web Bean implementation is fixed. A producer method has no such limitation:"
msgstr "Em particular, métodos produtores permite-nos utilizar o polimorfismo em tempo de execução com Web Beans. Como vimos, os tipo de implantação são uma poderosa solução para o problema do polimorfismo em tempo de implantação. Mas, uma vez que o sistema está implantado, a implementação do Web Bean é fixada. Um método produtor não tem essa limitação:"

#. Tag: programlisting
#: producermethods.xml:56
#, no-c-format
msgid ""
"<![CDATA[@SessionScoped\n"
"public class Preferences {\n"
"    \n"
"    private PaymentStrategyType paymentStrategy;\n"
"    \n"
"    ...\n"
"    \n"
"    @Produces @Preferred \n"
"    public PaymentStrategy getPaymentStrategy() {\n"
"        switch (paymentStrategy) {\n"
"            case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
"            case CHEQUE: return new ChequePaymentStrategy();\n"
"            case PAYPAL: return new PayPalPaymentStrategy();\n"
"            default: return null;\n"
"        } \n"
"    }\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[@SessionScoped\n"
"public class Preferences {\n"
"    \n"
"    private PaymentStrategyType paymentStrategy;\n"
"    \n"
"    ...\n"
"    \n"
"    @Produces @Preferred \n"
"    public PaymentStrategy getPaymentStrategy() {\n"
"        switch (paymentStrategy) {\n"
"            case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
"            case CHEQUE: return new ChequePaymentStrategy();\n"
"            case PAYPAL: return new PayPalPaymentStrategy();\n"
"            default: return null;\n"
"        } \n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#: producermethods.xml:58
#, no-c-format
msgid "Consider an injection point:"
msgstr "Considere o ponto de injeção:"

#. Tag: programlisting
#: producermethods.xml:60
#, no-c-format
msgid "<![CDATA[@Preferred PaymentStrategy paymentStrat;]]>"
msgstr "<![CDATA[@Preferred PaymentStrategy paymentStrat;]]>"

#. Tag: para
#: producermethods.xml:62
#, no-c-format
msgid "This injection point has the same type and binding annotations as the producer method, so it resolves to the producer method using the usual Web Beans injection rules. The producer method will be called by the Web Bean manager to obtain an instance to service this injection point."
msgstr "Esse ponto de injeção tem o mesmo tipo e anotações de binding que o método produtor. Assim, resolve para o método produtor utilizando as regras de injeção da Web Beans. O método produtor será invocado pelo gerenciador do Bean Web para obter uma instância para servir esse ponto de injeção."

#. Tag: chapter
#: producermethods.xml:65
#, no-c-format
msgid "<chapter>.</chapter>"
msgstr "<chapter>.</chapter>"

#. Tag: title
#: producermethods.xml:68
#, no-c-format
msgid "Scope of a producer method"
msgstr "Escopo de um método produtor"

#. Tag: para
#: producermethods.xml:70
#, no-c-format
msgid "The scope of the producer method defaults to <literal>@Dependent</literal>, and so it will be called <emphasis>every time</emphasis> the Web Bean manager injects this field or any other field that resolves to the same producer method. Thus, there could be multiple instances of the <literal>PaymentStrategy</literal> object for each user session."
msgstr "O escopo padrão dos métodos produtores é <literal>@Dependent</literal>, e, por isso ,serão chamados <emphasis>toda vez</emphasis> que o gerenciador do Web Bean injetar esse atributo ou qualquer outro atributo que resolve para o mesmo método produtor. Assim, pode haver várias instâncias do objeto <literal>PaymentStrategy</literal> para cada sessão do usuário."

#. Tag: para
#: producermethods.xml:75
#, no-c-format
msgid "To change this behavior, we can add a <literal>@SessionScoped</literal> annotation to the method."
msgstr "Para mudar esse comportamento, nós podemos adicionar a anotação <literal>@SessionScoped</literal> ao método."

#. Tag: programlisting
#: producermethods.xml:78
#, no-c-format
msgid ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy() {\n"
"    ...\n"
"}]]>"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy() {\n"
"    ...\n"
"}]]>"

#. Tag: para
#: producermethods.xml:80
#, no-c-format
msgid "Now, when the producer method is called, the returned <literal>PaymentStrategy</literal> will be bound to the session context. The producer method won't be called again in the same session."
msgstr "Agora, quando o método produtor é chamado, o <literal>PaymentStrategy</literal> retornado será associado ao contexto sessão. O método produtor não será invocado novamente na mesma sessão."

#. Tag: title
#: producermethods.xml:87
#, no-c-format
msgid "Injection into producer methods"
msgstr "Injeção em métodos produtores"

#. Tag: para
#: producermethods.xml:89
#, no-c-format
msgid "There's one potential problem with the code above. The implementations of <literal>CreditCardPaymentStrategy</literal> are instantiated using the Java <literal>new</literal> operator. Objects instantiated directly by the application can't take advantage of dependency injection and don't have interceptors."
msgstr "Existe um problema potencial com o código acima. As implementações de <literal>CreditCardPaymentStrategy</literal> são instanciadas utilizando o operador de Java <literal>new</literal>. Objetos instanciados diretamente pela aplicação não usufruem da injeção de dependência e não possuem interceptadores."

#. Tag: para
#: producermethods.xml:94
#, no-c-format
msgid "If this isn't what we want we can use dependency injection into the producer method to obtain Web Bean instances:"
msgstr "Se  não é isso  o que queremos, podemos utilizar a injeção de dependência no método produtor para obter instâncias do Web Bean:"

#. Tag: programlisting
#: producermethods.xml:97
#, no-c-format
msgid ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy ccps,\n"
"                                          ChequePaymentStrategy cps,\n"
"                                          PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy ccps,\n"
"                                          ChequePaymentStrategy cps,\n"
"                                          PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"

#. Tag: para
#: producermethods.xml:99
#, no-c-format
msgid "Wait, what if <literal>CreditCardPaymentStrategy</literal> is a request scoped Web Bean? Then the producer method has the effect of \"promoting\" the current request scoped instance into session scope. This is almost certainly a bug! The request scoped object will be destroyed by the Web Bean manager before the session ends, but the reference to the object will be left \"hanging\" in the session scope. This error will <emphasis>not</emphasis> be detected by the Web Bean manager, so please take extra care when returning Web Bean instances from producer methods!"
msgstr "Espere, o que se <literal>CreditCardPaymentStrategy</literal> é um Web Bean de escopo de requisição? Então o método produtor tem o efeito de \"promover\" a instância atual no escopo de requisição para o escopo de sessão. Isso certamente é um erro! O objeto no escopo de requisição será destruído pelo gerenciador do Web Bean antes de terminar a sessão, mas a referência ao objeto será deixada \"presa\" no escopo sessão. Esse erro <emphasis>não</emphasis> será detectado pelo gerenciador do Web Bean. Por isso, tome cuidado quando retornar instâncias de Web Bean em métodos produtores!"

#. Tag: para
#: producermethods.xml:107
#, no-c-format
msgid "There's at least three ways we could go about fixing this bug. We could change the scope of the <literal>CreditCardPaymentStrategy</literal> implementation, but this would affect other clients of that Web Bean. A better option would be to change the scope of the producer method to <literal>@Dependent</literal> or <literal>@RequestScoped</literal>."
msgstr "Existem pelo menos três maneiras de corrigirmos esse erro. Podemos alterar o escopo da implementação do <literal>CreditCardPaymentStrategy</literal>, mas isso poderia afetar outros clientes desse Web Bean. A mehor opção seria alterar o escopo do médoto produtor para <literal>@Dependent</literal> ou <literal>@RequestScoped</literal>."

#. Tag: para
#: producermethods.xml:113
#, no-c-format
msgid "But a more common solution is to use the special <literal>@New</literal> binding annotation."
msgstr "Mas, uma solução mais comum é utilizar a anotação especial de binding <literal>@New</literal>"

#. Tag: title
#: producermethods.xml:119
#, no-c-format
msgid "Use of <literal>@New</literal> with producer methods"
msgstr "Uso do <literal>@New</literal> em métodos produtores"

#. Tag: para
#: producermethods.xml:121
#, no-c-format
msgid "Consider the following producer method:"
msgstr "Considere o seguinte método produtor:"

#. Tag: programlisting
#: producermethods.xml:123
#, no-c-format
msgid ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(@New CreditCardPaymentStrategy ccps,\n"
"                                          @New ChequePaymentStrategy cps,\n"
"                                          @New PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(@New CreditCardPaymentStrategy ccps,\n"
"                                          @New ChequePaymentStrategy cps,\n"
"                                          @New PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"

#. Tag: para
#: producermethods.xml:125
#, no-c-format
msgid "Then a new <emphasis>dependent</emphasis> instance of <literal>CreditCardPaymentStrategy</literal> will be created, passed to the producer method, returned by the producer method and finally bound to the session context. The dependent object won't be destroyed until the <literal>Preferences</literal> object is destroyed, at the end of the session."
msgstr "Assim a nova instância <emphasis>dependente</emphasis> de <literal>CreditCardPaymentStrategy</literal> será criada, passada para o método produtor, retornada pelo método produtor e, finalmente, associada ao contexto de sessão. O objeto dependente não será destruído até que o objeto <literal>Preferences</literal> seja destruído, no término da sessão."

