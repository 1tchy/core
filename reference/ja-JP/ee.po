# Language ja-JP translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-12-20 22:08+0000\n"
"PO-Revision-Date: 2009-04-19 01:59+0900\n"
"Last-Translator: wadahiro <wadahiro@gmail.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Poedit-Bookmarks: -1,7,-1,-1,-1,-1,-1,-1,-1,-1\n"

#. Tag: title
#: ee.xml:4
#, no-c-format
msgid "Java EE integration"
msgstr "Java EEへの統合"

#. Tag: para
#: ee.xml:6
#, no-c-format
msgid "Web Beans is fully integrated into the Java EE environment. Web Beans have access to Java EE resources and JPA persistence contexts. They may be used in Unified EL expressions in JSF and JSP pages. They may even be injected into some objects, such as Servlets and Message-Driven Beans, which are not Web Beans."
msgstr "Web BeansはJava EE 環境と完全に統合されます。Web Beansは、Java EEリソースとJPAの永続コンテキストに自由にアクセスできます。それらはJSFとJSPページ中のUnifed ELで使用されるかもしれません。それらはWeb Beansではない、サーブレットやメッセージ駆動型Beanなどのオブジェクトにインジェクトされるかもしれません。"

#. Tag: title
#: ee.xml:12
#, no-c-format
msgid "Injecting Java EE resources into a Web Bean"
msgstr "Java EEリソースをWeb Beansにインジェクトする"

#. Tag: para
#: ee.xml:14
#, no-c-format
msgid "All simple and enterprise Web Beans may take advantage of Java EE dependency injection using <literal>@Resource</literal>, <literal>@EJB</literal> and <literal>@PersistenceContext</literal>. We've already seen a couple of examples of this, though we didn't pay much attention at the time:"
msgstr "すべてのシンプル、エンタープライズ Web Beansは、<literal>@Resource</literal>、<literal>@EJB</literal>、および<literal>@PersistenceContext</literal>を使用することでJava EEの依存性注入を利用できます。ここまでは注意を払いませんでしたが、既にいくつかの例を見てきました。"

#. Tag: programlisting
#: ee.xml:19
#, no-c-format
msgid ""
"<![CDATA[@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"\n"
"    @Resource Transaction transaction;\n"
"\n"
"    @AroundInvoke public Object manageTransaction(InvocationContext ctx) { ... }\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"\n"
"    @Resource Transaction transaction;\n"
"\n"
"    @AroundInvoke public Object manageTransaction(InvocationContext ctx) { ... }\n"
"    \n"
"}]]>"

#. Tag: programlisting
#: ee.xml:21
#, no-c-format
msgid ""
"<![CDATA[@SessionScoped\n"
"public class Login {\n"
"\n"
"    @Current Credentials credentials;\n"
"    @PersistenceContext EntityManager userDatabase;\n"
"    \n"
"    ...\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[@SessionScoped\n"
"public class Login {\n"
"\n"
"    @Current Credentials credentials;\n"
"    @PersistenceContext EntityManager userDatabase;\n"
"    \n"
"    ...\n"
"\n"
"}]]>"

#. Tag: para
#: ee.xml:23
#, no-c-format
msgid "The Java EE <literal>@PostConstruct</literal> and <literal>@PreDestroy</literal> callbacks are also supported for all simple and enterprise Web Beans. The <literal>@PostConstruct</literal> method is called after <emphasis>all</emphasis> injection has been performed."
msgstr "Java EEの<literal>@PostConstruct</literal>と<literal>@PreDestroy</literal>によるコールバックは、すべのシンプル、エンタープライズ Web Beansでサポートされます。 <emphasis>すべて</emphasis> のインジェクションが実行された後に、<literal>@PostConstruct</literal>のメソッドは呼ばれます。"

#. Tag: para
#: ee.xml:28
#, no-c-format
msgid "There is one restriction to be aware of here: <literal>@PersistenceContext(type=EXTENDED)</literal> is not supported for simple Web Beans."
msgstr "ここで注意すべき制限が一つあります。<literal>@PersistenceContext(type=EXTENDED)</literal>はシンプルWeb Beansではサポートされません。"

#. Tag: title
#: ee.xml:35
#, no-c-format
msgid "Calling a Web Bean from a Servlet"
msgstr "サーブレットからWeb Beanを呼び出す"

#. Tag: para
#: ee.xml:37
#, no-c-format
msgid "It's easy to use a Web Bean from a Servlet in Java EE 6. Simply inject the Web Bean using Web Beans field or initializer method injection."
msgstr "Java EE 6でサーブレットからWeb Beanを使用することは簡単です。フィールドか初期化メソッドによるインジェクションを使用して、Web Beansをインジェクトしてください。"

#. Tag: programlisting
#: ee.xml:40
#, no-c-format
msgid ""
"public class Login extends HttpServlet {\n"
"\n"
"    @Current Credentials credentials;\n"
"    @Current Login login;\n"
"\n"
"    @Override\n"
"    public void service(HttpServletRequest request, HttpServletResponse response)\n"
"        throws ServletException, IOException {\n"
"        credentials.setUsername( request.getAttribute(\"username\") ):\n"
"        credentials.setPassword( request.getAttribute(\"password\") ):\n"
"        login.login();\n"
"        if ( login.isLoggedIn() ) {\n"
"            response.sendRedirect(\"/home.jsp\");\n"
"        }\n"
"        else {\n"
"            response.sendRedirect(\"/loginError.jsp\");\n"
"        }\n"
"    }\n"
"            \n"
"}"
msgstr ""
"public class Login extends HttpServlet {\n"
"\n"
"    @Current Credentials credentials;\n"
"    @Current Login login;\n"
"\n"
"    @Override\n"
"    public void service(HttpServletRequest request, HttpServletResponse response)\n"
"        throws ServletException, IOException {\n"
"        credentials.setUsername( request.getAttribute(\"username\") ):\n"
"        credentials.setPassword( request.getAttribute(\"password\") ):\n"
"        login.login();\n"
"        if ( login.isLoggedIn() ) {\n"
"            response.sendRedirect(\"/home.jsp\");\n"
"        }\n"
"        else {\n"
"            response.sendRedirect(\"/loginError.jsp\");\n"
"        }\n"
"    }\n"
"            \n"
"}"

#. Tag: para
#: ee.xml:42
#, no-c-format
msgid "The Web Beans client proxy takes care of routing method invocations from the Servlet to the correct instances of <literal>Credentials</literal> and <literal>Login</literal> for the current request and HTTP session."
msgstr "Web Beansのクライアントプロキシは、現在のリクエストとHTTPセッションの間、サーブレットから正しい<literal>Credentials</literal>と<literal>Login</literal>インスタンスへの呼び出しを引き受けます。"

#. Tag: title
#: ee.xml:49
#, no-c-format
msgid "Calling a Web Bean from a Message-Driven Bean"
msgstr "Web Beanからメッセージ駆動型Beanを呼び出す"

#. Tag: para
#: ee.xml:51
#, no-c-format
msgid "Web Beans injection applies to all EJBs, even when they aren't under the control of the Web Bean manager (if they were obtained by direct JNDI lookup, or injection using <literal>@EJB</literal>, for example. In particular, you can use Web Beans injection in Message-Driven Beans, which are not considered Web Beans because you can't inject them."
msgstr "Web BeansのインジェクションはすべてのEJBに適用されます。EJBがWeb Beanマネージャの管理下にない場合でさえもです(たとえば、直接のJNDIルックアップ、または<literal>@EJB</literal>を使用したインジェクションで得た場合)。特に、メッセージ駆動型Bean(インジェクトできないため、Web Beansであることは考えられていないもの)でWeb Beansのインジェクションを使用できます。"

#. Tag: para
#: ee.xml:57
#, no-c-format
msgid "You can even use Web Beans interceptor bindings for Message-Driven Beans."
msgstr "メッセージ駆動型BeanにWeb Beansのインタセプタを使用することさえできます。"

#. Tag: programlisting
#: ee.xml:59
#, no-c-format
msgid ""
"@Transactional @MessageDriven\n"
"public class ProcessOrder implements MessageListener {\n"
"\n"
"    @Current Inventory inventory;\n"
"    @PersistenceContext EntityManager em;\n"
"\n"
"    public void onMessage(Message message) {\n"
"        ...\n"
"    }\n"
"            \n"
"}"
msgstr ""
"@Transactional @MessageDriven\n"
"public class ProcessOrder implements MessageListener {\n"
"\n"
"    @Current Inventory inventory;\n"
"    @PersistenceContext EntityManager em;\n"
"\n"
"    public void onMessage(Message message) {\n"
"        ...\n"
"    }\n"
"            \n"
"}"

#. Tag: para
#: ee.xml:61
#, no-c-format
msgid "Thus, receiving messages is super-easy in a Web Beans environment. But beware that there is no session or conversation context available when a message is delivered to a Message-Driven Bean. Only <literal>@RequestScoped</literal> and <literal>@ApplicationScoped</literal> Web Beans are available."
msgstr "このように、メッセージを受け取ることはWeb Beans環境ではとても簡単です。しかし、メッセージがメッセージ駆動型Beanに配信されるときに、利用可能なセッションコンテキストも対話コンテキストも存在しないことに注意してください。<literal>@RequestScoped</literal>と<literal>@ApplicationScoped</literal>のWeb Beansだけが利用可能です。"

#. Tag: para
#: ee.xml:66
#, no-c-format
msgid "It's also easy to send messages using Web Beans."
msgstr "また、Web Beansを使用してメッセージを送ることも簡単です。"

#. Tag: title
#: ee.xml:71
#, no-c-format
msgid "JMS endpoints"
msgstr "JMSエンドポイント"

#. Tag: para
#: ee.xml:73
#, no-c-format
msgid "Sending messages using JMS can be quite complex, because of the number of different objects you need to deal with. For queues we have <literal>Queue</literal>, <literal>QueueConnectionFactory</literal>, <literal>QueueConnection</literal>, <literal>QueueSession</literal> and <literal>QueueSender</literal>. For topics we have <literal>Topic</literal>, <literal>TopicConnectionFactory</literal>, <literal>TopicConnection</literal>, <literal>TopicSession</literal> and <literal>TopicPublisher</literal>. Each of these objects has its own lifecycle and threading model that we need to worry about."
msgstr "扱う必要のある異なるオブジェクトの数により、JMSを使用してメッセージを送ることはかなり複雑な場合があります。キューのために、<literal>Queue</literal>, <literal>QueueConnectionFactory</literal>、<literal>QueueConnection</literal>および<literal>QueueSession</literal>と<literal>QueueSender</literal>があります。トピックのために、<literal>Topic</literal>、<literal>TopicConnectionFactory</literal>、<literal>TopicConnection</literal>、<literal>TopicSession</literal>および<literal>TopicPublisher</literal>があります。これらのオブジェクトには、自身のライフサイクルとスレッドモデルがあり、私たちは気遣う必要があります。"

#. Tag: para
#: ee.xml:82
#, no-c-format
msgid "Web Beans takes care of all this for us. All we need to do is declare the queue or topic in <literal>web-beans.xml</literal>, specifying an associated binding type and connection factory."
msgstr "Web Beansはこのすべてを引き受けてくれます。関連したバインディングタイプとコネクションファクトリを指定し、<literal>web-beans.xml</literal>にキューかトピックを宣言するだけで良いのです。"

#. Tag: programlisting
#: ee.xml:86
#, no-c-format
msgid ""
"<![CDATA[<Queue>\n"
"    <destination>java:comp/env/jms/OrderQueue</destination>\n"
"    <connectionFactory>java:comp/env/jms/QueueConnectionFactory</connectionFactory>\n"
"    <myapp:OrderProcessor/>    \n"
"</Queue>]]>"
msgstr ""
"<![CDATA[<Queue>\n"
"    <destination>java:comp/env/jms/OrderQueue</destination>\n"
"    <connectionFactory>java:comp/env/jms/QueueConnectionFactory</connectionFactory>\n"
"    <myapp:OrderProcessor/>    \n"
"</Queue>]]>"

#. Tag: programlisting
#: ee.xml:88
#, no-c-format
msgid ""
"<![CDATA[<Topic>\n"
"    <destination>java:comp/env/jms/StockPrices</destination>\n"
"    <connectionFactory>java:comp/env/jms/TopicConnectionFactory</connectionFactory>\n"
"    <myapp:StockPrices/>    \n"
"</Topic>]]>"
msgstr ""
"<![CDATA[<Topic>\n"
"    <destination>java:comp/env/jms/StockPrices</destination>\n"
"    <connectionFactory>java:comp/env/jms/TopicConnectionFactory</connectionFactory>\n"
"    <myapp:StockPrices/>    \n"
"</Topic>]]>"

#. Tag: para
#: ee.xml:90
#, no-c-format
msgid "Now we can just inject the <literal>Queue</literal>, <literal>QueueConnection</literal>, <literal>QueueSession</literal> or <literal>QueueSender</literal> for a queue, or the <literal>Topic</literal>, <literal>TopicConnection</literal>, <literal>TopicSession</literal> or <literal>TopicPublisher</literal> for a topic."
msgstr "これで、キューのために<literal>Queue</literal>、<literal>QueueConnection</literal>、<literal>QueueSession</literal>または<literal>QueueSender</literal>をインジェクトできます。または、トピックのために<literal>Topic</literal>、<literal>TopicConnection</literal>、<literal>TopicSession</literal>または<literal>TopicPublisher</literal>をインジェクトできます。"

#. Tag: programlisting
#: ee.xml:96
#, no-c-format
msgid ""
"@OrderProcessor QueueSender orderSender;\n"
"@OrderProcessor QueueSession orderSession;\n"
"\n"
"public void sendMessage() {\n"
"    MapMessage msg = orderSession.createMapMessage();\n"
"    ...\n"
"    orderSender.send(msg);\n"
"}"
msgstr ""
"@OrderProcessor QueueSender orderSender;\n"
"@OrderProcessor QueueSession orderSession;\n"
"\n"
"public void sendMessage() {\n"
"    MapMessage msg = orderSession.createMapMessage();\n"
"    ...\n"
"    orderSender.send(msg);\n"
"}"

#. Tag: programlisting
#: ee.xml:98
#, no-c-format
msgid ""
"@StockPrices TopicPublisher pricePublisher;\n"
"@StockPrices TopicSession priceSession;\n"
"\n"
"public void sendMessage(String price) {\n"
"    pricePublisher.send( priceSession.createTextMessage(price) );\n"
"}"
msgstr ""
"@StockPrices TopicPublisher pricePublisher;\n"
"@StockPrices TopicSession priceSession;\n"
"\n"
"public void sendMessage(String price) {\n"
"    pricePublisher.send( priceSession.createTextMessage(price) );\n"
"}"

#. Tag: para
#: ee.xml:100
#, no-c-format
msgid "The lifecycle of the injected JMS objects is completely controlled by the Web Bean manager."
msgstr "インジェクトされたJMSオブジェクトのライフサイクルは、Web Beanマネージャによって完全に制御されます。"

#. Tag: title
#: ee.xml:106
#, no-c-format
msgid "Packaging and deployment"
msgstr "パッケージとデプロイ"

#. Tag: para
#: ee.xml:108
#, no-c-format
msgid "Web Beans doesn't define any special deployment archive. You can package Web Beans in JARs, EJB-JARs or WARs &#151; any deployment location in the application classpath. However, each archive that contains Web Beans must include a file named <literal>web-beans.xml</literal> in the <literal>META-INF</literal> or <literal>WEB-INF</literal> directory. The file may be empty. Web Beans deployed in archives that do not have a <literal>web-beans.xml</literal> file will not be available for use in the application."
msgstr "Web Beansはどのような特別なデプロイのアーカイブも定義しません。アプリケーションのクラスパスにおいてデプロイの場所である、JAR、EJB-JARまたはWARの中にWeb Beansをパッケージできます。しかしながら、Web Beansを含む各アーカイブは、<literal>META-INF</literal>か<literal>WEB-INF</literal>ディレクトリに<literal>web-beans.xml</literal>というファイルを含む必要があります。そのファイルは空でもよいです。<literal>web-beans.xml</literal>ファイルを持たないアーカイブでデプロイされたWeb Beansは、アプリケーションで利用できないでしょう。"

#. Tag: para
#: ee.xml:116
#, no-c-format
msgid "For Java SE execution, Web Beans may be deployed in any location in which EJBs may be deployed for execution by the embeddable EJB Lite container. Again, each location must contain a <literal>web-beans.xml</literal> file."
msgstr "Java SEでの実行においては、Web Beansはどのような場所でもデプロイされるでしょう。また、EJBは実行のために組み込み軽量EJBコンテナによってデプロイされるかもしれません。繰り返しますが、デプロイ場所では<literal>web-beans.xml</literal>ファイルを含む必要があります。"

