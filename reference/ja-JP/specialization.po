# Language ja-JP translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-01-04 23:18+0000\n"
"PO-Revision-Date: 2009-06-09 19:23+0900\n"
"Last-Translator: Keita Higashi <winnie_the_pooh@y3.dion.ne.jp>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: specialization.xml:4
#, no-c-format
msgid "Specialization"
msgstr "特殊化"

#. Tag: para
#: specialization.xml:6
#, no-c-format
msgid "We've already seen how the Web Beans dependency injection model lets us <emphasis>override</emphasis> the implementation of an API at deployment time. For example, the following enterprise Web Bean provides an implementation of the API <literal>PaymentProcessor</literal> in production:"
msgstr "Web Beans 依存性注入モデルがどんな状態デプロイメントタイムで API のインプリメントに <emphasis>オーバーライド</emphasis> させるかについて、すでに説明しました。たとえば、以下のエンタープライズ Web Bean は、プロダクションにおいて API <literal>PaymentProcessor</literal> の実装を提供します。"

#. Tag: programlisting
#: specialization.xml:11
#, no-c-format
msgid ""
"@CreditCard @Stateless\n"
"public class CreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"
msgstr ""
"@CreditCard @Stateless\n"
"public class CreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#: specialization.xml:13
#, no-c-format
msgid "But in our staging environment, we override that implementation of <literal>PaymentProcessor</literal> with a different Web Bean:"
msgstr "しかし、ステージング環境で、異なる Web Bean で <literal>PaymentProcessor</literal> のその実装にオーバーライドします。"

#. Tag: programlisting
#: specialization.xml:16
#, no-c-format
msgid ""
"@CreditCard @Stateless @Staging\n"
"public class StagingCreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"
msgstr ""
"@CreditCard @Stateless @Staging\n"
"public class StagingCreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#: specialization.xml:18
#, no-c-format
msgid "What we've tried to do with <literal>StagingCreditCardPaymentProcessor</literal> is to completely replace <literal>AsyncPaymentProcessor</literal> in a particular deployment of the system. In that deployment, the deployment type <literal>@Staging</literal> would have a higher priority than the default deployment type <literal>@Production</literal>, and therefore clients with the following injection point:"
msgstr "<literal>StagingCreditCardPaymentProcessor</literal> でしようとしたことは、システムの特定のデプロイメントにおいて完全に <literal>AsyncPaymentProcessor</literal> を取り替えることです。そのデプロイメントで、デプロイメントタイプ <literal>@Staging</literal> はデフォルトデプロイメントタイプ <literal>@Production</literal> より高いプライオリティを持ちます、したがって、以下の依存性注入によるクライアントを指し示します。"

#. Tag: programlisting
#: specialization.xml:24
#, no-c-format
msgid "@CreditCard PaymentProcessor ccpp"
msgstr "@CreditCard PaymentProcessor ccpp"

#. Tag: para
#: specialization.xml:26
#, no-c-format
msgid "Would receive an instance of <literal>StagingCreditCardPaymentProcessor</literal>."
msgstr "これには <literal>StagingCreditCardPaymentProcessor</literal> のインスタンスが設定されます。"

#. Tag: para
#: specialization.xml:28
#, no-c-format
msgid "Unfortunately, there are several traps we can easily fall into:"
msgstr "残念なことに、簡単に落ちることができるいくつかの罠が、あります。"

#. Tag: para
#: specialization.xml:32
#, no-c-format
msgid "the higher-priority Web Bean may not implement all the API types of the Web Bean that it attempts to override,"
msgstr "より高いプライオリティの Web Bean が、それがオーバーライドしようとする Web Bean のすべての API 型を実行することがありえるというわけではありません"

#. Tag: para
#: specialization.xml:36
#, no-c-format
msgid "the higher-priority Web Bean may not declare all the binding types of the Web Bean that it attempts to override,"
msgstr "より高いプライオリティの Web Bean が、それがオーバーライドしようとする Web Bean のすべてのバインディングタイプを宣言することがありえるというわけではありません"

#. Tag: para
#: specialization.xml:40
#, no-c-format
msgid "the higher-priority Web Bean might not have the same name as the Web Bean that it attempts to override, or"
msgstr "より高いプライオリティの Web Bean は、それがオーバーライドしようとする Web Bean と同じ名前を持たないかもしれません"

#. Tag: para
#: specialization.xml:44
#, no-c-format
msgid "the Web Bean that it attempts to override might declare a producer method, disposal method or observer method."
msgstr "それがオーバーライドしようとする Web Bean は、プロデューサメソッド、ディスポーザルメソッド、またはオブザーバメソッドを宣言するかもしれません"

#. Tag: para
#: specialization.xml:49
#, no-c-format
msgid "In each of these cases, the Web Bean that we tried to override could still be called at runtime. Therefore, overriding is somewhat prone to developer error."
msgstr "これらの各ケースで、オーバーライドしようとした Web Bean は、実行時に呼びだされる可能性があります。したがって、オーバーライドは開発時に間違いが発生しやすいと言えます。"

#. Tag: para
#: specialization.xml:52
#, no-c-format
msgid "Web Beans provides a special feature, called <emphasis>specialization</emphasis>, that helps the developer avoid these traps. Specialization looks a little esoteric at first, but it's easy to use in practice, and you'll really appreciate the extra security it provides."
msgstr "Web Beans は <emphasis>特殊化</emphasis> と呼ばれる独自の機能を提供します。 そして、それは開発者がこれらの罠を回避するのを助けます。特殊化は最初は少し難解に見えますが、それは実際には使いやすいものです。そして、あなたはそれが安全性を提供する事に本当に感謝する事でしょう。"

#. Tag: title
#: specialization.xml:58
#, no-c-format
msgid "Using specialization"
msgstr "特殊化を使用する"

#. Tag: para
#: specialization.xml:60
#, no-c-format
msgid "Specialization is a feature that is specific to simple and enterprise Web Beans. To make use of specialization, the higher-priority Web Bean must:"
msgstr "特殊化は、シンプルおよびエンタープライズ Web Beans に特有の特徴です。特殊化を利用するために、より高いプライオリティーの Web Bean は以下の条件を満たさなければなりません。"

#. Tag: para
#: specialization.xml:65
#, no-c-format
msgid "be a direct subclass of the Web Bean it overrides, and"
msgstr "それがオーバーライドする Web Bean の直接的なサブクラスです"

#. Tag: para
#: specialization.xml:68
#, no-c-format
msgid "be a simple Web Bean if the Web Bean it overrides is a simple Web Bean or an enterprise Web Bean if the Web Bean it overrides is an enterprise Web Bean, and"
msgstr "それがオーバーライドする Web Bean がエンタープライズ Web Bean であるならば、エンタープライズ Web Beanで、それがオーバーライドする Web Beans がシンプル Web Bean であるならば、シンプル Web Beanです"

#. Tag: para
#: specialization.xml:73
#, no-c-format
msgid "be annotated <literal>@Specializes</literal>."
msgstr "<literal>@Specializes</literal> アノテーションが付いています"

#. Tag: programlisting
#: specialization.xml:77
#, no-c-format
msgid ""
"@Stateless @Staging @Specializes\n"
"public class StagingCreditCardPaymentProcessor \n"
"        extends CreditCardPaymentProcessor {\n"
"    ...\n"
"}"
msgstr ""
"@Stateless @Staging @Specializes\n"
"public class StagingCreditCardPaymentProcessor \n"
"        extends CreditCardPaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#: specialization.xml:79
#, no-c-format
msgid "We say that the higher-priority Web Bean <emphasis>specializes</emphasis> its superclass."
msgstr "これは　Web Bean　がそのスーパークラスを <emphasis>特殊化</emphasis> すると言います。"

#. Tag: title
#: specialization.xml:85
#, no-c-format
msgid "Advantages of specialization"
msgstr "特殊化の長所"

#. Tag: para
#: specialization.xml:87
#, no-c-format
msgid "When specialization is used:"
msgstr "特殊化が使用されるとき"

#. Tag: para
#: specialization.xml:91
#, no-c-format
msgid "the binding types of the superclass are automatically inherited by the Web Bean annotated <literal>@Specializes</literal>, and"
msgstr "スーパークラスのバインディングタイプは、 Web Bean アノテーションを付けた <literal>@Specializes</literal> によって、自動的に継承されます"

#. Tag: para
#: specialization.xml:95
#, no-c-format
msgid "the Web Bean name of the superclass is automatically inherited by the Web Bean annotated <literal>@Specializes</literal>, and"
msgstr "スーパークラスの Web Bean 名は、 Web Bean アノテーションを付けた <literal>@Specializes</literal> によって自動的に継承されます"

#. Tag: para
#: specialization.xml:99
#, no-c-format
msgid "producer methods, disposal methods and observer methods declared by the superclass are called upon an instance of the Web Bean annotated <literal>@Specializes</literal>."
msgstr "スーパークラスによって宣言される プロデューサメソッド、ディスポーザルメソッド、またはオブザーバメソッドは、 Web Bean のアノテーションを付けた <literal>@Specializes</literal> のインスタンスに呼ばれます"

#. Tag: para
#: specialization.xml:105
#, no-c-format
msgid "In our example, the binding type <literal>@CreditCard</literal> of <literal>CreditCardPaymentProcessor</literal> is inherited by <literal>StagingCreditCardPaymentProcessor</literal>."
msgstr "例で、 <literal>CreditCardPaymentProcessor</literal> のバインディングタイプ <literal>@CreditCard</literal> は、 <literal>StagingCreditCardPaymentProcessor</literal> によって継承されます。"

#. Tag: para
#: specialization.xml:109
#, no-c-format
msgid "Furthermore, the Web Bean manager will validate that:"
msgstr "さらにまた、 Web Bean マネージャは、以下の妥当性を検査します。"

#. Tag: para
#: specialization.xml:113
#, no-c-format
msgid "all API types of the superclass are API types of the Web Bean annotated <literal>@Specializes</literal> (all local interfaces of the superclass enterprise bean are also local interfaces of the subclass),"
msgstr "スーパークラスのすべての API 型は、 Web Bean アノテーションを付けた <literal>@Specializes</literal> （スーパークラス・エンタープライズ  bean のすべてのローカルインターフェースは、サブクラスのローカルインターフェースでもあります）の API 型であること"

#. Tag: para
#: specialization.xml:119
#, no-c-format
msgid "the deployment type of the Web Bean annotated <literal>@Specializes</literal> has a higher precedence than the deployment type of the superclass, and"
msgstr "Web Bean アノテーションを付けた <literal>@Specializes</literal> のデプロイメントタイプは、スーパークラスのデプロイメントタイプより高い優先順位を持つこと"

#. Tag: para
#: specialization.xml:124
#, no-c-format
msgid "there is no other enabled Web Bean that also specializes the superclass."
msgstr "また、スーパークラスを特殊化する他のいかなる有効化された Web Bean も存在しないこと"

#. Tag: para
#: specialization.xml:129
#, no-c-format
msgid "If any of these conditions are violated, the Web Bean manager throws an exception at initialization time."
msgstr "これらの条件のいずれかが違反されるならば、 Web Bean マネージャは初期化時に例外をスローします。"

#. Tag: para
#: specialization.xml:132
#, no-c-format
msgid "Therefore, we can be certain that the superclass will <emphasis>never</emphasis> be called in any deployment of the system where the Web Bean annotated <literal>@Specializes</literal> is deployed and enabled."
msgstr "したがって、 <literal>@Specializes</literal> の付いた Web Bean がデプロイされ、有効化されると、スーパークラスがデプロイの間に <emphasis>決して</emphasis> 呼び出されないことは確かです。"

