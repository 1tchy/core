# Language ja-JP translations for Web_Beans:_Java_Contexts_and_Dependency_Injection package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: Web_Beans:_Java_Contexts_and_Dependency_Injection VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-04-19 20:36+0000\n"
"PO-Revision-Date: 2009-05-22 23:05+0900\n"
"Last-Translator: TANABE Junnichi <jun@lmns.biz>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: viewlayers.xml:4
#, no-c-format
msgid "Alternative view layers"
msgstr "代替ビューレイヤ"

#. Tag: title
#: viewlayers.xml:7
#, no-c-format
msgid "Using Web Beans with Wicket"
msgstr "Web BeansをWicketと使用する"

#. Tag: title
#: viewlayers.xml:10
#, no-c-format
msgid "The <literal>WebApplication</literal> class"
msgstr "<literal>WebApplication</literal>クラス"

#. Tag: para
#: viewlayers.xml:12
#, no-c-format
msgid "Each wicket application must have a <literal>WebApplication</literal> subclass; Web Beans provides, for your utility, a subclass of this which sets up the Wicket/JSR-299 integration. You should subclass <literal>org.jboss.webbeans.wicket.WebBeansApplication</literal>."
msgstr "各wicketアプリケーションは <literal>WebApplication</literal> サブクラスを保持しなければなりません。Web Beansではあなたの利便性の為に、Wicket/JSR-299統合を設定するためのサブクラスが提供されています。あなたは <literal>org.jboss.webbeans.wicket.WebBeansApplication</literal> のサブクラスを作るべきです。"

#. Tag: para
#: viewlayers.xml:21
#, no-c-format
msgid "If you would prefer not to subclass <literal>WebBeansApplication</literal>, you can manually add a (small!) number of overrides and listeners to your own <literal>WebApplication</literal> subclass. The javadocs of <literal>WebBeansApplication</literal>detail this."
msgstr "もしあなたが <literal>WebBeansApplication</literal> のサブクラスを作成するのを好まないのであれば、あなたは <literal>WebApplication</literal> サブクラスに対してマニュアルで少数のオーバーライドとリスナを追加することもできます。 <literal>WebBeansApplication</literal> のjavadocがこれに詳しく述べています。"

#. Tag: para
#: viewlayers.xml:30
#, no-c-format
msgid "For example:"
msgstr "例えば、"

#. Tag: programlisting
#: viewlayers.xml:33
#, no-c-format
msgid ""
"<![CDATA[public class SampleApplication extends WebBeansApplication {\n"
"   @Override\n"
"   public Class getHomePage() {\n"
"      return HomePage.class;\n"
"   }\n"
"}]]>"
msgstr ""
"<![CDATA[public class SampleApplication extends WebBeansApplication {\n"
"   @Override\n"
"   public Class getHomePage() {\n"
"      return HomePage.class;\n"
"   }\n"
"}]]>"

#. Tag: title
#: viewlayers.xml:37
#, no-c-format
msgid "Conversations with Wicket"
msgstr "Wicketを使った対話"

#. Tag: para
#: viewlayers.xml:38
#, no-c-format
msgid "The conversation scope can be used in Web Beans with the Apache Wicket web framework, through the <literal>webbeans-wicket</literal> module. This module takes care of:"
msgstr "対話スコープはApache Wicket webアプリケーションを用いたWeb Beansで <literal>webbeans-wicket</literal> を通して利用可能です。このモジュールでは以下の面倒を見てくれます。"

#. Tag: para
#: viewlayers.xml:45
#, no-c-format
msgid "Setting up the conversation context at the beginning of a Wicket request, and tearing it down afterwards"
msgstr "Wicketリクエストの開始時に対話コンテキストを設定し、その後それを破棄すること"

#. Tag: para
#: viewlayers.xml:51
#, no-c-format
msgid "Storing the id of any long-running conversation in Wicket's metadata when the page response is complete"
msgstr "ページレスポンスが完了されたときにWicketのメタデータに長期対話のIDを保存すること"

#. Tag: para
#: viewlayers.xml:57
#, no-c-format
msgid "Activating the correct long-running conversation based upon which page is being accessed"
msgstr "ページがアクセスされているときに正しい長期対話を活性化すること"

#. Tag: para
#: viewlayers.xml:63
#, no-c-format
msgid "Propagating the conversation context for any long-running conversation to new pages"
msgstr "対話コンテキストを新しいページへの長期対話に対して伝播すること"

#. Tag: title
#: viewlayers.xml:70
#, no-c-format
msgid "Starting and stopping conversations in Wicket"
msgstr "Wicketでの対話の開始と終了"

#. Tag: para
#: viewlayers.xml:71
#, no-c-format
msgid "As JSF applications, a conversation <emphasis>always</emphasis> exists for any request, but its lifetime is only that of the current request unless it is marked as <emphasis>long-running</emphasis>. For Wicket applications this is accomplished as in JSF applications, by injecting the <literal>@Current Conversation</literal> and then invoking <literal>conversation.begin()</literal>. Likewise, conversations are ended with <literal>conversation.end()</literal>"
msgstr "JSFアプリケーションとして、対話はリクエストごとに<emphasis>いつも</emphasis>存在するが、そのライフタイムは<emphasis>長期</emphasis>としてマークされない限りはそのリクエストの間だけになります。Wicketアプリケーションのために、これは <literal>@Current Conversation</literal> アノテーションをインジェクトし、 <literal>conversation.begin()</literal> を呼び出すことでJSPアプリケーションでの場合と同様に達成されます。同じように、対話は <literal>conversation.end()</literal> を用いて終了されます。"

#. Tag: title
#: viewlayers.xml:85
#, no-c-format
msgid "Long running conversation propagation in Wicket"
msgstr "Wicketでの長期対話の伝播"

#. Tag: para
#: viewlayers.xml:86
#, no-c-format
msgid "When a conversation is marked as long-running, the id of that conversation will be stored in Wicket's metadata for the current page. If a new page is created and set as the response target through <literal>setResponsePage</literal>, this new page will also participate in this conversation. This occurs for both directly instantiated pages (<literal>setResponsePage(new OtherPage())</literal>), as well as for bookmarkable pages created with <literal>setResponsePage(OtherPage.class)</literal> where <literal>OtherPage.class</literal> is mounted as bookmarkable from your <literal>WebApplication</literal> subclass (or through annotations). In the latter case, because the new page instance is not created until after a redirect, the conversation id will be propagated through a request parameter, and then stored in page metadata after the redirect."
msgstr "対話が長期としてマークされたとき、その対話のIDは今のページの為にWicketのメタデータに保存されます。新しいページが生成され <literal>setResponsePage</literal> を通してレスポンスターゲットとしてセットされたら、この新しいページも対話に参加することになるでしょう。これは直接インスタンス化されたページ(<literal>setResponsePage(new OtherPage())</literal>)の場合でも <literal>OtherPage.class</literal> があなたの <literal>WebApplication</literal> サブクラスから（あるいはアノテーションを通して）ブックマーク可能としてマウントされる <literal>setResponsePage(OtherPage.class)</literal> を使って生成されたブックマーク可能なページの場合でもなります。後者の場合、新しいページインスタンスはリダイレクトの後には生成されないので、対話のIDがリクエストパラメータを通して伝播され、そのリダイレクトの後にページメタデータに保存されることになります。"

