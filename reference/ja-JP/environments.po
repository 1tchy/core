# Language ja-JP translations for Web_Beans:_Java_Contexts_and_Dependency_Injection package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: Web_Beans:_Java_Contexts_and_Dependency_Injection "
"VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-11-11 15:00+0000\n"
"PO-Revision-Date: 2009-05-22 21:50+0900\n"
"Last-Translator: TANABE Junnichi <jun@lmns.biz>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: environments.xml:4
#, fuzzy, no-c-format
msgid "Application servers and environments supported by Weld"
msgstr "Web Beansによりサポートされるアプリケーションサーバーと環境"

#. Tag: title
#: environments.xml:7
#, fuzzy, no-c-format
msgid "Using Weld with JBoss AS"
msgstr "Web BeansをJBoss ASと使用する"

#. Tag: para
#: environments.xml:9
#, no-c-format
msgid ""
"If you are using JBoss AS 5.2, no additional configuration is required to "
"use Weld (or CDI for that matter). All you need to do is make your "
"application a bean bean archive by adding <literal>META-INF/beans.xml</"
"literal> to the classpath or <literal>WEB-INF/beans.xml</literal> to the web "
"root!"
msgstr ""

#. Tag: para
#: environments.xml:15
#, no-c-format
msgid ""
"Unfortunately, you can't use Weld with earlier versions of JBoss AS since "
"they are missing key libraries. If you want to learn how to upgrade the "
"built-in support on JBoss AS 5.2, then read on."
msgstr ""

#. Tag: para
#: environments.xml:20
#, no-c-format
msgid ""
"Upgrading the Weld add-on is easy. The Weld distribution has a build that "
"can take care of this task for you in a single command. First, we need to "
"tell Weld where JBoss AS is located. Create a new file named <literal>local."
"build.properties</literal> in the examples directory of the Weld "
"distribution and assign the path of your JBoss AS installation to the "
"property key <literal>jboss.home</literal>, as follows:"
msgstr ""

#. Tag: programlisting
#: environments.xml:27
#, fuzzy, no-c-format
msgid "<![CDATA[jboss.home=/path/to/jboss-as-5.x]]>"
msgstr "jboss.home=/Applications/jboss-5.0.1.GA"

#. Tag: para
#: environments.xml:29
#, no-c-format
msgid ""
"Now we can install the Weld deployer from the <literal>jboss-as</literal> "
"directory of the Weld distribution:"
msgstr ""

#. Tag: programlisting
#: environments.xml:33
#, fuzzy, no-c-format
msgid ""
"$> cd jboss-as\n"
"$> ant update"
msgstr ""
"$ cd webbeans-$VERSION/jboss-as\n"
"$ ant update"

#. Tag: para
#: environments.xml:36
#, fuzzy, no-c-format
msgid ""
"A new deployer, <literal>weld.deployer</literal> is added to JBoss AS. This "
"adds supports for JSR-299 deployments to JBoss AS, and allows Weld to query "
"the EJB 3 container and discover which EJBs are installed in your "
"application. It also performs an upgrade of the Javassist library, if "
"necessary."
msgstr ""
"新たなデプロイヤ <literal>webbeans.deployer</literal> がJBoss ASに追加されま"
"す。これはJBoss ASにJSR-299デプロイメントのためのサポートを追加するもので、こ"
"れのおかげでWeb BeansはEJB3コンテナに問合せして、EJBがあなたのアプリケーショ"
"ンのどこにインストールされてるかを探せるようになります。"

#. Tag: title
#: environments.xml:46
#, fuzzy, no-c-format
msgid "GlassFish"
msgstr "Glassfish"

#. Tag: para
#: environments.xml:48
#, no-c-format
msgid ""
"Weld is also built into GlassFish from V3 onwards. Since GlassFish V3 is the "
"Java EE 6 reference implementation, it must support all features of CDI. "
"What better way for GlassFish to support these features than to use Weld, "
"the JSR-299 reference implementation? Just package up your CDI application "
"and deploy."
msgstr ""

#. Tag: title
#: environments.xml:56
#, fuzzy, no-c-format
msgid "Servlet containers (such as Tomcat or Jetty)"
msgstr "(TomcatやJettyのような)サーブレットコンテナ"

#. Tag: para
#: environments.xml:58
#, fuzzy, no-c-format
msgid ""
"While JSR-299 does not require support for servlet environments, Weld can be "
"used in any servlet container, such as Tomcat 6.0 or Jetty 6.1."
msgstr ""
"Web BeansはTomcat 6.0やJetty 6.1のようなサーブレットコンテナでも利用すること"
"ができます。"

#. Tag: para
#: environments.xml:64
#, fuzzy, no-c-format
msgid ""
"There is a major limitation to using a servlet container. Weld doesn't "
"support deploying session beans, injection using <literal>@EJB</literal> or "
"<literal>@PersistenceContext</literal>, or using transactional events in "
"servlet containers. For enterprise features such as these, you should really "
"be looking at a Java EE application server."
msgstr ""
"Web BeansはサーブレットコンテナではセッションBean、 <literal>@EJB</literal> "
"アノテーションや <literal>@PersistenceContext</literal> アノテーションを使用"
"したり、トランザクションイベントを使用したインジェクションのデプロイをサポー"
"トしません。"

#. Tag: para
#: environments.xml:72
#, fuzzy, no-c-format
msgid ""
"Weld should be used as a web application library in a servlet container. You "
"should place <literal>weld-servlet.jar</literal> in <literal>WEB-INF/lib</"
"literal> in the web root. <literal>weld-servlet.jar</literal> is an \"uber-"
"jar\", meaning it bundles all the bits of Weld and CDI required for running "
"in a servlet container, provided for your convenience. Alternatively, you "
"could use its component jars:"
msgstr ""
"Web Beansはサーブレットコンテナの中でWebアプリケーションライブラリとして使わ"
"れるべきです。あなたがすべきことは、<literal>WEB-INF/lib</literal> 中に "
"<literal>webbeans-servlet.jar</literal> を置くことです。<literal>webbeans-"
"serv;et.jar</literal>（←TYPO！！！） はあなたの便利のために提供された\"スー"
"パーjar\"です。代わりに、あなたは以下のコンポーネントjarを使うことも出来ま"
"す。"

#. Tag: literal
#: environments.xml:84
#, no-c-format
msgid "jsr299-api.jar"
msgstr "jsr299-api.jar"

#. Tag: literal
#: environments.xml:89
#, fuzzy, no-c-format
msgid "weld-api.jar"
msgstr "webbeans-api.jar"

#. Tag: literal
#: environments.xml:94
#, fuzzy, no-c-format
msgid "weld-spi.jar"
msgstr "webbeans-spi.jar"

#. Tag: literal
#: environments.xml:99
#, fuzzy, no-c-format
msgid "weld-core.jar"
msgstr "webbeans-core.jar"

#. Tag: literal
#: environments.xml:104
#, fuzzy, no-c-format
msgid "weld-logging.jar"
msgstr "webbeans-logging.jar"

#. Tag: literal
#: environments.xml:109
#, fuzzy, no-c-format
msgid "weld-servlet-int.jar"
msgstr "webbeans-servlet-int.jar"

#. Tag: literal
#: environments.xml:114
#, no-c-format
msgid "javassist.jar"
msgstr "javassist.jar"

#. Tag: literal
#: environments.xml:119
#, no-c-format
msgid "dom4j.jar"
msgstr "dom4j.jar"

#. Tag: literal
#: environments.xml:124
#, no-c-format
msgid "google-collections.jar"
msgstr ""

#. Tag: para
#: environments.xml:129
#, fuzzy, no-c-format
msgid ""
"You also need to explicitly specify the servlet listener (used to boot Weld, "
"and control its interaction with requests) in <literal>WEB-INF/web.xml</"
"literal> in the web root:"
msgstr ""
"あなたは <literal>web.xml</literal> に(Web Beansをブートしてリクエストとの相"
"互作用の制御をするために使われる)サーブレットリスナを明示的に指定する必要もあ"
"ります。"

#. Tag: programlisting
#: environments.xml:134
#, fuzzy, no-c-format
msgid ""
"<![CDATA[<listener>\n"
"   <listener-class>org.jboss.weld.environment.servlet.Listener</listener-"
"class>\n"
"</listener>]]>"
msgstr ""
"<![CDATA[<listener>\n"
"   <listener-class>org.jboss.webbeans.environment.servlet.Listener</listener-"
"class>\n"
"</listener>]]>"

#. Tag: title
#: environments.xml:137
#, no-c-format
msgid "Tomcat"
msgstr "Tomcat"

#. Tag: para
#: environments.xml:139
#, fuzzy, no-c-format
msgid ""
"Tomcat has a read-only JNDI, so Weld can't automatically bind the "
"BeanManager extension SPI. To bind the BeanManager into JNDI, you should "
"populate <literal>META-INF/context.xml</literal> in the web root with the "
"following contents:"
msgstr ""
"Tomcatは読み取り専用のJNDIを持っていて、従ってWeb Beansは自動的にはマネージャ"
"をバインドすることができません。マネージャをJNDIにバインドするために、あなた"
"は <literal>META-INF/context.xml</literal> に以下を追加すべきです。"

#. Tag: programlisting
#: environments.xml:145
#, fuzzy, no-c-format
msgid ""
"<![CDATA[<Context>\n"
"   <Resource name=\"BeanManager\" \n"
"      auth=\"Container\"\n"
"      type=\"javax.enterprise.inject.spi.BeanManager\"\n"
"      factory=\"org.jboss.weld.resources.ManagerObjectFactory\"/>\n"
"</Context>]]>"
msgstr ""
"<![CDATA[<Resource name=\"app/Manager\" \n"
"          auth=\"Container\"\n"
"          type=\"javax.inject.manager.Manager\"\n"
"          factory=\"org.jboss.webbeans.resources.ManagerObjectFactory\"/>\n"
"]]>"

#. Tag: para
#: environments.xml:147
#, fuzzy, no-c-format
msgid ""
"and make it available to your deployment by adding this to the bottom of "
"<literal>web.xml</literal>:"
msgstr ""
"そして、 <literal>web.xml</literal> に以下を追加することにより、あなたのデプ"
"ロイメントは利用可能にします。"

#. Tag: programlisting
#: environments.xml:151
#, fuzzy, no-c-format
msgid ""
"<![CDATA[<resource-env-ref>\n"
"   <resource-env-ref-name>BeanManager</resource-env-ref-name>\n"
"   <resource-env-ref-type>\n"
"      javax.enterprise.inject.spi.BeanManager\n"
"   </resource-env-ref-type>\n"
"</resource-env-ref>]]>"
msgstr ""
"<![CDATA[<resource-env-ref>\n"
"  <resource-env-ref-name>\n"
"    app/Manager\n"
"  </resource-env-ref-name>\n"
"  <resource-env-ref-type>\n"
"    javax.inject.manager.Manager\n"
"  </resource-env-ref-type>\n"
"</resource-env-ref>]]>"

#. Tag: para
#: environments.xml:153
#, fuzzy, no-c-format
msgid ""
"Tomcat only allows you to bind entries to <literal>java:comp/env</literal>, "
"so the BeanManager will be available at <literal>java:comp/env/BeanManager</"
"literal>"
msgstr ""
"Tomcatは <literal>java:comp/env</literal> にエンティティをバインドすることだ"
"けを許可しますので、マネージャは <literal>java:comp/env/app/Manager</"
"literal> で利用できるでしょう。"

#. Tag: para
#: environments.xml:158
#, fuzzy, no-c-format
msgid ""
"Weld also supports Servlet injection in Tomcat. To enable this, place the "
"<literal>weld-tomcat-support.jar</literal> in <literal>$TOMCAT_HOME/lib</"
"literal>, and add the following to <literal>META-INF/context.xml</literal>:"
msgstr ""
"Web Beansは、Tomcatへのサーブレットインジェクションもサポートします。これを有"
"効化するために、 <literal>$TOMCAT_HOME/lib</literal> に <literal>webbeans-"
"tomcat-support.jar</literal> を置いて、 <literal>META-INF/context.xml</"
"literal> に下記を追加します。"

#. Tag: programlisting
#: environments.xml:164
#, fuzzy, no-c-format
msgid ""
"<![CDATA[<Listener className=\"org.jboss.weld.environment.tomcat."
"WeldLifecycleListener\"/>]]>"
msgstr ""
"<![CDATA[<Listener className=\"org.jboss.webbeans.environment.tomcat."
"WebBeansLifecycleListener\" />]]>"

#. Tag: title
#: environments.xml:169
#, no-c-format
msgid "Jetty"
msgstr ""

#. Tag: para
#: environments.xml:171
#, fuzzy, no-c-format
msgid ""
"Like Tomcat, Jetty has a read-only JNDI, so Weld can't automatically bind "
"the Manager. To bind the Manager to JNDI, you should populate <literal>WEB-"
"INF/jetty-env.xml</literal> with the following contents:"
msgstr ""
"Tomcatは読み取り専用のJNDIを持っていて、従ってWeb Beansは自動的にはマネージャ"
"をバインドすることができません。マネージャをJNDIにバインドするために、あなた"
"は <literal>META-INF/context.xml</literal> に以下を追加すべきです。"

#. Tag: programlisting
#: environments.xml:176
#, no-c-format
msgid ""
"<![CDATA[<!DOCTYPE Configure PUBLIC \"-//Mort Bay Consulting//DTD Configure//"
"EN\"\n"
"   \"http://jetty.mortbay.org/configure.dtd\">\n"
"<Configure id=\"webAppCtx\" class=\"org.mortbay.jetty.webapp.WebAppContext"
"\">\n"
"   <New id=\"BeanManager\" class=\"org.mortbay.jetty.plus.naming.Resource"
"\">\n"
"      <Arg><Ref id=\"webAppCtx\"/></Arg> \n"
"      <Arg>BeanManager</Arg>\n"
"      <Arg>\n"
"         <New class=\"javax.naming.Reference\">\n"
"            <Arg>javax.enterprise.inject.spi.BeanManager</Arg> \n"
"            <Arg>org.jboss.weld.resources.ManagerObjectFactory</Arg>\n"
"            <Arg/>\n"
"         </New>\n"
"      </Arg>\n"
"   </New>\n"
"</Configure>]]>"
msgstr ""

#. Tag: para
#: environments.xml:178
#, no-c-format
msgid ""
"Notice that Jetty doesn't not have built-in support for an <literal>javax."
"naming.spi.ObjectFactory</literal> like Tomcat, so it's necessary to "
"manually create the <literal>javax.naming.Reference</literal> to wrap around "
"it."
msgstr ""

#. Tag: para
#: environments.xml:184
#, fuzzy, no-c-format
msgid ""
"Jetty only allows you to bind entries to <literal>java:comp/env</literal>, "
"so the BeanManager will be available at <literal>java:comp/env/BeanManager</"
"literal>"
msgstr ""
"Tomcatは <literal>java:comp/env</literal> にエンティティをバインドすることだ"
"けを許可しますので、マネージャは <literal>java:comp/env/app/Manager</"
"literal> で利用できるでしょう。"

#. Tag: para
#: environments.xml:189
#, no-c-format
msgid "Weld does not currently support Servlet injection in Jetty."
msgstr ""

#. Tag: title
#: environments.xml:198
#, no-c-format
msgid "Java SE"
msgstr "Java SE"

#. Tag: para
#: environments.xml:200
#, fuzzy, no-c-format
msgid ""
"In addition to improved integration of the Enterprise Java stack, the "
"\"Contexts and Dependency Injection for the Java EE platform\" specification "
"also defines a state of the art typesafe, stateful dependency injection "
"framework, which can prove useful in a wide range of application types. To "
"help developers take advantage of this, Weld provides a simple means for "
"being executed in the Java Standard Edition (SE) environment independently "
"of any Java EE APIs."
msgstr ""
"エンタープライズJavaスタックの向上した統合から離れて、Web Beansは最先端のタイ"
"プセーフ、ステートフルな依存性注入フレームワークも提供します。これは広い範囲"
"のアプリケーションタイプ（エンタープライズでもそうでなくても）で有効です。こ"
"れを推進するために、Web BeansはどんなEnterprise Editionの機能であってもJava "
"Standard Edition環境でも独立して実行するためのシンプルな手段を提供します。"

#. Tag: para
#: environments.xml:208
#, fuzzy, no-c-format
msgid ""
"When executing in the SE environment the following features of Weld are "
"available:"
msgstr "SE環境で実行する場合、Web Beansの下記の機能が利用できます。"

#. Tag: literal
#: environments.xml:215
#, no-c-format
msgid "POJOs (no EJBs)"
msgstr ""

#. Tag: literal
#: environments.xml:220
#, no-c-format
msgid "Typesafe Dependency Injection"
msgstr "タイプセーフな依存性注入"

#. Tag: literal
#: environments.xml:225
#, no-c-format
msgid "Application and Dependent Contexts"
msgstr "アプリケーションコンテキストと依存コンテキスト"

#. Tag: literal
#: environments.xml:230
#, no-c-format
msgid "Qualifiers"
msgstr ""

#. Tag: literal
#: environments.xml:235
#, no-c-format
msgid "Stereotypes"
msgstr "ステレオタイプ"

#. Tag: literal
#: environments.xml:240
#, no-c-format
msgid "Typesafe Event Model"
msgstr "タイプセーフイベントモデル"

#. Tag: title
#: environments.xml:246
#, fuzzy, no-c-format
msgid "CDI SE Module"
msgstr "Web BeansのSEモジュール"

#. Tag: para
#: environments.xml:248
#, fuzzy, no-c-format
msgid ""
"Weld provides an extension which will boot a CDI bean manager in Java SE, "
"automatically registering all simple beans found on the classpath. "
"Application developers need not write any bootstrapping code. The entry "
"point for application code is a simple bean which observes the special "
"<literal>ContainerInitialized</literal> event provided by this extension. "
"The command line parameters can be injected using either of the following:"
msgstr ""
"開発者の負担軽減のために、Web BeansはWeb Beansマネージャを起動するメインメ"
"ソッドを持ち、自動的にクラスパスに見つかった全てのシンプルWeb Beansを登録する"
"特別なモジュールを提供します。これによりアプリケーション開発者はブートスト"
"ラップコードを記述する必要がなくなります。Web Beans SEアプリケーションに対す"
"るエントリポイントは通常の <literal>@Deployed Manager</literal> イベントを監"
"視するシンプルなWeb Beanです。そのコマンドラインパラメータは以下のいずれかを"
"使用することでインジェクトすることができます。"

#. Tag: programlisting
#: environments.xml:255
#, fuzzy, no-c-format
msgid ""
"<![CDATA[@Inject @Parameters List<String> params;\n"
"@Inject @Parameters String[] paramsArray; // useful for compatability with "
"existing classes]]>"
msgstr ""
"<![CDATA[@Parameters List<String> params;\n"
"@Parameters String[] paramsArray; // useful for compatability with existing "
"classes]]>"

#. Tag: para
#: environments.xml:257
#, fuzzy, no-c-format
msgid "Here's an example of a simple CDI SE application:"
msgstr "ここに簡単なWeb Beans SEアプリケーションのサンプルがあります。"

#. Tag: programlisting
#: environments.xml:261
#, fuzzy, no-c-format
msgid ""
"<![CDATA[@ApplicationScoped\n"
"public class HelloWorld\n"
"{\n"
"   @Inject @Parameters List<String> parameters;\n"
"\n"
"   public void printHello(@Observes ContainerInitialized event) {\n"
"       System.out.println(\"Hello \" + parameters.get(0));\n"
"   }\n"
"}]]>"
msgstr ""
"<![CDATA[@ApplicationScoped\n"
"public class HelloWorld\n"
"{\n"
"    @Parameters List<String> parameters;\n"
"\n"
"    public void printHello( @Observes @Deployed Manager manager )\n"
"    {\n"
"        System.out.println( \"Hello \" + parameters.get(0) );\n"
"    }\n"
"}]]>"

#. Tag: para
#: environments.xml:263
#, fuzzy, no-c-format
msgid ""
"CDI SE applications can be bootstrapped by running the StartMain class like "
"so:"
msgstr ""
"Web Beans SEアプリケーションは以下のメインメソッドを走らせることで開始されま"
"す。"

#. Tag: programlisting
#: environments.xml:267
#, fuzzy, no-c-format
msgid "<![CDATA[java org.jboss.weld.environments.se.StartMain <args>]]>"
msgstr "<![CDATA[java org.jboss.webbeans.environments.se.StartMain <args>]]>"

#. Tag: para
#: environments.xml:269
#, fuzzy, no-c-format
msgid ""
"If you need to do any custom initialization of the CDI bean manager, for "
"example registering custom contexts or initializing resources for your beans "
"you can do so in response to the <literal>AfterBeanDiscovery</literal> or "
"<literal>AfterDeploymentValidation</literal> events. The following example "
"registers a custom context:"
msgstr ""
"もしあなたが例えばカスタムコンテキストの登録やBeanのリソースの初期化のような"
"Web Beansマネージャの何かカスタムの初期化を行う必要があるのであれば、あなた"
"は <literal>@Initialized Manager</literal> イベントへのレスポンスでそれをする"
"ことができます。以下のサンプルはカスタムコンテキストを登録しています。"

#. Tag: programlisting
#: environments.xml:276
#, fuzzy, no-c-format
msgid ""
"<![CDATA[public class PerformSetup {\n"
"   public void setup(@Observes AfterBeanDiscovery event) {\n"
"      event.addContext( ThreadContext.INSTANCE );\n"
"   }\n"
"}]]>"
msgstr ""
"<![CDATA[public class PerformSetup\n"
"{\n"
"\n"
"    public void setup( @Observes @Initialized Manager manager )\n"
"    {\n"
"        manager.addContext( ThreadContext.INSTANCE );\n"
"    }\n"
"}]]>"

#. Tag: para
#: environments.xml:279
#, fuzzy, no-c-format
msgid ""
"The command line parameters do not become available for injection until the "
"<literal>ContainerInitialized</literal> event is fired. If you need access "
"to the parameters during initialization you can do so via the "
"<literal>public static String[] getParameters()</literal> method in "
"<literal>StartMain</literal>."
msgstr ""
"コマンドラインパラメータは <literal>@Deployed Manager</literal> イベントが発"
"生するまでインジェクションで利用できません。もしあなたが初期化の間にそのパラ"
"メータにアクセスする必要があるのであれば、あなたは <literal>StartMain</"
"literal> の <literal>public static String getParameters()</literal> メソッド"
"を通してそれをすることができます。"

#~ msgid ""
#~ "No special configuration of your application, beyond adding either "
#~ "<literal>META-INF/beans.xml</literal> or <literal>WEB-INF/beans.xml</"
#~ "literal> is needed."
#~ msgstr ""
#~ "あなたのアプリケーションに必要な設定は、<literal>META-INF/beans.xml</"
#~ "literal>か<literal>WEB-INF/beans.xml</literal>を追加することだけです。"

#~ msgid ""
#~ "If you are using JBoss AS 5.0.1.GA then you'll need to install Web Beans "
#~ "as an extra. First we need to tell Web Beans where JBoss is located. Edit "
#~ "<literal>jboss-as/build.properties</literal> and set the <literal>jboss."
#~ "home</literal> property. For example:"
#~ msgstr ""
#~ "あなたがJBoss AS 5.0.1.GAを使用しているのなら、追加でWeb Beansをインストー"
#~ "ルする必要があるでしょう。最初に私たちはWeb BeansにJBossの設置場所を知らせ"
#~ "てやる必要があります。<literal>jboss-as/build.properties</literal>を編集し"
#~ "て<literal>jboss.home</literal>プロパティをセットします。例えば、"

#~ msgid "Now we can install Web Beans:"
#~ msgstr "いよいよ私たちはWeb Beansをインストールすることができます。"

#~ msgid "Web Beans is built into all releases of JBoss AS from 5.1 onwards."
#~ msgstr "Web Beansは5.1以降のJBoss ASの全リリースに組み込まれます。"

#~ msgid "TODO"
#~ msgstr "TODO"

#~ msgid "Simple Web Beans (POJOs)"
#~ msgstr "シンプルなWeb Beans (POJOs)"

#~ msgid "Binding Types"
#~ msgstr "バインディングタイプ"
