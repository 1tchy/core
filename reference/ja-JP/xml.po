# Language ja-JP translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-12-19 20:26+0000\n"
"PO-Revision-Date: 2009-06-09 19:24+0900\n"
"Last-Translator: Keita Higashi <winnie_the_pooh@y3.dion.ne.jp>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: xml.xml:4
#, no-c-format
msgid "Defining Web Beans using XML"
msgstr "XML を使っている Web Beans を定める"

#. Tag: para
#: xml.xml:6
#, no-c-format
msgid "So far, we've seen plenty of examples of Web Beans declared using annotations. However, there are a couple of occasions when we can't use annotations to define the Web Bean:"
msgstr "これまで、アノテーションを使用して宣言される Web Beans の多くの例を見ました。しかし、Web Bean を定義するためにアノテーションを使うことができない場合があります。"

#. Tag: para
#: xml.xml:12
#, no-c-format
msgid "when the implementation class comes from some preexisting library, or"
msgstr "インプリメンテーションクラスがいくつかの既存のライブラリからなるとき"

#. Tag: para
#: xml.xml:15
#, no-c-format
msgid "when there should be multiple Web Beans with the same implementation class."
msgstr "複数の Web Beans が同じインプリメンテーションクラスでなければならないとき"

#. Tag: para
#: xml.xml:20
#, no-c-format
msgid "In either of these cases, Web Beans gives us two options:"
msgstr "これらのケースのどちらででも、 Web Beans は二つのオプションを与えます。"

#. Tag: para
#: xml.xml:23
#, no-c-format
msgid "write a producer method, or"
msgstr "プロデューサメソッドを書きます"

#. Tag: para
#: xml.xml:24
#, no-c-format
msgid "declare the Web Bean using XML."
msgstr "XML を使って Web Bean を宣言します"

#. Tag: para
#: xml.xml:27
#, no-c-format
msgid "Many frameworks use XML to provide metadata relating to Java classes. However, Web Beans uses a very different approach to specifying the names of Java classes, fields or methods to most other frameworks. Instead of writing class and member names as the string values of XML elements and attributes, Web Beans lets you use the class or member name as the name of the XML element."
msgstr "多くのフレームワークは、 Java クラスに関してメタデータを提供するために、 XML を使います。しかし、 Web Beans は大部分の他のフレームワークに Java クラス、フィールドまたはメソッドの名前を明示する非常に異なるアプローチを使います。 XML 要素と属性の文字列値としてクラスとメンバー名を書く代わりに、 Web Beans はクラスまたはメンバー名を XML 要素の名前として使うことができます。"

#. Tag: para
#: xml.xml:33
#, no-c-format
msgid "The advantage of this approach is that you can write an XML schema that prevents spelling errors in your XML document. It's even possible for a tool to generate the XML schema automatically from the compiled Java code. Or, an integrated development environment could perform the same validation without the need for the explicit intermediate generation step."
msgstr "このアプローチの長所は、 XML 文書でスペルミスを防止する XML スキーマを記述することができるということです。ツールがコンパイルされた Java コードから自動的に XML スキーマを生み出すことさえ可能です。あるいは、統合した開発環境は、明確な中間の生成ステップを行うことなく、同じ妥当性の検証を実行することがありえます。"

#. Tag: title
#: xml.xml:40
#, no-c-format
msgid "Declaring Web Bean classes"
msgstr "Web Bean クラスを宣言する"

#. Tag: para
#: xml.xml:42
#, no-c-format
msgid "For each Java package, Web Beans defines a corresponding XML namespace. The namespace is formed by prepending <literal>urn:java:</literal> to the Java package name. For the package <literal>com.mydomain.myapp</literal>, the XML namespace is <literal>urn:java:com.mydomain.myapp</literal>."
msgstr "Java パッケージごとに、 Web Beans は対応する XML 名前空間を定めます。名前空間は、 Java パッケージ名前に <literal>urn:java:</literal> を前に付加することによって作られます。パッケージ <literal>com.mydomain.myapp</literal> により、 XML 名前空間は、 <literal>urn:java:com.mydomain.myapp</literal> となります。"

#. Tag: para
#: xml.xml:47
#, no-c-format
msgid "Java types belonging to a package are referred to using an XML element in the namespace corresponding to the package. The name of the element is the name of the Java type. Fields and methods of the type are specified by child elements in the same namespace. If the type is an annotation, members are specified by attributes of the element."
msgstr "パッケージに属している Java 型は、パッケージと一致している名前空間で XML 要素を使用することにゆだねられます。要素の名前は、 Java 型の名前です。型のフィールドとメソッドは、同じ名前空間で子要素で明示されます。型がアノテーションであるならば、メンバーは要素の特質によって明示されます。"

#. Tag: para
#: xml.xml:53
#, no-c-format
msgid "For example, the element <literal>&lt;util:Date/&gt;</literal> in the following XML fragment refers to the class <literal>java.util.Date</literal>:"
msgstr "たとえば、以下の XML 断片の要素 <literal>&lt;util:Date/&gt;</literal> は、クラス <literal>java.util.Date</literal> を参照します。"

#. Tag: programlisting
#: xml.xml:56
#, no-c-format
msgid ""
"<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
"          xmlns:util=\"urn:java:java.util\">\n"
"\n"
"    <util:Date/>\n"
"\n"
"</WebBeans>]]>"
msgstr ""
"<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
"          xmlns:util=\"urn:java:java.util\">\n"
"\n"
"    <util:Date/>\n"
"\n"
"</WebBeans>]]>"

#. Tag: para
#: xml.xml:58
#, no-c-format
msgid "And this is all the code we need to declare that <literal>Date</literal> is a simple Web Bean! An instance of <literal>Date</literal> may now be injected by any other Web Bean:"
msgstr "そして、これは <literal>Date</literal> をシンプル Web Bean として宣言するためのすべてのコードです。<literal>Date</literal> のインスタンスは、現在他のどの Web Bean にも導入されることがありえます。"

#. Tag: programlisting
#: xml.xml:62
#, no-c-format
msgid "<![CDATA[@Current Date date]]>"
msgstr "<![CDATA[@Current Date date]]>"

#. Tag: title
#: xml.xml:67
#, no-c-format
msgid "Declaring Web Bean metadata"
msgstr "Web Bean メタデータを宣言する"

#. Tag: para
#: xml.xml:69
#, no-c-format
msgid "We can declare the scope, deployment type and interceptor binding types using direct child elements of the Web Bean declaration:"
msgstr "バインディングタイプが Web Bean 宣言の直接の子要素を使用して型を検査するスコープ、デプロイメントタイプとインタセプターを宣言することができます。"

#. Tag: programlisting
#: xml.xml:72
#, no-c-format
msgid ""
"<![CDATA[<myapp:ShoppingCart>\n"
"    <SessionScoped/>\n"
"    <myfwk:Transactional requiresNew=\"true\"/>\n"
"    <myfwk:Secure/>\n"
"</myapp:ShoppingCart>]]>"
msgstr ""
"<![CDATA[<myapp:ShoppingCart>\n"
"    <SessionScoped/>\n"
"    <myfwk:Transactional requiresNew=\"true\"/>\n"
"    <myfwk:Secure/>\n"
"</myapp:ShoppingCart>]]>"

#. Tag: para
#: xml.xml:74
#, no-c-format
msgid "We use exactly the same approach to specify names and binding type:"
msgstr "名前とバインディングタイプを明示するために、正確に同じアプローチを使います。"

#. Tag: programlisting
#: xml.xml:76
#, no-c-format
msgid ""
"<![CDATA[<util:Date>\n"
"    <Named>currentTime</Named>\n"
"</util:Date>\n"
"\n"
"<util:Date>\n"
"    <SessionScoped/>\n"
"    <myapp:Login/>\n"
"    <Named>loginTime</Named>\n"
"</util:Date>\n"
"\n"
"<util:Date>\n"
"    <ApplicationScoped/>\n"
"    <myapp:SystemStart/>\n"
"    <Named>systemStartTime</Named>\n"
"</util:Date>]]>"
msgstr ""
"<![CDATA[<util:Date>\n"
"    <Named>currentTime</Named>\n"
"</util:Date>\n"
"\n"
"<util:Date>\n"
"    <SessionScoped/>\n"
"    <myapp:Login/>\n"
"    <Named>loginTime</Named>\n"
"</util:Date>\n"
"\n"
"<util:Date>\n"
"    <ApplicationScoped/>\n"
"    <myapp:SystemStart/>\n"
"    <Named>systemStartTime</Named>\n"
"</util:Date>]]>"

#. Tag: para
#: xml.xml:78
#, no-c-format
msgid "Where <literal>@Login</literal> and <literal>@SystemStart</literal> are binding annotations types."
msgstr "<literal>@Login</literal> と <literal>@SystemStart</literal> アノテーションタイプを結びつけているところ。"

#. Tag: programlisting
#: xml.xml:81
#, no-c-format
msgid ""
"<![CDATA[@Current Date currentTime;\n"
"@Login Date loginTime;\n"
"@SystemStart Date systemStartTime;]]>"
msgstr ""
"<![CDATA[@Current Date currentTime;\n"
"@Login Date loginTime;\n"
"@SystemStart Date systemStartTime;]]>"

#. Tag: para
#: xml.xml:83
#, no-c-format
msgid "As usual, a Web Bean may support multiple binding types:"
msgstr "通常通り、 Web Bean は複数のバインディングタイプをサポートすることがありえます。"

#. Tag: programlisting
#: xml.xml:85
#, no-c-format
msgid ""
"<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
"    <myapp:PayByCheque/>\n"
"    <myapp:Asynchronous/>\n"
"</myapp:AsynchronousChequePaymentProcessor>]]>"
msgstr ""
"<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
"    <myapp:PayByCheque/>\n"
"    <myapp:Asynchronous/>\n"
"</myapp:AsynchronousChequePaymentProcessor>]]>"

#. Tag: para
#: xml.xml:87
#, no-c-format
msgid "Interceptors and decorators are just simple Web Beans, so they may be declared just like any other simple Web Bean:"
msgstr "インタセプタとデコレータは単なるシンプル Web Beans であるので、それらはまるで他のシンプル Web Bean のように宣言されることがありえます。"

#. Tag: programlisting
#: xml.xml:90
#, no-c-format
msgid ""
"<![CDATA[<myfwk:TransactionInterceptor>\n"
"    <Interceptor/>\n"
"    <myfwk:Transactional/>\n"
"</myfwk:TransactionInterceptor>]]>"
msgstr ""
"<![CDATA[<myfwk:TransactionInterceptor>\n"
"    <Interceptor/>\n"
"    <myfwk:Transactional/>\n"
"</myfwk:TransactionInterceptor>]]>"

#. Tag: title
#: xml.xml:95
#, no-c-format
msgid "Declaring Web Bean members"
msgstr "Web Bean メンバーを宣言する"

#. Tag: para
#: xml.xml:97
#, no-c-format
msgid "TODO!"
msgstr "やるべきこと。"

#. Tag: title
#: xml.xml:104
#, no-c-format
msgid "Declaring inline Web Beans"
msgstr "インライン Web Beans を宣言する"

#. Tag: para
#: xml.xml:106
#, no-c-format
msgid "Web Beans lets us define a Web Bean at an injection point. For example:"
msgstr "Web Beans は、依存性注入ポイントで Web Bean を定義できます。例を以下に示します。"

#. Tag: programlisting
#: xml.xml:108
#, no-c-format
msgid ""
"<![CDATA[<myapp:System>\n"
"    <ApplicationScoped/>\n"
"    <myapp:admin>\n"
"        <myapp:Name>\n"
"            <myapp:firstname>Gavin</myapp:firstname>\n"
"            <myapp:lastname>King</myapp:lastname>\n"
"            <myapp:email>gavin@hibernate.org</myapp:email>\n"
"        </myapp:Name>\n"
"    </myapp:admin>\n"
"</myapp:System>]]>"
msgstr ""
"<![CDATA[<myapp:System>\n"
"    <ApplicationScoped/>\n"
"    <myapp:admin>\n"
"        <myapp:Name>\n"
"            <myapp:firstname>Gavin</myapp:firstname>\n"
"            <myapp:lastname>King</myapp:lastname>\n"
"            <myapp:email>gavin@hibernate.org</myapp:email>\n"
"        </myapp:Name>\n"
"    </myapp:admin>\n"
"</myapp:System>]]>"

#. Tag: para
#: xml.xml:110
#, no-c-format
msgid "The <literal>&lt;Name&gt;</literal> element declares a simple Web Bean of scope <literal>@Dependent</literal> and class <literal>Name</literal>, with a set of initial field values. This Web Bean has a special, container-generated binding and is therefore injectable only to the specific injection point at which it is declared."
msgstr "一組の最初のフィールド値で、 <literal>&lt;Name&gt;</literal> エレメントはスコープ <literal>@Dependent</literal> とクラス <literal>Name</literal> の単純な Web Bean を宣言します。"

#. Tag: para
#: xml.xml:116
#, no-c-format
msgid "This simple but powerful feature allows the Web Beans XML format to be used to specify whole graphs of Java objects. It's not quite a full databinding solution, but it's close!"
msgstr "この単純であるが、強力な機能によって、 Java オブジェクトの全部のグラフを明示するのにWeb Beans XML フォーマットを用いることができます。それは完全なデータバインディングの解決案とは言えませんが、それにほとんど近いものです。"

#. Tag: title
#: xml.xml:123
#, no-c-format
msgid "Using a schema"
msgstr "スキーマを使用する"

#. Tag: para
#: xml.xml:125
#, no-c-format
msgid "If we want our XML document format to be authored by people who aren't Java developers, or who don't have access to our code, we need to provide a schema. There's nothing specific to Web Beans about writing or using the schema."
msgstr "XML 文書フォーマットに Java 開発者でない、または、コードにアクセスしない人々によって記述して欲しいならば、スキーマを提供する必要があります。 Web Beans に特有のスキーマを記述するか、記述する必要はありません。"

#. Tag: programlisting
#: xml.xml:130
#, no-c-format
msgid ""
"<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
"          xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
"          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"          xsi:schemaLocation=\"urn:java:javax.webbeans http://java.sun.com/jee/web-beans-1.0.xsd\n"
"                              urn:java:com.mydomain.myapp http://mydomain.com/xsd/myapp-1.2.xsd\">\n"
"\n"
"    <myapp:System>\n"
"        ...\n"
"    </myapp:System>\n"
"\n"
"</WebBeans>]]>"
msgstr ""
"<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
"          xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
"          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"          xsi:schemaLocation=\"urn:java:javax.webbeans http://java.sun.com/jee/web-beans-1.0.xsd\n"
"                              urn:java:com.mydomain.myapp http://mydomain.com/xsd/myapp-1.2.xsd\">\n"
"\n"
"    <myapp:System>\n"
"        ...\n"
"    </myapp:System>\n"
"\n"
"</WebBeans>]]>"

#. Tag: para
#: xml.xml:132
#, no-c-format
msgid "Writing an XML schema is quite tedious. Therefore, the Web Beans RI project will provide a tool which automatically generates the XML schema from compiled Java code."
msgstr "XML スキーマを記述することは、全く退屈です。したがって、 Web Beans RI プロジェクトは、コンパイルされた Java コードから自動的に XML スキーマを生み出すツールを提供します。"

