# translation of injection.po to Korean
# Language ko-KR translations for Introduction_to_Web_Beans package.
#
# Automatically generated, 2009.
# Eunju Kim <eukim@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: injection\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-01-06 11:30+0000\n"
"PO-Revision-Date: 2009-01-23 00:09+1000\n"
"Last-Translator: Eunju Kim <eukim@redhat.com>\n"
"Language-Team: Korean <ko@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"
"Plural-Forms:  nplurals=2; plural=(n!=1);\n\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"

#. Tag: title
#: injection.xml:4
#, no-c-format
msgid "Dependency injection"
msgstr "의존성 삽입 "

#. Tag: para
#: injection.xml:6
#, no-c-format
msgid "Web Beans supports three primary mechanisms for dependency injection:"
msgstr "Web Beans는 의존성 삽입에 대한 세 가지 주요 메카니즘을 지원합니다: "

#. Tag: para
#: injection.xml:8
#, no-c-format
msgid "Constructor parameter injection:"
msgstr "생성자 매개 변수 삽입: "

#. Tag: programlisting
#: injection.xml:10
#, no-c-format
msgid ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private final ShoppingCart cart;\n"
"    \n"
"    @Initializer\n"
"    public Checkout(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private final ShoppingCart cart;\n"
"    \n"
"    @Initializer\n"
"    public Checkout(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"\n"
"}]]>"

#. Tag: para
#: injection.xml:12
#, no-c-format
msgid "<emphasis>Initializer</emphasis> method parameter injection:"
msgstr "<emphasis>초기화</emphasis> 방식 매개 변수 삽입: "

#. Tag: programlisting
#: injection.xml:14
#, no-c-format
msgid ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private ShoppingCart cart;\n"
"\n"
"    @Initializer \n"
"    void setShoppingCart(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private ShoppingCart cart;\n"
"\n"
"    @Initializer \n"
"    void setShoppingCart(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#: injection.xml:16
#, no-c-format
msgid "And direct field injection:"
msgstr "직접적 영역 삽입: "

#. Tag: programlisting
#: injection.xml:18
#, no-c-format
msgid ""
"<![CDATA[public class Checkout {\n"
"\n"
"    private @Current ShoppingCart cart;\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[public class Checkout {\n"
"\n"
"    private @Current ShoppingCart cart;\n"
"    \n"
"}]]>"

#. Tag: para
#: injection.xml:20
#, no-c-format
msgid ""
"Dependency injection always occurs when the Web Bean instance is first "
"instantiated."
msgstr "Web Bean 인스턴스가 먼저 인스턴스화되었을 경우 의존성 삽입이 발생합니다. "

#. Tag: para
#: injection.xml:25
#, no-c-format
msgid ""
"First, the Web Bean manager calls the Web Bean constructor, to obtain an "
"instance of the Web Bean."
msgstr "먼저, Web Bean 관리자는 Web Bean 생성자를 호출하여 Web Bean 인스턴스를 획득합니다.  "

#. Tag: para
#: injection.xml:29
#, no-c-format
msgid ""
"Next, the Web Bean manager initializes the values of all injected fields of "
"the Web Bean."
msgstr "다음으로, Web Bean 관리자는 Web Bean의 삽입된 모든 영역의 값을 초기화합니다. "

#. Tag: para
#: injection.xml:33
#, no-c-format
msgid "Next, the Web Bean manager calls all initializer methods of Web Bean."
msgstr "그 후, Web Bean 관리자는 Web Bean의 모든 초기화 방식을 호출합니다.  "

#. Tag: para
#: injection.xml:37
#, no-c-format
msgid ""
"Finally, the <literal>@PostConstruct</literal> method of the Web Bean, if "
"any, is called."
msgstr "마지막으로 Web Bean의 <literal>@PostConstruct</literal> 방식이 호출됩니다. "

#. Tag: para
#: injection.xml:42
#, no-c-format
msgid ""
"Constructor parameter injection is not supported for EJB beans, since the "
"EJB is instantiated by the EJB container, not the Web Bean manager."
msgstr "EJB가 Web Bean 관리자가 아닌 EJB 컨테이너에 의해 인스턴스화된 이래 생성자 매개변수 삽입은 EJB beans을 지원하지 않습니다. "

#. Tag: para
#: injection.xml:45
#, no-c-format
msgid ""
"Parameters of constructors and initializer methods need not be explicitly "
"annotated when the default binding type <literal>@Current</literal> applies. "
"Injected fields, however, <emphasis>must</emphasis> specify a binding type, "
"even when the default binding type applies. If the field does not specify a "
"binding type, it will not be injected."
msgstr "기본값 바인딩 유형 <literal>@Current</literal>가 적용되었을 경우 생성자의 매개 변수 및 초기화 방식에서는 명시적으로 어노테이션할 필요가 없습니다. 하지만 삽입된 영역에는 <emphasis>반드시</emphasis> 바인딩 유형을 지정해야 하며, 언제 기본값 바인딩 유형을 적용할 지도 지정해야 합니다. 영역에 바인딩 유형이 지정되어 있지 않을 경우, 이는 삽입되지 않게 됩니다. "

#. Tag: para
#: injection.xml:51
#, no-c-format
msgid "Producer methods also support parameter injection:"
msgstr "생산자 방식은 매개 변수 삽입을 지원합니다:  "

#. Tag: programlisting
#: injection.xml:53
#, no-c-format
msgid ""
"<![CDATA[@Produces Checkout createCheckout(ShoppingCart cart) {\n"
"    return new Checkout(cart);\n"
"}]]>"
msgstr ""
"<![CDATA[@Produces Checkout createCheckout(ShoppingCart cart) {\n"
"    return new Checkout(cart);\n"
"}]]>"

#. Tag: para
#: injection.xml:55
#, no-c-format
msgid ""
"Finally, observer methods (which we'll meet in <xref linkend=\"events\"/>), "
"disposal methods and destructor methods all support parameter injection."
msgstr "마지막으로 옵저버 방식 (<xref linkend=\"events\"/>에서 살펴보게됨), 폐지 방식 및 소멸자 방식 모두는 매개 변수 삽입을 지원합니다. "

#. Tag: para
#: injection.xml:58
#, no-c-format
msgid ""
"The Web Beans specification defines a procedure, called the "
"<emphasis>typesafe resolution algorithm</emphasis>, that the Web Bean "
"manager follows when identifying the Web Bean to inject to an injection "
"point. This algorithm looks complex at first, but once you understand it, "
"it's really quite intuitive. Typesafe resolution is performed at system "
"initialization time, which means that the manager will inform the user "
"immediately if a Web Bean's dependencies cannot be satisfied, by throwing a "
"<literal>UnsatisfiedDependencyException</literal> or "
"<literal>AmbiguousDependencyException</literal>."
msgstr ""
"Web Beans 사양은 <emphasis>타입 안정적 해상도 알고리즘</emphasis>이라는 절차를 정의하여, Web Bean 관리자가 삽입 지점에 삽입하기 위해 Web Bean을 인식할 때 이를 따르게 됩니다. 이러한 알고르짐은 처음에는 복잡하게 보이지만, 일단 이를 이해하면, 이는 다소 직관적입니다. 타입 안정적 해상도는 시스템 초기화시에 실행되어, 관리자는 사용자에 과한 정보를 즉각적으로 알게되며 Web Bean의 의존성에 만족하지 않을 경우, <literal>UnsatisfiedDependencyException</literal> 또는 "
"<literal>AmbiguousDependencyException</literal>을 넘기게 됩니다.  "

#. Tag: para
#: injection.xml:67
#, no-c-format
msgid ""
"The purpose of this algorithm is to allow multiple Web Beans to implement "
"the same API type and either:"
msgstr "이러한 알고리즘은 여러 Web Beans를 허용하여 동일한 API 유형을 구현하기 위한 것입니다: "

#. Tag: para
#: injection.xml:72
#, no-c-format
msgid ""
"allow the client to select which implementation it requires using "
"<emphasis>binding annotations</emphasis>,"
msgstr "또는 클라이언트가 <emphasis>바인딩 어노테이션</emphasis>을 사용하여 필요한 구현 사항을 선택하게 합니다, "

#. Tag: para
#: injection.xml:77
#, no-c-format
msgid ""
"allow the application deployer to select which implementation is appropriate "
"for a particular deployment, without changes to the client, by enabling or "
"disabling <emphasis>deployment types</emphasis>, or"
msgstr "애플리케이션 개발자가 클라이언트로 변경하지 않고 <emphasis>배치 유형</emphasis>을 활성화 또는 비활성화하여 특정 시스템에 어떤 구헌이 적합할 지를 선택하게 합니다.   "

#. Tag: para
#: injection.xml:82
#, no-c-format
msgid ""
"allow one implementation of an API to override another implementation of the "
"same API at deployment time, without changes to the client, using "
"<emphasis>deployment type precedence</emphasis>."
msgstr "하나의 API 구현이 클라이언트에 변경하지 않고 <emphasis>배치 유형 우선 순위</emphasis>를 사용하여 배치시 다른 동일한 API 구현을 덮어쓰기하게 합니다.  "

#. Tag: para
#: injection.xml:88
#, no-c-format
msgid "Let's explore how the Web Beans manager determines a Web Bean to be injected."
msgstr "Web Beans 관리자가 어떻게 Web Bean을 삽입할 지를 결정하는 방법에 대해 살펴봅시다. "

#. Tag: title
#: injection.xml:91
#, no-c-format
msgid "Binding annotations"
msgstr "바인딩 어노테이션 "

#. Tag: para
#: injection.xml:93
#, no-c-format
msgid ""
"If we have more than one Web Bean that implements a particular API type, the "
"injection point can specify exactly which Web Bean should be injected using "
"a binding annotation. For example, there might be two implementations of "
"<literal>PaymentProcessor</literal>:"
msgstr "특정 API 유형을 구현하는 하나 이상의 Web Bean이 있을 경우, 삽입 지점은 바인딩 어노테이션을 사용하여 어떤 Web Bean이 삽입되어야 할 지를 지정할 수 있습니다. 예를 들어, <literal>PaymentProcessor</literal>의 두 가지 구현이 있을 수 있습니다: "

#. Tag: programlisting
#: injection.xml:98
#, no-c-format
msgid ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"
msgstr ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: programlisting
#: injection.xml:100
#, no-c-format
msgid ""
"<![CDATA[@PayByCreditCard\n"
"public class CreditCardPaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"
msgstr ""
"<![CDATA[@PayByCreditCard\n"
"public class CreditCardPaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: para
#: injection.xml:102
#, no-c-format
msgid ""
"Where <literal>@PayByCheque</literal> and <literal>@PayByCreditCard</"
"literal> are binding annotations:"
msgstr ""
"여기서 <literal>@PayByCheque</literal> 및 <literal>@PayByCreditCard</"
"literal>는 바인딩 어노테이션입니다:  "

#. Tag: programlisting
#: injection.xml:105
#, no-c-format
msgid ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCheque {}]]>"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCheque {}]]>"

#. Tag: programlisting
#: injection.xml:107
#, no-c-format
msgid ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCreditCard {}]]>"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCreditCard {}]]>"

#. Tag: para
#: injection.xml:109
#, no-c-format
msgid ""
"A client Web Bean developer uses the binding annotation to specify exactly "
"which Web Bean should be injected."
msgstr "클라이언트 Web Bean 개발자는 바인딩 어노테이션을 사용하여 정확히 어떤 Web Bean이 삽입되어야 하는 지를 지정합니다. "

#. Tag: para
#: injection.xml:112
#, no-c-format
msgid "Using field injection:"
msgstr "영역 삽입 사용: "

#. Tag: programlisting
#: injection.xml:114
#, no-c-format
msgid ""
"<![CDATA[@PayByCheque PaymentProcessor chequePaymentProcessor;\n"
"@PayByCreditCard PaymentProcessor creditCardPaymentProcessor;]]>"
msgstr ""
"<![CDATA[@PayByCheque PaymentProcessor chequePaymentProcessor;\n"
"@PayByCreditCard PaymentProcessor creditCardPaymentProcessor;]]>"

#. Tag: para
#: injection.xml:116
#, no-c-format
msgid "Using initializer method injection:"
msgstr "초기화 방식 삽입 사용: "

#. Tag: programlisting
#: injection.xml:118
#, no-c-format
msgid ""
"<![CDATA[@Initializer\n"
"public void setPaymentProcessors(@PayByCheque PaymentProcessor "
"chequePaymentProcessor, \n"
"                                 @PayByCreditCard PaymentProcessor "
"creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"
msgstr ""
"<![CDATA[@Initializer\n"
"public void setPaymentProcessors(@PayByCheque PaymentProcessor "
"chequePaymentProcessor, \n"
"                                 @PayByCreditCard PaymentProcessor "
"creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"

#. Tag: para
#: injection.xml:120
#, no-c-format
msgid "Or using constructor injection:"
msgstr "생성자 삽입 사용: "

#. Tag: programlisting
#: injection.xml:122
#, no-c-format
msgid ""
"<![CDATA[@Initializer\n"
"public Checkout(@PayByCheque PaymentProcessor chequePaymentProcessor, \n"
"                @PayByCreditCard PaymentProcessor "
"creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"
msgstr ""
"<![CDATA[@Initializer\n"
"public Checkout(@PayByCheque PaymentProcessor chequePaymentProcessor, \n"
"                @PayByCreditCard PaymentProcessor "
"creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"

#. Tag: title
#: injection.xml:125
#, no-c-format
msgid "Binding annotations with members"
msgstr "멤버와 바인딩 어노테이션 "

#. Tag: para
#: injection.xml:127
#, no-c-format
msgid "Binding annotations may have members:"
msgstr "바인딩 어노테이션은 멤버를 갖을 수 있습니다: "

#. Tag: programlisting
#: injection.xml:129
#, no-c-format
msgid ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayBy {\n"
"    PaymentType value();\n"
"}]]>"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayBy {\n"
"    PaymentType value();\n"
"}]]>"

#. Tag: para
#: injection.xml:131
#, no-c-format
msgid "In which case, the member value is significant:"
msgstr "이러한 경우, 멤버 값이 중요합니다:   "

#. Tag: programlisting
#: injection.xml:133
#, no-c-format
msgid ""
"<![CDATA[@PayBy(CHEQUE) PaymentProcessor chequePaymentProcessor;\n"
"@PayBy(CREDIT_CARD) PaymentProcessor creditCardPaymentProcessor;]]>"
msgstr ""
"<![CDATA[@PayBy(CHEQUE) PaymentProcessor chequePaymentProcessor;\n"
"@PayBy(CREDIT_CARD) PaymentProcessor creditCardPaymentProcessor;]]>"

#. Tag: para
#: injection.xml:135
#, no-c-format
msgid ""
"You can tell the Web Bean manager to ignore a member of a binding annotation "
"type by annotating the member <literal>@NonBinding</literal>."
msgstr "Web Bean 관리자에게 <literal>@NonBinding</literal> 멤버를 어노테이션하여 바인딩 어노테이션 유형 멤버를 무시하라고 말할 수 있습니다.  "

#. Tag: title
#: injection.xml:141
#, no-c-format
msgid "Combinations of binding annnotations"
msgstr "바인딩 어노테이션의 조합 "

#. Tag: para
#: injection.xml:143
#, no-c-format
msgid "An injection point may even specify multiple binding annotations:"
msgstr "삽입 지점은 여러 바인딩 어노테이션을 지정할 수 도 있습니다:  "

#. Tag: programlisting
#: injection.xml:145
#, no-c-format
msgid "<![CDATA[@Asynchronous @PayByCheque PaymentProcessor paymentProcessor]]>"
msgstr "<![CDATA[@Asynchronous @PayByCheque PaymentProcessor paymentProcessor]]>"

#. Tag: para
#: injection.xml:147
#, no-c-format
msgid ""
"In this case, only a Web Bean which has <emphasis>both</emphasis> binding "
"annotations would be eligible for injection."
msgstr "이러한 경우, <emphasis>양쪽</emphasis> 바인딩 어노테이션을 갖는 Web Bean만 삽입될 수 있습니다. "

#. Tag: title
#: injection.xml:153
#, no-c-format
msgid "Binding annotations and producer methods"
msgstr "바인딩 어노테이션 및 생산자 방식 "

#. Tag: para
#: injection.xml:155
#, no-c-format
msgid "Even producer methods may specify binding annotations:"
msgstr "생산자 방식은 바인딩 어노테이션을 지정할 수 도 있습니다: "

#. Tag: programlisting
#: injection.xml:157
#, no-c-format
msgid ""
"<![CDATA[@Produces \n"
"@Asynchronous @PayByCheque \n"
"PaymentProcessor createAsyncPaymentProcessor(@PayByCheque PaymentProcessor "
"processor) {\n"
"    return new AsynchronousPaymentProcessor(processor);\n"
"}]]>"
msgstr ""
"<![CDATA[@Produces \n"
"@Asynchronous @PayByCheque \n"
"PaymentProcessor createAsyncPaymentProcessor(@PayByCheque PaymentProcessor "
"processor) {\n"
"    return new AsynchronousPaymentProcessor(processor);\n"
"}]]>"

#. Tag: title
#: injection.xml:162
#, no-c-format
msgid "The default binding type"
msgstr "기본값 바인딩 유형 "

#. Tag: para
#: injection.xml:164
#, no-c-format
msgid ""
"Web Beans defines a binding type <literal>@Current</literal> that is the "
"default binding type for any injection point or Web Bean that does not "
"explicitly specify a binding type."
msgstr "Web Beans는 명확하게 바인딩 유형을 지정하지 않은 Web Bean이나 또는 삽입 지점에 대한 기본값 바인딩 유형인 <literal>@Current</literal> 바인딩 유형을 정의합니다.  "

#. Tag: para
#: injection.xml:168
#, no-c-format
msgid ""
"There are two common circumstances in which it is necessary to explicitly "
"specify <literal>@Current</literal>:"
msgstr "<literal>@Current</literal>를 지정하기 위해 필요한 일반적인 환경이 두 가지 있습니다:      "

#. Tag: para
#: injection.xml:173
#, no-c-format
msgid ""
"on a field, in order to declare it as an injected field with the default "
"binding type, and"
msgstr "기본값 바인딩 유형과 함께 삽입 영역으로 이를 명시하기 위한 영역에서 "

#. Tag: para
#: injection.xml:177
#, no-c-format
msgid ""
"on a Web Bean which has another binding type in addition to the default "
"binding type."
msgstr "기본값 바인딩 유형에 더하여 다른 바인딩 유형을 갖는 Web Bean에서 "

#. Tag: title
#: injection.xml:187
#, no-c-format
msgid "Deployment types"
msgstr "배치 유형 "

#. Tag: para
#: injection.xml:189
#, no-c-format
msgid ""
"All Web Beans have a <emphasis>deployment type</emphasis>. Each deployment "
"type identifies a set of Web Beans that should be conditionally installed in "
"some deployments of the system."
msgstr "모든 Web Beans는 <emphasis>배치 유형</emphasis>을 갖습니다. 각각의 배치 유형은 시스템의 일부 배치에 조건부로 설치되어야 하는 Web Beans 모음을 인식합니다. "

#. Tag: para
#: injection.xml:193
#, no-c-format
msgid ""
"For example, we could define a deployment type named <literal>@Mock</"
"literal>, which would identify Web Beans that should only be installed when "
"the system executes inside an integration testing environment:"
msgstr "예를 들어, <literal>@Mock</literal>라는 배치 유형을 정의할 수 있으며, 이는 시스템이 통합적인 테스트 환경 내에서 실행될 때 설치되어야 하는 Web Beans를 인식합니다:  "

#. Tag: programlisting
#: injection.xml:197
#, no-c-format
msgid ""
"<![CDATA[@Retention(RUNTIME)\n"
"  @Target({TYPE, METHOD})\n"
"  @DeploymentType\n"
"  public @interface Mock {}]]>"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"  @Target({TYPE, METHOD})\n"
"  @DeploymentType\n"
"  public @interface Mock {}]]>"

#. Tag: para
#: injection.xml:199
#, no-c-format
msgid ""
"Suppose we had some Web Bean that interacted with an external system to "
"process payments:"
msgstr "지불 절차를 처리하기 위한 외부적 시스템과 상호 작용하는 일부 Web Bean이 있다고 가정합시다:  "

#. Tag: programlisting
#: injection.xml:202
#, no-c-format
msgid ""
"<![CDATA[public class ExternalPaymentProcessor {\n"
"        \n"
"    public void process(Payment p) {\n"
"        ...\n"
"    }\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[public class ExternalPaymentProcessor {\n"
"        \n"
"    public void process(Payment p) {\n"
"        ...\n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#: injection.xml:204
#, no-c-format
msgid ""
"Since this Web Bean does not explicitly specify a deployment type, it has "
"the default deployment type <literal>@Production</literal>."
msgstr "이러한 Web Bean이 배치 유형을 명시적을 지정하지 않고 있으므로, 이는 기본값 배치 유형 <literal>@Production</literal>을 갖게 됩니다.  "

#. Tag: para
#: injection.xml:207
#, no-c-format
msgid ""
"For integration or unit testing, the external system is slow or unavailable. "
"So we would create a mock object:"
msgstr "통합 또는 단위 테스트를 위해 외부적 시스템은 속도가 느리거나 또는 사용 불가능합니다. 따라서 모의 객체를 생성할 수 있습니다:  "

#. Tag: programlisting
#: injection.xml:210
#, no-c-format
msgid ""
"<![CDATA[@Mock \n"
"public class MockPaymentProcessor implements PaymentProcessor {\n"
"\n"
"    @Override\n"
"    public void process(Payment p) {\n"
"        p.setSuccessful(true);\n"
"    }\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[@Mock \n"
"public class MockPaymentProcessor implements PaymentProcessor {\n"
"\n"
"    @Override\n"
"    public void process(Payment p) {\n"
"        p.setSuccessful(true);\n"
"    }\n"
"\n"
"}]]>"

#. Tag: para
#: injection.xml:212
#, no-c-format
msgid ""
"But how does the Web Bean manager determine which implementation to use in a "
"particular deployment?"
msgstr "하지만 Web Bean 관리자가 특정 배치에 어떤 구현을 사용할 지를 어떻게 결정할까요?   "

#. Tag: title
#: injection.xml:216
#, no-c-format
msgid "Enabling deployment types"
msgstr "배치 유형 활성화   "

#. Tag: para
#: injection.xml:218
#, no-c-format
msgid ""
"Web Beans defines two built-in deployment types: <literal>@Production</"
"literal> and <literal>@Standard</literal>. By default, only Web Beans with "
"the built-in deployment types are enabled when the system is deployed. We "
"can identify additional deployment types to be enabled in a particular "
"deployment by listing them in <literal>web-beans.xml</literal>."
msgstr ""
"Web Beans는 두 개의 내장된 배치 유형을 정의합니다: <literal>@Production</"
"literal> 및 <literal>@Standard</literal>. 시스템이 배치되면 기본값으로 내장된 배치 유형과 함께 Web Beans 만이 활성화됩니다. <literal>web-beans.xml</literal>에서 몰록을 나열하여 특정 배치에서 활성화될 추가 배치 유형을 인식할 수 있습니다.  "

#. Tag: para
#: injection.xml:224
#, no-c-format
msgid ""
"Going back to our example, when we deploy our integration tests, we want all "
"our <literal>@Mock</literal> objects to be installed:"
msgstr "예제로 다시 돌아가서, 통합적 테스트를 배치할 때, 모든 <literal>@Mock</literal> 객체가 설치되기를 원합니다: "

#. Tag: programlisting
#: injection.xml:227
#, no-c-format
msgid ""
"<![CDATA[<WebBeans>\n"
"    <Deploy>\n"
"        <Standard/>\n"
"        <Production/>\n"
"        <test:Mock/>\n"
"    </Deploy>\n"
"</WebBeans>]]>"
msgstr ""
"<![CDATA[<WebBeans>\n"
"    <Deploy>\n"
"        <Standard/>\n"
"        <Production/>\n"
"        <test:Mock/>\n"
"    </Deploy>\n"
"</WebBeans>]]>"

#. Tag: para
#: injection.xml:229
#, no-c-format
msgid ""
"Now the Web Bean manager will identify and install all Web Beans annotated "
"<literal>@Production</literal>, <literal>@Standard</literal> or "
"<literal>@Mock</literal> at deployment time."
msgstr "이제 Web Bean 관리자는 배치시 <literal>@Production</literal>, <literal>@Standard</literal>, <literal>@Mock</literal> 어노테이션된 모든 Web Beans를 인식 및 설치하게 됩니다.  "

#. Tag: para
#: injection.xml:233
#, no-c-format
msgid ""
"The deployment type <literal>@Standard</literal> is used only for certain "
"special Web Beans defined by the Web Beans specification. We can't use it "
"for our own Web Beans, and we can't disable it."
msgstr "<literal>@Standard</literal> 배치 유형은 Web Beans 사양에 의해 정의된 특정 Web Beans에서만 사용됩니다. 자체적 Web Beans에는 이를 사용할 수 없으며 이를 비활성화할 수 없습니다.  "

#. Tag: para
#: injection.xml:237
#, no-c-format
msgid ""
"The deployment type <literal>@Production</literal> is the default deployment "
"type for Web Beans which don't explicitly declare a deployment type, and may "
"be disabled."
msgstr "<literal>@Production</literal> 배치 유형은 배치 유형을 명시하지 않은 Web Beans에 대한 기본값 배치 유형으로 비활성화될 수 있습니다.  "

#. Tag: title
#: injection.xml:244
#, no-c-format
msgid "Deployment type precedence"
msgstr "배치 유형 우선 순위 "

#. Tag: para
#: injection.xml:246
#, no-c-format
msgid ""
"If you've been paying attention, you're probably wondering how the Web Bean "
"manager decides which implementation &#151; <literal>ExternalPaymentProcessor</"
"literal> or <literal>MockPaymentProcessor</literal> &#151; to choose. Consider "
"what happens when the manager encounters this injection point:"
msgstr "관심을 기울이셨다면, Web Bean 관리자가 어떤 구현 &#151; <literal>ExternalPaymentProcessor</literal> 또는 <literal>MockPaymentProcessor</literal> &#151; 을 선택할 지를 어떻게 결정하는지에 대해 궁금해 하셨을 것입니다. 관리자기 이러한 삽입 지점에 이르렀을 때 무엇이 발생할 지를 고려합니다: "

#. Tag: programlisting
#: injection.xml:251
#, no-c-format
msgid "<![CDATA[@Current PaymentProcessor paymentProcessor]]>"
msgstr "<![CDATA[@Current PaymentProcessor paymentProcessor]]>"

#. Tag: para
#: injection.xml:253
#, no-c-format
msgid ""
"There are now two Web Beans which satisfy the <literal>PaymentProcessor</"
"literal> contract. Of course, we can't use a binding annotation to "
"disambiguate, since binding annotations are hard-coded into the source at "
"the injection point, and we want the manager to be able to decide at "
"deployment time!"
msgstr "<literal>PaymentProcessor</literal> 계약을 만족하는 두 개의 Web Beans가 있습니다. 삽입 지점에서 바인딩 어노테이션은 소스로 하드-코드화되어 있으므로, 명확하게 하기 위해 바인딩 어노테이션을 사용할 수 없으며, 관리자가 배치시 결정할 수 있게 하기를 원합니다!  "

#. Tag: para
#: injection.xml:258
#, no-c-format
msgid ""
"The solution to this problem is that each deployment type has a different "
"<emphasis>precedence</emphasis>. The precedence of the deployment types is "
"determined by the order in which they appear in <literal>web-beans.xml</"
"literal>. In our example, <literal>@Mock</literal> appears later than "
"<literal>@Production</literal> so it has a higher precedence."
msgstr "이러한 문제의 해결책은 각각의 배치 유형이 다른 <emphasis>우선 순위</emphasis>를 갖게 하는 것입니다. 배치 유형의 우선 순위는 <literal>web-beans.xml</literal>에 나타나는 순서에 의해 결정됩니다. 예에서 <literal>@Mock</literal>는 <literal>@Production</literal> 보다 나중에 나타나므로 보다 높은 우선 순위를 갖습니다. "

#. Tag: para
#: injection.xml:264
#, no-c-format
msgid ""
"Whenever the manager discovers that more than one Web Bean could satisfy the "
"contract (API type plus binding annotations) specified by an injection "
"point, it considers the relative precedence of the Web Beans. If one has a "
"higher precedence than the others, it chooses the higher precedence Web Bean "
"to inject. So, in our example, the Web Bean manager will inject "
"<literal>MockPaymentProcessor</literal> when executing in our integration "
"testing environment (which is exactly what we want)."
msgstr "하나 이상의 Web Bean이 삽입 지점에 의해 지정된 계약 (API 유형 및 바인딩 어노테이션)에 만족할 수 있음을 관리자가 발견할 때 마다, 이는 Web Beans의 관련된 우선 순위를 고려합니다. 하나의 Web Bean이 다른 것 보다 높은 우선 순위를 갖을 경우, 삽입될 보다 높은 우선 순위의 Web Bean을 선택합니다. 예에서, 통합 테스트 환경 (실제적으로 원하는 환경)에서 실행할 때 Web Bean 관리자는 <literal>MockPaymentProcessor</literal>를 삽입하게 됩니다.   "

#. Tag: para
#: injection.xml:271
#, no-c-format
msgid ""
"It's interesting to compare this facility to today's popular manager "
"architectures. Various \"lightweight\" containers also allow conditional "
"deployment of classes that exist in the classpath, but the classes that are "
"to be deployed must be explicity, individually, listed in configuration code "
"or in some XML configuration file. Web Beans does support Web Bean "
"definition and configuration via XML, but in the common case where no "
"complex configuration is required, deployment types allow a whole set of Web "
"Beans to be enabled with a single line of XML. Meanwhile, a developer "
"browsing the code can easily identify what deployment scenarios the Web Bean "
"will be used in."
msgstr "이러한 기능을 오늘날의 관리자 구조와 비교하는 것은 흥미로운 일입니다. 다양한 \"경량\"의 컨테이너는 classpath에 있는 클래스의 조건부 배치를 허용하지만, 배치될 클래스는 명시적, 개별적이어하며, 설정 코드나 일부 XML 설정 파일에 나열되어 있어야 합니다. Web Beans는 XML을 통한 Web Bean 정의 및 설정을 지원하지만 복잡한 설정을 필요로 하지 않는 대부분의 경우, 배치 유형은 전체 Web Beans 설정이 단일 XML 행으로 활성화되게 합니다. 동시에, 코드를 검색하는 개발자는 어떤 배치 시나리오를 Web Bean이 사용할 지를 쉽게 인식할 수 있습니다.  "

#. Tag: title
#: injection.xml:284
#, no-c-format
msgid "Example deployment types"
msgstr "배치 유형 예시 "

#. Tag: para
#: injection.xml:286
#, no-c-format
msgid "Deployment types are useful for all kinds of things, here's some examples:"
msgstr "배치 유형은 모든 종류가 유용합니다, 다음에는 일부 예시가 있습니다:       "

#. Tag: para
#: injection.xml:290
#, no-c-format
msgid ""
"<literal>@Mock</literal> and <literal>@Staging</literal> deployment types "
"for testing"
msgstr "테스트 용 <literal>@Mock</literal> 및 <literal>@Staging</literal> 배치 유형 "

#. Tag: para
#: injection.xml:294
#, no-c-format
msgid "<literal>@AustralianTaxLaw</literal> for site-specific Web Beans"
msgstr "특정 사이트 Web Beans 용 <literal>@AustralianTaxLaw</literal>  "

#. Tag: para
#: injection.xml:297
#, no-c-format
msgid ""
"<literal>@SeamFramework</literal>, <literal>@Guice</literal> for third-party "
"frameworks which build on Web Beans"
msgstr "Web Beans에서 작성되는 제삼자 프레임워크 용 <literal>@SeamFramework</literal>, <literal>@Guice</literal> "

#. Tag: para
#: injection.xml:301
#, no-c-format
msgid ""
"<literal>@Standard</literal> for standard Web Beans defined by the Web Beans "
"specification"
msgstr "Web Beans 사양에 의해 정의된 표준 Web Beans 용 <literal>@Standard</literal> "

#. Tag: para
#: injection.xml:306
#, no-c-format
msgid "I'm sure you can think of more applications..."
msgstr "더 많은 애플리케이션을 생각하실 수 있을 것입니다..."

#. Tag: title
#: injection.xml:313
#, no-c-format
msgid "Fixing unsatisfied dependencies"
msgstr "불만족스러운 의존성 수정 "

#. Tag: para
#: injection.xml:315
#, no-c-format
#, fuzzy
msgid ""
"The typesafe resolution algorithm fails when, after considering the binding "
"annotations and and deployment types of all Web Beans that implement the API "
"type of an injection point, the Web Bean manager is unable to identify "
"exactly one Web Bean to inject."
msgstr "타입 안정적 해상도 알고리즘은 "

#. Tag: para
#: injection.xml:320
#, no-c-format
msgid ""
"It's usually easy to fix an <literal>UnsatisfiedDependencyException</"
"literal> or <literal>AmbiguousDependencyException</literal>."
msgstr "<literal>UnsatisfiedDependencyException</literal> 또는 <literal>AmbiguousDependencyException</literal>을 수정하기가 쉽습니다. "

#. Tag: para
#: injection.xml:323
#, no-c-format
msgid ""
"To fix an <literal>UnsatisfiedDependencyException</literal>, simply provide "
"a Web Bean which implements the API type and has the binding types of the "
"injection point &#151; or enable the deployment type of a Web Bean that "
"already implements the API type and has the binding types."
msgstr "<literal>UnsatisfiedDependencyException</literal>을 수정하려면, API 유형을 구현하는 Web Bean을 제공하고 삽입 지점의 바인딩 유형을 갖거나 &#151; 또는 API 유형을 이미 구현하고 있는 Web Bean의 배치 유형을 활성화하고 바인딩 유형을 갖습니다.  "

#. Tag: para
#: injection.xml:328
#, no-c-format
msgid ""
"To fix an <literal>AmbiguousDependencyException</literal>, introduce a "
"binding type to distinguish between the two implementations of the API type, "
"or change the deployment type of one of the implementations so that the Web "
"Bean manager can use deployment type precedence to choose between them. An "
"<literal>AmbiguousDependencyException</literal> can only occur if two Web "
"Beans share a binding type and have exactly the same deployment type."
msgstr ""
"<literal>AmbiguousDependencyException</literal>을 수정하려면, 두 개의 API 유형 구현 사이에서 구별하기 위해 바인딩 유형을 소개하거나 구현 중 하나의 배치 유형을 변경하여 Web Bean 관리자가 이들 사이에서 선택하기 위해 배치 유형 우선 순위를 사용할 수 있습니다. <literal>AmbiguousDependencyException</literal>은 두 개의 Web "
"Beans가 바인딩 유형을 공유하여 동일한 배치 유형을 갖고 있을 때에만 발생할 수 있습니다.  "

#. Tag: para
#: injection.xml:335
#, no-c-format
msgid ""
"There's one more issue you need to be aware of when using dependency "
"injection in Web Beans."
msgstr "Web Beans에서 의존성 삽입을 사용할 때 유의하셔야 할 사항이 한 가지 더 있습니다. "

#. Tag: title
#: injection.xml:341
#, no-c-format
msgid "Client proxies"
msgstr "클라이언트 프록시 "

#. Tag: para
#: injection.xml:343
#, no-c-format
msgid ""
"Clients of an injected Web Bean do not usually hold a direct reference to a "
"Web Bean instance."
msgstr "삽입된 Web Bean 클라이언트는 Web Bean 인스턴스에 직접적인 참조를 유지하지 않습니다. "

#. Tag: para
#: injection.xml:346
#, no-c-format
msgid ""
"Imagine that a Web Bean bound to the application scope held a direct "
"reference to a Web Bean bound to the request scope. The application scoped "
"Web Bean is shared between many different requests. However, each request "
"should see a different instance of the request scoped Web bean!"
msgstr ""

#. Tag: para
#: injection.xml:351
#, no-c-format
msgid ""
"Now imagine that a Web Bean bound to the session scope held a direct "
"reference to a Web Bean bound to the application scope. From time to time, "
"the session context is serialized to disk in order to use memory more "
"efficiently. However, the application scoped Web Bean instance should not be "
"serialized along with the session scoped Web Bean!"
msgstr ""

#. Tag: para
#: injection.xml:357
#, no-c-format
msgid ""
"Therefore, unless a Web Bean has the default scope <literal>@Dependent</"
"literal>, the Web Bean manager must indirect all injected references to the "
"Web Bean through a proxy object. This <emphasis>client proxy</emphasis> is "
"responsible for ensuring that the Web Bean instance that receives a method "
"invocation is the instance that is associated with the current context. The "
"client proxy also allows Web Beans bound to contexts such as the session "
"context to be serialized to disk without recursively serializing other "
"injected Web Beans."
msgstr ""

#. Tag: para
#: injection.xml:365
#, no-c-format
msgid ""
"Unfortunately, due to limitations of the Java language, some Java types "
"cannot be proxied by the Web Bean manager. Therefore, the Web Bean manager "
"throws an <literal>UnproxyableDependencyException</literal> if the type of "
"an injection point cannot be proxied."
msgstr "Java 언어의 한계로 인해, 일부 Java 유형은 Web Bean 관리자에 의해 프록시될 수 없습니다. 따라서, 삽입 지점 유형이 프록시될 수 없을 경우 Web Bean 관리자는 <literal>UnproxyableDependencyException</literal>을 던지게 됩니다.      "

#. Tag: para
#: injection.xml:370
#, no-c-format
msgid "The following Java types cannot be proxied by the Web Bean manager:"
msgstr "다음과 같은 Java 유형은 Web Bean 관리자에 의해 프록시될 수 없습니다:  "

#. Tag: para
#: injection.xml:374
#, no-c-format
msgid ""
"classes which are declared <literal>final</literal> or have a "
"<literal>final</literal> method,"
msgstr "<literal>final</literal>이라고 명시되어 있거나 또는 <literal>final</literal> 방식을 갖는 클래스, "

#. Tag: para
#: injection.xml:378
#, no-c-format
msgid "classes which have no non-private constructor with no parameters, and"
msgstr "매개 변수 없는 비전용 생성자를 갖지 않는 클래스, "

#. Tag: para
#: injection.xml:381
#, no-c-format
msgid "arrays and primitive types."
msgstr "배열 및 기본 유형   "

#. Tag: para
#: injection.xml:385
#, no-c-format
msgid ""
"It's usually very easy to fix an <literal>UnproxyableDependencyException</"
"literal>. Simply add a constructor with no parameters to the injected class, "
"introduce an interface, or change the scope of the injected Web Bean to "
"<literal>@Dependent</literal>."
msgstr "<literal>UnproxyableDependencyException</literal>을 수정하기 쉽습니다. 간단하게 삽입된 클래스에 매개 변수가 없는 생성자를 추가하고, 인터페이스를 소개하거나, 삽입된 Web Bean의 범위를 <literal>@Dependent</literal>로 변경합니다.  "

#. Tag: title
#: injection.xml:392
#, no-c-format
msgid "Obtaining a Web Bean by programatic lookup"
msgstr "프로그램적 lookup에 의해 Web Bean 획득 "

#. Tag: para
#: injection.xml:394
#, no-c-format
msgid ""
"The application may obtain an instance of the interface <literal>Manager</"
"literal> by injection:"
msgstr "애플리케이션은 삽입에 의해 <literal>Manager</literal> 인터페이스의 인스턴스를 획득할 수 있습니다:  "

#. Tag: programlisting
#: injection.xml:397
#, no-c-format
msgid "<![CDATA[@Current Manager manager;]]>"
msgstr "<![CDATA[@Current Manager manager;]]>"

#. Tag: para
#: injection.xml:399
#, no-c-format
msgid ""
"The <literal>Manager</literal> object provides a set of methods for "
"obtaining a Web Bean instance programatically."
msgstr "<literal>Manager</literal> 객체는 프로그램적으로 Web Bean 인스턴스의 획득을 위한 방식 모음을 제공합니다. "

#. Tag: programlisting
#: injection.xml:402
#, no-c-format
msgid ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class);]]>"
msgstr ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class);]]>"

#. Tag: para
#: injection.xml:404
#, no-c-format
msgid ""
"Binding annotations may be specified by subclassing the helper class "
"<literal>AnnotationLiteral</literal>, since it is otherwise difficult to "
"instantiate an annotation type in Java."
msgstr "바인딩 어노테이션은 <literal>AnnotationLiteral</literal> 도우미 클래스를 하부클래스화하여 지정될 수 있으며, 그렇지 않으면 Java에서 어노테이션 유형을 인스턴스화하기 어렵습니다.  "

#. Tag: programlisting
#: injection.xml:408
#, no-c-format
msgid ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class, \n"
"                                               new "
"AnnotationLiteral<CreditCard>(){});]]>"
msgstr ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class, \n"
"                                               new "
"AnnotationLiteral<CreditCard>(){});]]>"

#. Tag: para
#: injection.xml:410
#, no-c-format
msgid ""
"If the binding type has an annotation member, we can't use an anonymous "
"subclass of <literal>AnnotationLiteral</literal> &#151; instead we'll need to "
"create a named subclass:"
msgstr "바인딩 유형이 어노테이션 멤버를 갖을 경우, <literal>AnnotationLiteral</literal>의 임의의 하부클래스를 사용할 수 없습니다 &#151; 대신 named 하부 클래스를 생성해야 합니다:  "

#. Tag: programlisting
#: injection.xml:413
#, no-c-format
msgid ""
"<![CDATA[abstract class CreditCardBinding \n"
"    extends AnnotationLiteral<CreditCard> \n"
"    implements CreditCard {}]]>"
msgstr ""
"<![CDATA[abstract class CreditCardBinding \n"
"    extends AnnotationLiteral<CreditCard> \n"
"    implements CreditCard {}]]>"

#. Tag: programlisting
#: injection.xml:415
#, no-c-format
msgid ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class, \n"
"                                               new CreditCardBinding() { \n"
"                                                   public void value() "
"{ return paymentType; } \n"
"                                               } );]]>"
msgstr ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class, \n"
"                                               new CreditCardBinding() { \n"
"                                                   public void value() "
"{ return paymentType; } \n"
"                                               } );]]>"

#. Tag: title
#: injection.xml:419
#, no-c-format
msgid ""
"Lifecycle callbacks, <literal>@Resource</literal>, <literal>@EJB</literal> "
"and <literal>@PersistenceContext</literal>"
msgstr "수명 주기 콜백, <literal>@Resource</literal>, <literal>@EJB</literal> 및 <literal>@PersistenceContext</literal> "

#. Tag: para
#: injection.xml:422
#, no-c-format
msgid ""
"Enterprise Web Beans support all the lifecycle callbacks defined by the EJB "
"specification: <literal>@PostConstruct</literal>, <literal>@PreDestroy</"
"literal>, <literal>@PrePassivate</literal> and <literal>@PostActivate</"
"literal>."
msgstr ""
"Enterprise Web Beans는 EJB 사양에 의해 정의된 모든 수명 주기 콜백을 지원합니다: <literal>@PostConstruct</literal>, <literal>@PreDestroy</"
"literal>, <literal>@PrePassivate</literal> 및 <literal>@PostActivate</"
"literal>. "

#. Tag: para
#: injection.xml:426
#, no-c-format
msgid ""
"Simple Web Beans support only the <literal>@PostConstruct</literal> and "
"<literal>@PreDestroy</literal> callbacks."
msgstr ""
"Simple Web Beans는 <literal>@PostConstruct</literal> 및 "
"<literal>@PreDestroy</literal> 콜백 기능만을 지원합니다.  "

#. Tag: para
#: injection.xml:429
#, no-c-format
msgid ""
"Both enterprise and simple Web Beans support the use of <literal>@Resource</"
"literal>, <literal>@EJB</literal> and <literal>@PersistenceContext</literal> "
"for injection of Java EE resources, EJBs and JPA persistence contexts, "
"respectively. Simple Web Beans do not support the use of "
"<literal>@PersistenceContext(type=EXTENDED)</literal>."
msgstr "enterprise 및 simple Web Beans는 Java EE 리소스 삽입, EJB 및 JPA 영구적 컨텍스에 대해 <literal>@Resource</literal>, <literal>@EJB</literal> 및 <literal>@PersistenceContext</literal>의 사용을 각각 지원합니다. Simple Web Beans는 <literal>@PersistenceContext(type=EXTENDED)</literal>의 사용을 지원하지 않습니다.  "

#. Tag: para
#: injection.xml:434
#, no-c-format
msgid ""
"The <literal>@PostConstruct</literal> callback always occurs after all "
"dependencies have been injected."
msgstr "<literal>@PostConstruct</literal> 콜백은 모든 의존성이 삽입된 후에 나타납니다. "

#. Tag: title
#: injection.xml:440
#, no-c-format
msgid "The <literal>InjectionPoint</literal> object"
msgstr "<literal>InjectionPoint</literal> 객체 "

#. Tag: para
#: injection.xml:442
#, no-c-format
msgid ""
"There are certain kinds of dependent objects &#151; Web Beans with scope "
"<literal>@Dependent</literal> &#151; that need to know something about the "
"object or injection point into which they are injected in order to be able "
"to do what they do. For example:"
msgstr "특정 종류의 의존성 객체가 있습니다 &#151; <literal>@Dependent</literal> 범위와 함께 Web Beans &#151; 객체 또는 이는 실행 가능하게 되기 위해 삽입되는 삽입 지점에 관해 알아야 합니다. 예:  "

#. Tag: para
#: injection.xml:448
#, no-c-format
msgid ""
"The log category for a <literal>Logger</literal> depends upon the class of "
"the object that owns it."
msgstr "<literal>Logger</literal> 용 로그 카테고리는 소유하고 있는 객체 클래스에 의존합니다.  "

#. Tag: para
#: injection.xml:452
#, no-c-format
msgid ""
"Injection of a HTTP parameter or header value depends upon what parameter or "
"header name was specified at the injection point."
msgstr "헤더 값이나 HTTP 매개 변수 삽입은 삽입 지점에서 어떤 매개 변수 또는 헤더 이름을 지정하였는가에 의존합니다. "

#. Tag: para
#: injection.xml:456
#, no-c-format
msgid ""
"Injection of the result of an EL expression evaluation depends upon the "
"expression that was specified at the injection point."
msgstr "EL 표현식 평가 (expression evaluation) 평가의 삽입은 삽입 지점에서 지정된 표현식에 의존합니다.  "

#. Tag: para
#: injection.xml:461
#, no-c-format
msgid ""
"A Web Bean with scope <literal>@Dependent</literal> may inject an instance "
"of <literal>InjectionPoint</literal> and access metadata relating to the "
"injection point to which it belongs."
msgstr "<literal>@Dependent</literal> 범위와 함께 Web Bean은 <literal>InjectionPoint</literal> 인스턴스를 삽입하고 해당 삽입 지점에 관련된 메타데이트를 액세스합니다. "

#. Tag: para
#: injection.xml:465
#, no-c-format
msgid ""
"Let's look at an example. The following code is verbose, and vulnerable to "
"refactoring problems:"
msgstr "다음 예를 살펴봅시다. 다음과 같은 코드는 프로그램을 리팩토링하기에 취약하고 장황합니다: "

#. Tag: programlisting
#: injection.xml:468
#, no-c-format
msgid "<![CDATA[Logger log = Logger.getLogger(MyClass.class.getName());]]>"
msgstr "<![CDATA[Logger log = Logger.getLogger(MyClass.class.getName());]]>"

#. Tag: para
#: injection.xml:470
#, no-c-format
msgid ""
"This clever little producer method lets you inject a JDK <literal>Logger</"
"literal> without explicitly specifying the log category:"
msgstr "이와 같이 현명한 생산자 방식은 로그 범주를 명시적으로 지정하지 않고 JDK <literal>Logger</literal>를 삽입하게 합니다:  "

#. Tag: programlisting
#: injection.xml:473
#, no-c-format
msgid ""
"<![CDATA[class LogFactory {\n"
"\n"
"   @Produces Logger createLogger(InjectionPoint injectionPoint) { \n"
"      return Logger.getLogger(injectionPoint.getMember().getDeclaringClass()."
"getName()); \n"
"   }\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[class LogFactory {\n"
"\n"
"   @Produces Logger createLogger(InjectionPoint injectionPoint) { \n"
"      return Logger.getLogger(injectionPoint.getMember().getDeclaringClass()."
"getName()); \n"
"   }\n"
"\n"
"}]]>"

#. Tag: para
#: injection.xml:475
#, no-c-format
msgid "We can now write:"
msgstr "이제 다음을 작성할 수 있습니다:  "

#. Tag: programlisting
#: injection.xml:477
#, no-c-format
msgid "<![CDATA[@Current Logger log;]]>"
msgstr "<![CDATA[@Current Logger log;]]>"

#. Tag: para
#: injection.xml:479
#, no-c-format
msgid ""
"Not convinced? Then here's a second example. To inject HTTP parameters, we "
"need to define a binding type:"
msgstr "확신하시지 않습니까? 그러시다면 여기에 두 번째 예제가 있습니다. HTTP 매개 변수를 삽입하려면, 바인딩 유형을 정의해야 합니다:  "

#. Tag: programlisting
#: injection.xml:482
#, no-c-format
msgid ""
"<![CDATA[@BindingType\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"public @interface HttpParam {\n"
"   @NonBinding public String value();\n"
"}]]>"
msgstr ""
"<![CDATA[@BindingType\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"public @interface HttpParam {\n"
"   @NonBinding public String value();\n"
"}]]>"

#. Tag: para
#: injection.xml:484
#, no-c-format
msgid "We would use this binding type at injection points as follows:"
msgstr "다음과 같이 삽입 지점에서 이러한 바인딩 유형을 사용할 수 있습니다:  "

#. Tag: programlisting
#: injection.xml:486
#, no-c-format
msgid ""
"<![CDATA[@HttpParam(\"username\") String username;\n"
"@HttpParam(\"password\") String password;]]>"
msgstr ""
"<![CDATA[@HttpParam(\"username\") String username;\n"
"@HttpParam(\"password\") String password;]]>"

#. Tag: para
#: injection.xml:488
#, no-c-format
msgid "The following producer method does the work:"
msgstr "다음의 생산자 방식은 다음과 같이 작업합니다:  "

#. Tag: programlisting
#: injection.xml:490
#, no-c-format
msgid ""
"<![CDATA[class HttpParams\n"
"\n"
"   @Produces @HttpParam(\"\")\n"
"   String getParamValue(ServletRequest request, InjectionPoint ip) {\n"
"      return request.getParameter(ip.getAnnotation(HttpParam.class).value"
"());\n"
"   }\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[class HttpParams\n"
"\n"
"   @Produces @HttpParam(\"\")\n"
"   String getParamValue(ServletRequest request, InjectionPoint ip) {\n"
"      return request.getParameter(ip.getAnnotation(HttpParam.class).value"
"());\n"
"   }\n"
"\n"
"}]]>"

#. Tag: para
#: injection.xml:492
#, no-c-format
msgid ""
"(Note that the <literal>value()</literal> member of the <literal>HttpParam</"
"literal> annotation is ignored by the Web Bean manager since it is annotated "
"<literal>@NonBinding.</literal>)"
msgstr "<literal>HttpParam</literal> 어노테이션의 <literal>value()</literal> 멤버는<literal>@NonBinding.</literal>을 어노테이션하므로 Web Bean 관리자에 의해 무시됨에 유의하시기 바랍니다.   "

#. Tag: para
#: injection.xml:495
#, no-c-format
msgid ""
"The Web Bean manager provides a built-in Web Bean that implements the "
"<literal>InjectionPoint</literal> interface:"
msgstr "Web Bean 관리자는 <literal>InjectionPoint</literal> 인터페이스를 구현하는 내장된 Web Bean을 제공합니다:  "

#. Tag: programlisting
#: injection.xml:498
#, no-c-format
msgid ""
"<![CDATA[public interface InjectionPoint { \n"
"   public Object getInstance(); \n"
"   public Bean<?> getBean(); \n"
"   public Member getMember(): \n"
"   public <T extends Annotation> T getAnnotation(Class<T> annotation); \n"
"   public Set<T extends Annotation> getAnnotations(); \n"
"}]]>"
msgstr ""
"<![CDATA[public interface InjectionPoint { \n"
"   public Object getInstance(); \n"
"   public Bean<?> getBean(); \n"
"   public Member getMember(): \n"
"   public <T extends Annotation> T getAnnotation(Class<T> annotation); \n"
"   public Set<T extends Annotation> getAnnotations(); \n"
"}]]>"

