# translation of ri-spi.po to Korean
# Language ko-KR translations for Introduction_to_Web_Beans package.
#
# Automatically generated, 2009.
# Eunju Kim <eukim@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: ri-spi\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-03-08 15:53+0000\n"
"PO-Revision-Date: 2009-01-19 13:32+1000\n"
"Last-Translator: Eunju Kim <eukim@redhat.com>\n"
"Language-Team: Korean <ko@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"
"Plural-Forms:  nplurals=2; plural=(n!=1);\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"

#. Tag: title
#: ri-spi.xml:4
#, no-c-format
msgid "Integrating the Web Beans RI into other environments"
msgstr "Web Beans RI를 다른 환경으로 통합 "

#. Tag: para
#: ri-spi.xml:6
#, no-c-format
msgid ""
"Currently the Web Beans RI only runs in JBoss AS 5; integrating the RI into "
"other EE environments (for example another application server like "
"Glassfish), into a servlet container (like Tomcat), or with an Embedded "
"EJB3.1 implementation is fairly easy. In this Appendix we will briefly "
"discuss the steps needed."
msgstr ""
"현재 Web Beans RI는 JBoss AS 5에서만 실행됩니다; RI를 기타 다른 EE 환경 (예"
"를 들어 Glassfish와 같은 다른 애플리케이션 서버)으로 통합, 또는 servlet 컨테"
"이너로 통합 (예: Tomcat), 또는 내장된 EJB3.1 구현과 통합하는 것은 쉽습니다. "
"Appendix에서 필요한 절차에 대해 간략하게 살펴보겠습니다.  "

#. Tag: para
#: ri-spi.xml:15
#, no-c-format
msgid ""
"It should be possible to run Web Beans in an SE environment, but you'll to "
"do more work, adding your own contexts and lifecycle. The Web Beans RI "
"currently doesn't expose lifecycle extension points, so you would have to "
"code directly against Web Beans RI classes."
msgstr ""
"SE 환경에서 Web Beans를 실행할 수 있어야 하지만, 자체적 컨텍스트 및 수명 주"
"기 추가와 같은 더 많은 작업을 해야 합니다. 현재 Web Beans RI는 수명 확장 지점"
"을 나타내지 않고 있으므로, Web Beans RI 클래스에 대해 직접 코드화해야 합니"
"다. "

#. Tag: title
#: ri-spi.xml:24
#, no-c-format
msgid "The Web Beans RI SPI"
msgstr "Web Beans RI SPI "

#. Tag: para
#: ri-spi.xml:26
#, no-c-format
msgid ""
"The Web Beans SPI is located in <literal>webbeans-ri-spi</literal> module, "
"and packaged as <literal>webbeans-ri-spi.jar</literal>. Some SPIs are "
"optional, if you need to override the default behavior, others are required."
msgstr ""
"Web Beans SPI는 <literal>webbeans-ri-spi</literal> 모듈에 위치하고 있으며 "
"<literal>webbeans-ri-spi.jar</literal>로 패키징되어 있습니다. 일부 SPI는 옵"
"션 사항이며, 기본값 동작을 덮어쓰기해야할 경우, 다른 사항이 필요합니다. "

#. Tag: para
#: ri-spi.xml:33
#, no-c-format
msgid ""
"All interfaces in the SPI support the decorator pattern and provide a "
"<literal>Forwarding</literal> class."
msgstr ""
"SPI에 있는 모든 인터페이스는 데코레이터 패턴을 지원하고 <literal>Forwarding</"
"literal> 클래스를 제공합니다.  "

#. Tag: title
#: ri-spi.xml:39
#, no-c-format
msgid "Web Bean Discovery"
msgstr "Web Bean 검색 "

#. Tag: programlisting
#: ri-spi.xml:41
#, no-c-format
msgid ""
"<![CDATA[public interface WebBeanDiscovery {\n"
"   /**\n"
"    * Gets list of all classes in classpath archives with web-beans.xml "
"files\n"
"    * \n"
"    * @return An iterable over the classes \n"
"    */\n"
"   public Iterable<Class<?>> discoverWebBeanClasses();\n"
"   \n"
"   /**\n"
"    * Gets a list of all web-beans.xml files in the app classpath\n"
"    * \n"
"    * @return An iterable over the web-beans.xml files \n"
"    */\n"
"   public Iterable<URL> discoverWebBeansXml();\n"
"   \n"
"}]]>"
msgstr ""
"<![CDATA[public interface WebBeanDiscovery {\n"
"   /**\n"
"    * Gets list of all classes in classpath archives with web-beans.xml "
"files\n"
"    * \n"
"    * @return An iterable over the classes \n"
"    */\n"
"   public Iterable<Class<?>> discoverWebBeanClasses();\n"
"   \n"
"   /**\n"
"    * Gets a list of all web-beans.xml files in the app classpath\n"
"    * \n"
"    * @return An iterable over the web-beans.xml files \n"
"    */\n"
"   public Iterable<URL> discoverWebBeansXml();\n"
"   \n"
"}]]>"

#. Tag: para
#: ri-spi.xml:43
#, no-c-format
msgid ""
"The discovery of Web Bean classes and <literal>web-bean.xml</literal> files "
"is self-explanatory (the algorithm is described in Section 11.1 of the JSR-"
"299 specification, and isn't repeated here)."
msgstr ""
"Web Bean 클래스 및 <literal>web-bean.xml</literal> 파일 검색은 쉽게 알 수 있"
"습니다 (알고리즘은 JSR-299 사양 11.1장에 설명되어 있으므로 여기서 다시 설명하"
"지 않습니다).  "

#. Tag: title
#: ri-spi.xml:52
#, no-c-format
msgid "EJB Discovery"
msgstr "EJB 검색  "

#. Tag: para
#: ri-spi.xml:54
#, no-c-format
msgid ""
"The Web Beans RI also delegates EJB3 bean discovery to the container so that "
"it doesn't have to scan for EJB3 annotations or parse <literal>ejb-jar.xml</"
"literal>. For each EJB in the application an EJBDescriptor should be "
"discovered:"
msgstr ""
"Web Beans RI는 컨테이너로 EJB3 bean 검색을 위임하므로 EJB3 어노테이션을 검색"
"하거나 <literal>ejb-jar.xml</literal>을 파싱할 필요가 없습니다. 애플리케이션"
"에 있는 각각의 EJB의 경우 EJBDescriptor를 검색해야 합니다: "

#. Tag: programlisting
#: ri-spi.xml:61
#, no-c-format
msgid ""
"<![CDATA[public interface EjbDiscovery\n"
"{\n"
"   public static final String PROPERTY_NAME = EjbDiscovery.class.getName();\n"
"   \n"
"   /**\n"
"    * Gets a descriptor for each EJB in the application\n"
"    * \n"
"    * @return The bean class to descriptor map \n"
"    */\n"
"   public Iterable<EjbDescriptor<?>> discoverEjbs();\n"
"   \n"
"}]]>"
msgstr ""
"<![CDATA[public interface EjbDiscovery\n"
"{\n"
"   public static final String PROPERTY_NAME = EjbDiscovery.class.getName();\n"
"   \n"
"   /**\n"
"    * Gets a descriptor for each EJB in the application\n"
"    * \n"
"    * @return The bean class to descriptor map \n"
"    */\n"
"   public Iterable<EjbDescriptor<?>> discoverEjbs();\n"
"   \n"
"}]]>"

#. Tag: programlisting
#: ri-spi.xml:63
#, no-c-format
msgid ""
"<![CDATA[public interface EjbDescriptor<T> {\n"
"   \n"
"   /**\n"
"    * Gets the EJB type\n"
"    * \n"
"    * @return The EJB Bean class\n"
"    */\n"
"   public Class<T> getType();\n"
"\n"
"   /**\n"
"    * Gets the local business interfaces of the EJB\n"
"    * \n"
"    * @return An iterator over the local business interfaces\n"
"    */\n"
"   public Iterable<BusinessInterfaceDescriptor<?>> getLocalBusinessInterfaces"
"();\n"
"   \n"
"   /**\n"
"    * Gets the remote business interfaces of the EJB\n"
"    * \n"
"    * @return An iterator over the remote business interfaces\n"
"    */\n"
"   public Iterable<BusinessInterfaceDescriptor<?>> "
"getRemoteBusinessInterfaces();\n"
"   \n"
"   /**\n"
"    * Get the remove methods of the EJB\n"
"    * \n"
"    * @return An iterator over the remove methods\n"
"    */\n"
"   public Iterable<Method> getRemoveMethods();\n"
"\n"
"   /**\n"
"    * Indicates if the bean is stateless\n"
"    * \n"
"    * @return True if stateless, false otherwise\n"
"    */\n"
"   public boolean isStateless();\n"
"\n"
"   /**\n"
"    * Indicates if the bean is a EJB 3.1 Singleton\n"
"    * \n"
"    * @return True if the bean is a singleton, false otherwise\n"
"    */\n"
"   public boolean isSingleton();\n"
"\n"
"   /**\n"
"    * Indicates if the EJB is stateful\n"
"    * \n"
"    * @return True if the bean is stateful, false otherwise\n"
"    */\n"
"   public boolean isStateful();\n"
"\n"
"   /**\n"
"    * Indicates if the EJB is and MDB\n"
"    * \n"
"    * @return True if the bean is an MDB, false otherwise\n"
"    */\n"
"   public boolean isMessageDriven();\n"
"\n"
"   /**\n"
"    * Gets the EJB name\n"
"    * \n"
"    * @return The name\n"
"    */\n"
"   public String getEjbName();\n"
"   \n"
"   \n"
"}]]>"
msgstr ""
"<![CDATA[public interface EjbDescriptor<T> {\n"
"   \n"
"   /**\n"
"    * Gets the EJB type\n"
"    * \n"
"    * @return The EJB Bean class\n"
"    */\n"
"   public Class<T> getType();\n"
"\n"
"   /**\n"
"    * Gets the local business interfaces of the EJB\n"
"    * \n"
"    * @return An iterator over the local business interfaces\n"
"    */\n"
"   public Iterable<BusinessInterfaceDescriptor<?>> getLocalBusinessInterfaces"
"();\n"
"   \n"
"   /**\n"
"    * Gets the remote business interfaces of the EJB\n"
"    * \n"
"    * @return An iterator over the remote business interfaces\n"
"    */\n"
"   public Iterable<BusinessInterfaceDescriptor<?>> "
"getRemoteBusinessInterfaces();\n"
"   \n"
"   /**\n"
"    * Get the remove methods of the EJB\n"
"    * \n"
"    * @return An iterator over the remove methods\n"
"    */\n"
"   public Iterable<Method> getRemoveMethods();\n"
"\n"
"   /**\n"
"    * Indicates if the bean is stateless\n"
"    * \n"
"    * @return True if stateless, false otherwise\n"
"    */\n"
"   public boolean isStateless();\n"
"\n"
"   /**\n"
"    * Indicates if the bean is a EJB 3.1 Singleton\n"
"    * \n"
"    * @return True if the bean is a singleton, false otherwise\n"
"    */\n"
"   public boolean isSingleton();\n"
"\n"
"   /**\n"
"    * Indicates if the EJB is stateful\n"
"    * \n"
"    * @return True if the bean is stateful, false otherwise\n"
"    */\n"
"   public boolean isStateful();\n"
"\n"
"   /**\n"
"    * Indicates if the EJB is and MDB\n"
"    * \n"
"    * @return True if the bean is an MDB, false otherwise\n"
"    */\n"
"   public boolean isMessageDriven();\n"
"\n"
"   /**\n"
"    * Gets the EJB name\n"
"    * \n"
"    * @return The name\n"
"    */\n"
"   public String getEjbName();\n"
"   \n"
"   \n"
"}]]>"

#. Tag: para
#: ri-spi.xml:65
#, no-c-format
msgid ""
"The <literal>EjbDescriptor</literal> is fairly self-explanatory, and should "
"return the relevant metadata as defined in the EJB specification. In "
"addition to these two interfaces, there is "
"<literal>BusinessInterfaceDescriptor</literal> which represents a local "
"business interface (encapsulating the interface class and jndi name used to "
"look up an instance of the EJB)."
msgstr ""
"<literal>EjbDescriptor</literal>는 쉽게 알 수 있어야 하며 EJB 사양에 정의되"
"어 있음으로 관련된 메타데이터를 반환해야 합니다. 이러한 두 가지 인터페이스에 "
"더하여, 로컬 비지니스 인터페이스를 나타내는 "
"<literal>BusinessInterfaceDescriptor</literal>가 있습니다. (EJB 인스턴스를 검"
"색하는데 사용되는 인터페이스 클래스 및 jndi 이름을 캡슐화)  "

#. Tag: title
#: ri-spi.xml:77
#, no-c-format
msgid ""
"<literal>@EJB</literal>, <literal>@PersistenceContext</literal> and "
"<literal>@Resource</literal> resolution"
msgstr ""

#. Tag: para
#: ri-spi.xml:79
#, no-c-format
msgid ""
"The resolution of <literal>@EJB</literal>, <literal>@PersistenceContext</"
"literal> and <literal>@Resource</literal> is delegated to the container. You "
"must provide an implementation of <literal>org.jboss.webbeans.ejb.spi."
"EjbResolver</literal> which provides these operations. Web Beans passes in "
"the <literal>javax.inject.manager.InjectionPoint</literal> the resolution is "
"for, as well as the <literal>NamingContext</literal> in use for each "
"resolution request."
msgstr ""

#. Tag: title
#: ri-spi.xml:104
#, no-c-format
msgid "The application context"
msgstr ""

#. Tag: para
#: ri-spi.xml:106
#, no-c-format
msgid ""
"Web Beans expects the Application Server or other container to provide the "
"storage for each application's context. The <literal>org.jboss.webbeans."
"context.api.BeanStore</literal> should be implemented to provide an "
"application scoped storage. You may find <literal>org.jboss.webbeans.context."
"api.helpers.ConcurrentHashMapBeanStore</literal> useful."
msgstr ""

#. Tag: title
#: ri-spi.xml:119
#, no-c-format
msgid "Bootstrap and shutdown"
msgstr ""

#. Tag: para
#: ri-spi.xml:120
#, no-c-format
msgid ""
"The <literal>org.jboss.webbeans.bootstrap.api.Bootstrap</literal> interface "
"defines the bootstrap for Web Beans. To boot Web Beans, you must obtain an "
"instance of <literal>org.jboss.webbeans.bootstrap.WebBeansBootstrap</"
"literal> (which implements <literal>Boostrap</literal>), tell it about the "
"SPIs in use, and then request the container start."
msgstr ""

#. Tag: para
#: ri-spi.xml:129
#, no-c-format
msgid ""
"The bootstrap is split into phases, bootstrap initialization and bootstrap. "
"Initialization will create a manager, and add the standard (specification "
"defined) contexts. Bootstrap will discover EJBs, classes and XML; add beans "
"defined using annotations; add beans defined using XML; and validate all "
"beans."
msgstr ""

#. Tag: para
#: ri-spi.xml:137
#, no-c-format
msgid ""
"To initialize the bootstrap you call <literal>Bootstrap.initialize()</"
"literal>. Before calling <literal>initialize()</literal> you must have "
"called <literal>Bootstrap.setEjbResolver()</literal>. If you are not using "
"the built in <literal>DefaultNamingContext</literal> or the built in "
"<literal>DefaultResourceLoader</literal> you must set these before calling "
"<literal>initialize()</literal>."
msgstr ""

#. Tag: para
#: ri-spi.xml:147
#, no-c-format
msgid ""
"Having called <literal>initialize()</literal>, the <literal>Manager</"
"literal> can be obtained by calling <literal>Bootstrap.getManager()</"
"literal>."
msgstr ""

#. Tag: para
#: ri-spi.xml:153
#, no-c-format
msgid ""
"To boot the container you call <literal>Bootstrap.boot()</literal>. Before "
"calling <literal>boot()</literal> you must have called <literal>Bootstrap."
"setWebBeanDiscovery()</literal>, <literal>Bootstrap.setEjbDiscovery()</"
"literal> and <literal>Bootstrap.setApplicationContext()</literal>."
msgstr ""

#. Tag: para
#: ri-spi.xml:161
#, no-c-format
msgid ""
"To shutdown the container you call <literal>Bootstrap.shutdown()</literal>. "
"This allows the container to perform any cleanup operations needed."
msgstr ""

#. Tag: title
#: ri-spi.xml:170
#, no-c-format
msgid "JNDI"
msgstr "JNDI"

#. Tag: para
#: ri-spi.xml:172
#, fuzzy, no-c-format
msgid ""
"The Web Beans RI implements JNDI binding and lookup according to standards, "
"however you may want to alter the binding and lookup (for example in an "
"environment where JNDI isn't available). To do this, implement <literal>org."
"jboss.webbeans.resources.spi.NamingContext</literal>:"
msgstr ""
"Web Beans RI는 기준에 따라 JNDI 바인딩 및 lookup을 구현하지만, 바인딩 및 "
"lookup을 변경하고자 하실 수 있습니다 (예를 들어 JNDI를 사용할 수 없는 환경에"
"서). 이를 위해 <literal>org.jboss.webbeans.spi.resources.NamingContext</"
"literal>를구현합니다:       "

#. Tag: programlisting
#: ri-spi.xml:180
#, no-c-format
msgid ""
"<![CDATA[public interface NamingContext extends Serializable {\n"
"   \n"
"   /**\n"
"    * Typed JNDI lookup\n"
"    * \n"
"    * @param <T> The type\n"
"    * @param name The JNDI name\n"
"    * @param expectedType The expected type\n"
"    * @return The object\n"
"    */\n"
"   public <T> T lookup(String name, Class<? extends T> expectedType);\n"
"\n"
"   /**\n"
"    * Binds an item to JNDI\n"
"    * \n"
"    * @param name The key to bind under\n"
"    * @param value The item to bind\n"
"    */\n"
"   public void bind(String name, Object value);\n"
"   \n"
"}]]>"
msgstr ""
"<![CDATA[public interface NamingContext extends Serializable {\n"
"   \n"
"   /**\n"
"    * Typed JNDI lookup\n"
"    * \n"
"    * @param <T> The type\n"
"    * @param name The JNDI name\n"
"    * @param expectedType The expected type\n"
"    * @return The object\n"
"    */\n"
"   public <T> T lookup(String name, Class<? extends T> expectedType);\n"
"\n"
"   /**\n"
"    * Binds an item to JNDI\n"
"    * \n"
"    * @param name The key to bind under\n"
"    * @param value The item to bind\n"
"    */\n"
"   public void bind(String name, Object value);\n"
"   \n"
"}]]>"

#. Tag: title
#: ri-spi.xml:185
#, no-c-format
msgid "Resource loading"
msgstr "리소스 불러오기 "

#. Tag: para
#: ri-spi.xml:187
#, no-c-format
msgid ""
"The Web Beans RI needs to load classes and resources from the classpath at "
"various times. By default, they are loaded from the same classloader that "
"was used to load the RI, however this may not be correct for some "
"environments. If this is case, you can implement <literal>org.jboss.webbeans."
"spi.ResourceLoader</literal>:"
msgstr ""
"Web Beans RI는 여러번 classpath에서 클래스 및 리소스를 불러와야 합니다. 기본"
"값으로 RI를 불러오기 위해 사용되었던 동일한 classloader에서 로딩되지만, 일부 "
"환경에서는 작동하지 않을 수 도 있습니다. 이러한 경우, <literal>org.jboss."
"webbeans.spi.ResourceLoader</literal>를 구현할 수 있습니다:  "

#. Tag: programlisting
#: ri-spi.xml:195
#, no-c-format
msgid ""
"<![CDATA[\n"
"         public interface ResourceLoader {\n"
"    \n"
"   /**\n"
"    * Creates a class from a given FQCN\n"
"    * \n"
"    * @param name The name of the clsas\n"
"    * @return The class\n"
"    */\n"
"   public Class<?> classForName(String name);\n"
"   \n"
"   /**\n"
"    * Gets a resource as a URL by name\n"
"    * \n"
"    * @param name The name of the resource\n"
"    * @return An URL to the resource\n"
"    */\n"
"   public URL getResource(String name);\n"
"   \n"
"   /**\n"
"    * Gets resources as URLs by name\n"
"    * \n"
"    * @param name The name of the resource\n"
"    * @return An iterable reference to the URLS\n"
"    */\n"
"   public Iterable<URL> getResources(String name);\n"
"   \n"
"}\n"
"         ]]>"
msgstr ""
"<![CDATA[\n"
"         public interface ResourceLoader {\n"
"    \n"
"   /**\n"
"    * Creates a class from a given FQCN\n"
"    * \n"
"    * @param name The name of the clsas\n"
"    * @return The class\n"
"    */\n"
"   public Class<?> classForName(String name);\n"
"   \n"
"   /**\n"
"    * Gets a resource as a URL by name\n"
"    * \n"
"    * @param name The name of the resource\n"
"    * @return An URL to the resource\n"
"    */\n"
"   public URL getResource(String name);\n"
"   \n"
"   /**\n"
"    * Gets resources as URLs by name\n"
"    * \n"
"    * @param name The name of the resource\n"
"    * @return An iterable reference to the URLS\n"
"    */\n"
"   public Iterable<URL> getResources(String name);\n"
"   \n"
"}\n"
"         ]]>"

#. Tag: title
#: ri-spi.xml:200
#, fuzzy, no-c-format
msgid "Servlet injection"
msgstr "Servlet 청취자 "

#. Tag: para
#: ri-spi.xml:202
#, no-c-format
msgid ""
"Java EE / Servlet does not provide any hooks which can be used to provide "
"injection into Servlets, so Web Beans provides an API to allow the container "
"to request JSR-299 injection for a Servlet."
msgstr ""

#. Tag: para
#: ri-spi.xml:208
#, no-c-format
msgid ""
"To be compliant with JSR-299, the container should request servlet injection "
"for each newly instantiated servlet after the constructor returns and before "
"the servlet is placed into service."
msgstr ""

#. Tag: para
#: ri-spi.xml:214
#, no-c-format
msgid ""
"To perform injection on a servlet call <literal>WebBeansManager.injectServlet"
"()</literal>. The manager can be obtained from <literal>Bootstrap.getManager"
"()</literal>."
msgstr ""

#. Tag: title
#: ri-spi.xml:225
#, no-c-format
msgid "The contract with the container"
msgstr "컨테이너와 계약 "

#. Tag: para
#: ri-spi.xml:227
#, no-c-format
msgid ""
"There are a number of requirements that the Web Beans RI places on the "
"container for correct functioning that fall outside implementation of APIs"
msgstr ""
"API의 외부 구현에서의 올바른 기능을 실행하게 하기 위해 Web Beans RI이 컨테이"
"너에 위치하게 해야 할 여러 요구 사항이 있습니다 "

#. Tag: term
#: ri-spi.xml:235
#, no-c-format
msgid "Classloader isolation"
msgstr "Classloader 분리 "

#. Tag: para
#: ri-spi.xml:239
#, no-c-format
msgid ""
"If you are integrating the Web Beans RI into an environment that supports "
"deployment of multiple applications, you must enable, automatically, or "
"through user configuation, classloader isolation for each Web Beans "
"application."
msgstr ""
"Web Beans RI를 다수의 애플리케이션의 운용을 지원하는 환경으로 통합할 경우, 각"
"각의 Web Beans 애플리케이션에 대한 클래스로더 분리를 자동으로 또는 사용자 설"
"정을 통해 반드시 활성화해야 합니다.   "

#. Tag: term
#: ri-spi.xml:248
#, fuzzy, no-c-format
msgid "Servlet listener and filters"
msgstr "Servlet 청취자 "

#. Tag: para
#: ri-spi.xml:252
#, no-c-format
msgid ""
"If you are integrating the Web Beans into a Servlet environment you must "
"register <literal>org.jboss.webbeans.servlet.WebBeansListener</literal> as a "
"Servlet listener, either automatically, or through user configuration, for "
"each Web Beans application which uses Servlet."
msgstr ""
"Web Beans를 Servlet 환경으로 통합할 경우, Servlet을 사용하는 각각의 Web "
"Beans 애플리케이션에 대해 자동으로 또는 사용자 설정을 통해 <literal>org."
"jboss.webbeans.servlet.WebBeansListener</literal>를 Servlet 청취자로 등록해"
"야 합니다.  "

#. Tag: para
#: ri-spi.xml:261
#, fuzzy, no-c-format
msgid ""
"If you are integrating the Web Beans into a JSF environment you must "
"register <literal>org.jboss.webbeans.servlet.ConversationPropagationFilter</"
"literal> as a Servlet listener, either automatically, or through user "
"configuration, for each Web Beans application which uses JSF. This filter "
"can be registered for all Servlet deployment safely."
msgstr ""
"Web Beans를 Servlet 환경으로 통합할 경우, Servlet을 사용하는 각각의 Web "
"Beans 애플리케이션에 대해 자동으로 또는 사용자 설정을 통해 <literal>org."
"jboss.webbeans.servlet.WebBeansListener</literal>를 Servlet 청취자로 등록해"
"야 합니다.  "

#. Tag: term
#: ri-spi.xml:273
#, no-c-format
msgid "Session Bean Interceptor"
msgstr "Session Bean 인터셉터 "

#. Tag: para
#: ri-spi.xml:277
#, no-c-format
msgid ""
"If you are integrating the Web Beans into an EJB environment you must "
"register <literal>org.jboss.webbeans.ejb.SessionBeanInterceptor</literal> as "
"a EJB interceptor for all EJBs in the application, either automatically, or "
"through user configuration, for each Web Beans application which uses "
"enterprise beans."
msgstr ""
"Web Beans를 EJB 환경으로 통합하고자 할 경우 엔터프라이즈 beans를 사용하는 각"
"각의 Web Beans 애플리케이션 용으로 모든 EJB 애플리케이션에 대해 EJB 인터셉터"
"로서 <literal>org.jboss.webbeans.ejb.SessionBeanInterceptor</literal>를 자동"
"으로 또는 사용자 설정을 통해 등록해야 합니다.  "

#. Tag: para
#: ri-spi.xml:287
#, no-c-format
msgid ""
"You must register the <literal>SessionBeanInterceptor</literal> as the inner "
"most interceptor in the stack for all EJBs."
msgstr ""

#. Tag: term
#: ri-spi.xml:295
#, no-c-format
msgid "The <literal>webbeans-ri.jar</literal>"
msgstr "<literal>webbeans-ri.jar</literal> "

#. Tag: para
#: ri-spi.xml:299
#, no-c-format
msgid ""
"If you are integrating the Web Beans into an environment that supports "
"deployment of applications, you must insert the <literal>webbeans-ri.jar</"
"literal> into the applications isolated classloader. It cannot be loaded "
"from a shared classloader."
msgstr ""
"Web Beans를 애플리케이션 운용을 지원하는 환경으로 통합하고자 할 경우, "
"<literal>webbeans-ri.jar</literal>를 애플리케이션 분리 classloader로 삽입해"
"야 합니다. 이는 공유 classloader에서 불러올 수 없습니다.  "

#~ msgid ""
#~ "You can specify the implementation of an SPI either as a system property, "
#~ "or in a properties file <literal>META-INF/web-beans-ri.properties</"
#~ "literal>. All property names are the fully qualified class name of the "
#~ "implemented interface; all property values are the fully qualified class "
#~ "name of the implementation class."
#~ msgstr ""
#~ "SPI 구현을 시스템 속성으로나 또는 속성 파일 <literal>META-INF/web-beans-"
#~ "ri.properties</literal>로 지정할 수 있습니다. 모든 속성 이름은 구현된 인터"
#~ "페이스의 완전 정규화된 클래스 이름입니다; 모드 속성 값은 구현 클래스의 완"
#~ "전 정규화된 클래스 이름입니다.  "

#~ msgid ""
#~ "The Web Beans RI can be told to load your implementation of "
#~ "<literal>WebBeanDiscovery</literal> using the property <literal>org.jboss."
#~ "webbeans.bootstrap.spi.WebBeanDiscovery</literal> with the fully "
#~ "qualified class name as the value. For example:"
#~ msgstr ""
#~ "Web Beans RI는 완전 정규화된 클래스 이름 값과 함께 <literal>org.jboss."
#~ "webbeans.bootstrap.spi.WebBeanDiscovery</literal> 속성을 사용하여 "
#~ "<literal>WebBeanDiscovery</literal> 구현을 불러오기하게 할 수 있습니다. "
#~ "예: "

#, fuzzy
#~ msgid ""
#~ "org.jboss.webbeans.bootstrap.spi.WebBeanDiscovery= \\ \n"
#~ "   org.jboss.webbeans.integration.jbossas.WebBeanDiscoveryImpl"
#~ msgstr ""
#~ "org.jboss.webbeans.bootstrap.spi.WebBeanDiscovery=org.jboss.webbeans."
#~ "integration.jbossas.WebBeanDiscoveryImpl"

#~ msgid ""
#~ "If the Web Beans RI is being used in a servlet container, it expects a "
#~ "constructor of the form:"
#~ msgstr ""
#~ "Web Beans RI가 servlet 컨테이너에서 사용될 경우, 이는 생성자 형식을 요청하"
#~ "게 됩니다: "

#~ msgid ""
#~ "<![CDATA[public WebBeanDiscoveryImpl(ServletContext servletContext) {}]]>"
#~ msgstr ""
#~ "<![CDATA[public WebBeanDiscoveryImpl(ServletContext servletContext) {}]]>"

#~ msgid ""
#~ "The servlet context can be used to allow your implementation of "
#~ "<literal>WebBeanDiscovery</literal> to interact with the container."
#~ msgstr ""
#~ "servlet 컨텍스트는 <literal>WebBeanDiscovery</literal> 구현을 허용하기 위"
#~ "해 사용되어 컨테이너와 상호작용할 수 있습니다.  "

#~ msgid ""
#~ "The Web Beans RI can be told to load your implementation of "
#~ "<literal>EjbDiscovery</literal> using the property <literal>org.jboss."
#~ "webbeans.bootstrap.spi.EjbDiscovery</literal> with the fully qualified "
#~ "class name as the value. For example:"
#~ msgstr ""
#~ "Web Beans RI는 완전 정규화된 클래스 이름 값과 함께 <literal>org.jboss."
#~ "webbeans.bootstrap.spi.EjbDiscovery</literal> 속성을 사용하여 "
#~ "<literal>EjbDiscovery</literal> 구현을 불러오기하게 할 수 있습니다. 예: "

#, fuzzy
#~ msgid ""
#~ "org.jboss.webbeans.bootstrap.spi.EjbDiscovery= \\\n"
#~ "   org.jboss.webbeans.integration.jbossas.EjbDiscoveryImpl"
#~ msgstr ""
#~ "org.jboss.webbeans.bootstrap.spi.EjbDiscovery=org.jboss.webbeans."
#~ "integration.jbossas.EjbDiscoveryImpl"

#~ msgid ""
#~ "<![CDATA[public EjbDiscoveryImpl(ServletContext servletContext) {}]]>"
#~ msgstr ""
#~ "<![CDATA[public EjbDiscoveryImpl(ServletContext servletContext) {}]]>"

#~ msgid ""
#~ "The servlet context can be used to allow your implementation of "
#~ "<literal>EjbDiscovery</literal> to interact with the container."
#~ msgstr ""
#~ "servlet 컨텍스트는 <literal>EjbDiscovery</literal> 구현을 허용하기 위해 사"
#~ "용되어 컨테이너와 상호작용할 수 있습니다.  "

#~ msgid "and tell the RI to use it:"
#~ msgstr "RI에게 사용할 것을 알립니다: "

#~ msgid ""
#~ "org.jboss.webbeans.resources.spi.NamingContext=com.acme.MyNamingContext"
#~ msgstr ""
#~ "org.jboss.webbeans.resources.spi.NamingContext=com.acme.MyNamingContext"

#~ msgid "<![CDATA[public MyNamingContext(ServletContext servletContext) {}]]>"
#~ msgstr ""
#~ "<![CDATA[public MyNamingContext(ServletContext servletContext) {}]]>"

#~ msgid ""
#~ "The servlet context can be used to allow your implementation of "
#~ "<literal>NamingContext</literal> to interact with the container."
#~ msgstr ""
#~ "servlet 컨텍스트는 <literal>NamingContext</literal> 구현을 허용하기 위해 "
#~ "사용되어 컨테이너와 상호 작용할 수 있습니다.      "

#~ msgid ""
#~ "org.jboss.webbeans.resources.spi.ResourceLoader=com.acme.ResourceLoader"
#~ msgstr ""
#~ "org.jboss.webbeans.resources.spi.ResourceLoader=com.acme.ResourceLoader"

#~ msgid ""
#~ "<![CDATA[public MyResourceLoader(ServletContext servletContext) {}]]>"
#~ msgstr ""
#~ "<![CDATA[public MyResourceLoader(ServletContext servletContext) {}]]>"

#~ msgid ""
#~ "The servlet context can be used to allow your implementation of "
#~ "<literal>ResourceLoader</literal> to interact with the container."
#~ msgstr ""
#~ "servlet 컨텍스트는 <literal>ResourceLoader</literal> 구현을 허용하기 위해 "
#~ "사용되어 컨테이너와 상호작용할 수 있습니다.   "
