<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"  [ ]>

<chapter id="example">
  <title>JSF web application example</title>

  <para>Let's illustrate these ideas with a full example. We're going 
  to implement user login/logout for an application that uses JSF. First, 
  we'll define a Web Bean to hold the username and password entered during 
  login:</para>

<programlisting role="JAVA"><![CDATA[@Named
public class Credentials {
	
    private String username;
    private String password;
    
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    
}]]></programlisting>

  <para>This Web Bean is bound to the login prompt in the following JSF form:</para>

<programlisting role="JAVA"><![CDATA[<h:form>
    <h:panelGrid columns="2" rendered="#{!login.loggedIn}">
        <h:outputLabel for="username">Username:</h:outputLabel>
        <h:inputText id="username" value="#{credentials.username}"/>
        <h:outputLabel for="password">Password:</h:outputLabel>
        <h:inputText id="password" value="#{credentials.password}"/>
    </h:panelGrid>
    <h:commandButton value="Login" action="#{login.login}" rendered="#{!login.loggedIn}"/>
    <h:commandButton value="Logout" acion="#{login.logout}" rendered="#{login.loggedIn}"/>
</h:form>]]></programlisting>

  <para>The actual work is done by a session scoped Web Bean that maintains 
  information about the currently logged-in user and exposes the <literal>User</literal>
  entity to other Web Beans:</para>

<programlisting role="JAVA"><![CDATA[@SessionScoped @Named
public class Login {

    @Current Credentials credentials;
    @PersistenceContext EntityManager userDatabase;

    private User user;
    
    public void login() {
    	
        List<User> results = userDatabase.createQuery(
           "select u from User u where u.username=:username and u.password=:password")
           .setParameter("username", credentials.getUsername())
           .setParameter("password", credentials.getPassword())
           .getResultList();
        
        if ( !results.isEmpty() ) {
           user = results.get(0);
        }
        
    }
    
    public void logout() {
        user = null;
    }
    
    public boolean isLoggedIn() {
       return user!=null;
    }
    
    @Produces @LoggedIn User getCurrentUser() {
        return user;
    }

}]]></programlisting>

  <para>Of course, <literal>@LoggedIn</literal> is a binding annotation:</para>

<programlisting role="JAVA"><![CDATA[@Retention(RUNTIME)
@Target({TYPE, METHOD, FIELD})
@BindingType
public @interface LoggedIn {}]]></programlisting>

  <para>Now, any other Web Bean can easily inject the current user:</para>

<programlisting role="JAVA"><![CDATA[public class DocumentEditor {

    @Current Document document;
    @LoggedIn User currentUser;
    @PersistenceContext EntityManager docDatabase;
    
    public void save() {
        document.setCreatedBy(currentUser);
        docDatabase.persist(document);
    }
    
}]]></programlisting>

  <para>Hopefully, this example gives a flavor of the Web Bean programming model.
  In the next chapter, we'll explore Web Beans dependency injection in greater
  depth.</para>

</chapter>