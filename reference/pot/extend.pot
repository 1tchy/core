# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-11-11 15:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-xml2pot; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: extend.xml:5
#, no-c-format
msgid "Portable extensions"
msgstr ""

#. Tag: para
#: extend.xml:7
#, no-c-format
msgid ""
"CDI is intended to be a foundation for frameworks, extensions and "
"integration with other technologies. Therefore, CDI exposes a set of SPIs "
"for the use of developers of portable extensions to CDI. For example, the "
"following kinds of extensions were envisaged by the designers of CDI:"
msgstr ""

#. Tag: para
#: extend.xml:15
#, no-c-format
msgid "integration with Business Process Management engines,"
msgstr ""

#. Tag: para
#: extend.xml:18
#, no-c-format
msgid ""
"integration with third-party frameworks such as Spring, Seam, GWT or Wicket, "
"and"
msgstr ""

#. Tag: para
#: extend.xml:23
#, no-c-format
msgid "new technology based upon the CDI programming model."
msgstr ""

#. Tag: para
#: extend.xml:27
#, no-c-format
msgid "More formally, according to the spec:"
msgstr ""

#. Tag: para
#: extend.xml:32
#, no-c-format
msgid "A portable extension may integrate with the container by:"
msgstr ""

#. Tag: para
#: extend.xml:35
#, no-c-format
msgid "Providing its own beans, interceptors and decorators to the container"
msgstr ""

#. Tag: para
#: extend.xml:40
#, no-c-format
msgid ""
"Injecting dependencies into its own objects using the dependency injection "
"service"
msgstr ""

#. Tag: para
#: extend.xml:45
#, no-c-format
msgid "Providing a context implementation for a custom scope"
msgstr ""

#. Tag: para
#: extend.xml:50
#, no-c-format
msgid ""
"Augmenting or overriding the annotation-based metadata with metadata from "
"some other source"
msgstr ""

#. Tag: para
#: extend.xml:57
#, no-c-format
msgid ""
"The nerve center for extending CDI is the <literal>BeanManager</literal> "
"object."
msgstr ""

#. Tag: title
#: extend.xml:62
#, no-c-format
msgid "The <literal>BeanManager</literal> object"
msgstr ""

#. Tag: para
#: extend.xml:64
#, no-c-format
msgid ""
"The <literal>BeanManager</literal> interface lets us obtain beans, "
"interceptors, decorators, observers and contexts programmatically."
msgstr ""

#. Tag: programlisting
#: extend.xml:69
#, no-c-format
msgid ""
"<![CDATA[public interface Manager {\n"
"   public Object getReference(Bean<?> bean, Type beanType, "
"CreationalContext<?> ctx);\n"
"   public Object getInjectableReference(InjectionPoint ij, "
"CreationalContext<?> ctx);\n"
"   public <T> CreationalContext<T> createCreationalContext(Contextual<T> "
"contextual);\n"
"   public Set<Bean<?>> getBeans(Type beanType, Annotation... bindings);\n"
"   public Set<Bean<?>> getBeans(String name);\n"
"   public <X> Bean<? extends X> getMostSpecializedBean(Bean<X> bean);\n"
"   public Bean<?> getPassivationCapableBean(String id);\n"
"   public <X> Bean<? extends X> resolve(Set<Bean<? extends X>> beans);\n"
"   public void validate(InjectionPoint injectionPoint);\n"
"   public void fireEvent(Object event, Annotation... bindings);\n"
"   public <T> Set<ObserverMethod<?, T>> resolveObserverMethods(T event, "
"Annotation... bindings);\n"
"   public List<Decorator<?>> resolveDecorators(Set<Type> types, "
"Annotation... bindings);\n"
"   public List<Interceptor<?>> resolveInterceptors(InterceptionType type, "
"Annotation... interceptorBindings);\n"
"   public boolean isScope(Class<? extends Annotation> annotationType);\n"
"   public boolean isNormalScope(Class<? extends Annotation> "
"annotationType);\n"
"   public boolean isPassivatingScope(Class<? extends Annotation> "
"annotationType);\n"
"   public boolean isQualifier(Class<? extends Annotation> annotationType);\n"
"   public boolean isInterceptorBindingType(Class<? extends Annotation> "
"annotationType);\n"
"   public boolean isStereotype(Class<? extends Annotation> annotationType);\n"
"   public Set<Annotation> getInterceptorBindingTypeDefinition(Class<? "
"extends Annotation> bindingType);\n"
"   public Set<Annotation> getStereotypeDefinition(Class<? extends "
"Annotation> stereotype);\n"
"   public Context getContext(Class<? extends Annotation> scopeType);\n"
"   public ELResolver getELResolver();\n"
"   public ExpressionFactory wrapExpressionFactory(ExpressionFactory "
"expressionFactory);\n"
"   public <T> AnnotatedType<T> createAnnotatedType(Class<T> type);\n"
"   public <T> InjectionTarget<T> createInjectionTarget(AnnotatedType<T> "
"type);\n"
"}]]>"
msgstr ""

#. Tag: para
#: extend.xml:71
#, no-c-format
msgid ""
"We can obtain an instance of <literal>BeanManager</literal> via injection:"
msgstr ""

#. Tag: programlisting
#: extend.xml:73
#, no-c-format
msgid "@Inject BeanManager beanManager"
msgstr ""

#. Tag: para
#: extend.xml:75
#, no-c-format
msgid ""
"Java EE components may obtain an instance of <literal>BeanManager</literal> "
"from JNDI by looking up the name <literal>java:comp/BeanManager</literal>. "
"Any operation of <literal>BeanManager</literal> may be called at any time "
"during the execution of the application."
msgstr ""

#. Tag: para
#: extend.xml:81
#, no-c-format
msgid ""
"Let's study some of the interfaces exposed by the <literal>BeanManager</"
"literal>."
msgstr ""

#. Tag: title
#: extend.xml:86
#, no-c-format
msgid "The <literal>Bean</literal> interface"
msgstr ""

#. Tag: para
#: extend.xml:88
#, no-c-format
msgid ""
"Instances of the interface <literal>Bean</literal> represent beans. There is "
"an instance of <literal>Bean</literal> registered with the "
"<literal>BeanManager</literal> object for every bean in the application."
msgstr ""

#. Tag: programlisting
#: extend.xml:94
#, no-c-format
msgid ""
"<![CDATA[public interface Bean<T> extends Contextual<T> {\n"
"   public Set<Type> getTypes();\n"
"   public Set<Annotation> getQualifiers();\n"
"   public Class<? extends Annotation> getScope();\n"
"   public String getName();\n"
"   public Set<Class<? extends Annotation>> getStereotypes();\n"
"   public Class<?> getBeanClass();\n"
"   public boolean isAlternative();\n"
"   public boolean isNullable();\n"
"   public Set<InjectionPoint> getInjectionPoints();\n"
"}]]>"
msgstr ""

#. Tag: para
#: extend.xml:96
#, no-c-format
msgid ""
"It's possible to implement the <literal>Bean</literal> interface and "
"register instances by calling <literal>AfterBeanDiscovery.addBean()</"
"literal> (<literal>AfterBeanDiscovery</literal> is a built-in event type "
"that an extension can observe) to provide support for new kinds of beans, "
"beyond those defined by the CDI specification. For example, we could use the "
"<literal>Bean</literal> interface to allow objects managed by another "
"framework to be injected into beans."
msgstr ""

#. Tag: para
#: extend.xml:104
#, no-c-format
msgid ""
"There are two subinterfaces of <literal>Bean</literal> defined by the CDI "
"specification: <literal>Interceptor</literal> and <literal>Decorator</"
"literal>."
msgstr ""

#. Tag: title
#: extend.xml:112
#, no-c-format
msgid "The <literal>Context</literal> interface"
msgstr ""

#. Tag: para
#: extend.xml:114
#, no-c-format
msgid ""
"The <literal>Context</literal> interface supports addition of new scopes to "
"CDI, or extension of the built-in scopes to new environments."
msgstr ""

#. Tag: programlisting
#: extend.xml:119
#, no-c-format
msgid ""
"<![CDATA[public interface Context {\n"
"   public Class<? extends Annotation> getScope();\n"
"   public <T> T get(Contextual<T> contextual, CreationalContext<T> "
"creationalContext);\n"
"   public <T> T get(Contextual<T> contextual);\n"
"   boolean isActive();\n"
"}]]>"
msgstr ""

#. Tag: para
#: extend.xml:121
#, no-c-format
msgid ""
"For example, we might implement <literal>Context</literal> to add a business "
"process scope to CDI, or to add support for the conversation scope to an "
"application that uses Wicket."
msgstr ""
