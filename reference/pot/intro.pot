# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-01-10 14:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-xml2pot; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: intro.xml:4
#, no-c-format
msgid "Getting started with Web Beans"
msgstr ""

#. Tag: para
#: intro.xml:6
#, no-c-format
msgid ""
"So you're already keen to get started writing your first Web Bean? Or "
"perhaps you're skeptical, wondering what kinds of hoops the Web Beans "
"specification will make you jump through! The good news is that you've "
"probably already written and used hundreds, perhaps thousands of Web Beans. "
"You might not even remember the first Web Bean you wrote."
msgstr ""

#. Tag: title
#: intro.xml:13
#, no-c-format
msgid "Your first Web Bean"
msgstr ""

#. Tag: para
#: intro.xml:15
#, no-c-format
msgid ""
"With certain, very special exceptions, every Java class with a constructor "
"that accepts no parameters is a Web Bean. That includes every JavaBean. "
"Furthermore, every EJB 3-style session bean is a Web Bean. Sure, the "
"JavaBeans and EJBs you've been writing every day have not been able to take "
"advantage of the new services defined by the Web Beans specification, but "
"you'll be able to use every one of them as Web Beans&#151;injecting them "
"into other Web Beans, configuring them via the Web Beans XML configuration "
"facility, even adding interceptors and decorators to them&#151;without "
"touching your existing code."
msgstr ""

#. Tag: para
#: intro.xml:25
#, no-c-format
msgid ""
"Suppose that we have two existing Java classes, that we've been using for "
"years in various applications. The first class parses a string into a list "
"of sentences:"
msgstr ""

#. Tag: programlisting
#: intro.xml:29
#, no-c-format
msgid ""
"<![CDATA[public class SentenceParser {\n"
"    public List<String> parse(String text) { ... }\n"
"}]]>"
msgstr ""

#. Tag: para
#: intro.xml:31
#, no-c-format
msgid ""
"The second existing class is a stateless session bean front-end for an "
"external system that is able to translate sentences from one language to "
"another:"
msgstr ""

#. Tag: programlisting
#: intro.xml:35
#, no-c-format
msgid ""
"<![CDATA[@Stateless\n"
"public class SentenceTranslator implements Translator {\n"
"    public String translate(String sentence) { ... }\n"
"}]]>"
msgstr ""

#. Tag: para
#: intro.xml:37
#, no-c-format
msgid "Where <literal>Translator</literal> is the local interface:"
msgstr ""

#. Tag: programlisting
#: intro.xml:39
#, no-c-format
msgid ""
"<![CDATA[@Local\n"
"public interface Translator {\n"
"    public String translate(String sentence);\n"
"}]]>"
msgstr ""

#. Tag: para
#: intro.xml:41
#, no-c-format
msgid ""
"Unfortunately, we don't have a preexisting class that translates whole text "
"documents. So let's write a Web Bean that does this job:"
msgstr ""

#. Tag: programlisting
#: intro.xml:44
#, no-c-format
msgid ""
"<![CDATA[public class TextTranslator {\n"
"    \n"
"    private SentenceParser sentenceParser;\n"
"    private Translator sentenceTranslator;\n"
"    \n"
"    @Initializer\n"
"    TextTranslator(SentenceParser sentenceParser, Translator "
"sentenceTranslator) {\n"
"        this.sentenceParser = sentenceParser;\n"
"        this.sentenceTranslator = sentenceTranslator;\n"
"    }\n"
"    \n"
"    public String translate(String text) {\n"
"        StringBuilder sb = new StringBuilder();\n"
"        for (String sentence: sentenceParser.parse(text)) {\n"
"            sb.append(sentenceTranslator.translate(sentence));\n"
"        }\n"
"        return sb.toString();\n"
"    }\n"
"    \n"
"}]]>"
msgstr ""

#. Tag: para
#: intro.xml:46
#, no-c-format
msgid ""
"We may obtain an instance of <literal>TextTranslator</literal> by injecting "
"it into a Web Bean, Servlet or EJB:"
msgstr ""

#. Tag: programlisting
#: intro.xml:49
#, no-c-format
msgid ""
"<![CDATA[@Initializer\n"
"public setTextTranslator(TextTranslator textTranslator) {\n"
"    this.textTranslator = textTranslator;\n"
"}]]>"
msgstr ""

#. Tag: para
#: intro.xml:51
#, no-c-format
msgid ""
"Alternatively, we may obtain an instance by directly calling a method of the "
"Web Bean manager:"
msgstr ""

#. Tag: programlisting
#: intro.xml:54
#, no-c-format
msgid ""
"<![CDATA[TextTranslator tt = manager.getInstanceByType(TextTranslator."
"class);]]>"
msgstr ""

#. Tag: para
#: intro.xml:56
#, no-c-format
msgid ""
"But wait: <literal>TextTranslator</literal> does not have a constructor with "
"no parameters! Is it still a Web Bean? Well, a class that does not have a "
"constructor with no parameters can still be a Web Bean if it has a "
"constructor annotated <literal>@Initializer</literal>."
msgstr ""

#. Tag: para
#: intro.xml:61
#, no-c-format
msgid ""
"As you've guessed, the <literal>@Initializer</literal> annotation has "
"something to do with dependency injection! <literal>@Initializer</literal> "
"may be applied to a constructor or method of a Web Bean, and tells the Web "
"Bean manager to call that constructor or method when instantiating the Web "
"Bean. The Web Bean manager will inject other Web Beans to the parameters of "
"the constructor or method."
msgstr ""

#. Tag: para
#: intro.xml:68
#, no-c-format
msgid ""
"At system initialization time, the Web Bean manager must validate that "
"exactly one Web Bean exists which satisfies each injection point. In our "
"example, if no implementation of <literal>Translator</literal> "
"available&#151;if the <literal>SentenceTranslator</literal> EJB was not "
"deployed&#151;the Web Bean manager would throw an "
"<literal>UnsatisfiedDependencyException</literal>. If more than one "
"implementation of <literal>Translator</literal> was available, the Web Bean "
"manager would throw an <literal>AmbiguousDependencyException</literal>."
msgstr ""

#. Tag: title
#: intro.xml:80
#, no-c-format
msgid "What is a Web Bean?"
msgstr ""

#. Tag: para
#: intro.xml:82
#, no-c-format
msgid "So what, <emphasis>exactly</emphasis>, is a Web Bean?"
msgstr ""

#. Tag: para
#: intro.xml:84
#, no-c-format
msgid ""
"A Web Bean is an application class that contains business logic. A Web Bean "
"may be called directly from Java code, or it may be invoked via Unified EL. "
"A Web Bean may access transactional resources. Dependencies between Web "
"Beans are managed automatically by the Web Bean manager. Most Web Beans are "
"<emphasis>stateful</emphasis> and <emphasis>contextual</emphasis>. The "
"lifecycle of a Web Bean is always managed by the Web Bean manager."
msgstr ""

#. Tag: para
#: intro.xml:91
#, no-c-format
msgid ""
"Let's back up a second. What does it really mean to be \"contextual\"? Since "
"Web Beans may be stateful, it matters <emphasis>which</emphasis> bean "
"instance I have. Unlike a stateless component model (for example, stateless "
"session beans) or a singleton component model (such as servlets, or "
"singleton beans), different clients of a Web Bean see the Web Bean in "
"different states. The client-visible state depends upon which instance of "
"the Web Bean the client has a reference to."
msgstr ""

#. Tag: para
#: intro.xml:98
#, no-c-format
msgid ""
"However, like a stateless or singleton model, but <emphasis>unlike</"
"emphasis> stateful session beans, the client does not control the lifecycle "
"of the instance by explicitly creating and destroying it. Instead, the "
"<emphasis>scope</emphasis> of the Web Bean determines:"
msgstr ""

#. Tag: para
#: intro.xml:105
#, no-c-format
msgid "the lifecycle of each instance of the Web Bean and"
msgstr ""

#. Tag: para
#: intro.xml:108
#, no-c-format
msgid ""
"which clients share a reference to a particular instance of the Web Bean."
msgstr ""

#. Tag: para
#: intro.xml:113
#, no-c-format
msgid ""
"For a given thread in a Web Beans application, there may be an "
"<emphasis>active context</emphasis> associated with the scope of the Web "
"Bean. This context may be unique to the thread (for example, if the Web Bean "
"is request scoped), or it may be shared with certain other threads (for "
"example, if the Web Bean is session scoped) or even all other threads (if it "
"is application scoped)."
msgstr ""

#. Tag: para
#: intro.xml:119
#, no-c-format
msgid ""
"Clients (for example, other Web Beans) executing in the same context will "
"see the same instance of the Web Bean. But clients in a different context "
"will see a different instance."
msgstr ""

#. Tag: para
#: intro.xml:123
#, no-c-format
msgid ""
"One great advantage of the contextual model is that it allows stateful Web "
"Beans to be treated like services! The client need not concern itself with "
"managing the lifecycle of the Web Bean it is using, <emphasis>nor does it "
"even need to know what that lifecyle is.</emphasis> Web Beans interact by "
"passing messages, and the Web Bean implementations define the lifecycle of "
"their own state. The Web Beans are loosely coupled because:"
msgstr ""

#. Tag: para
#: intro.xml:132
#, no-c-format
msgid "they interact via well-defined public APIs"
msgstr ""

#. Tag: para
#: intro.xml:135
#, no-c-format
msgid "their lifecycles are completely decoupled"
msgstr ""

#. Tag: para
#: intro.xml:139
#, no-c-format
msgid ""
"We can replace one Web Bean with a different Web Bean that implements the "
"same API and has a different lifecycle (a different scope) without affecting "
"the other Web Bean implementation. In fact, Web Beans defines a "
"sophisticated facility for overriding Web Bean implementations at deployment "
"time, as we will see in <xref linkend=\"deploymenttypes\"/>."
msgstr ""

#. Tag: para
#: intro.xml:145
#, no-c-format
msgid ""
"Note that not all clients of a Web Bean are Web Beans. Other objects such as "
"Servlets or Message-Driven Beans&#151;which are by nature not injectable, "
"contextual objects&#151;may also obtain references to Web Beans by injection."
msgstr ""

#. Tag: para
#: intro.xml:149
#, no-c-format
msgid "Enough hand-waving. More formally, according to the spec:"
msgstr ""

#. Tag: para
#: intro.xml:153
#, no-c-format
msgid "A Web Bean comprises:"
msgstr ""

#. Tag: para
#: intro.xml:156
#, no-c-format
msgid "A (nonempty) set of API types"
msgstr ""

#. Tag: para
#: intro.xml:157
#, no-c-format
msgid "A (nonempty) set of binding annotation types"
msgstr ""

#. Tag: para
#: intro.xml:158
#, no-c-format
msgid "A scope"
msgstr ""

#. Tag: para
#: intro.xml:159
#, no-c-format
msgid "A deployment type"
msgstr ""

#. Tag: para
#: intro.xml:160
#, no-c-format
msgid "Optionally, a Web Bean name"
msgstr ""

#. Tag: para
#: intro.xml:161
#, no-c-format
msgid "A set of interceptor binding types"
msgstr ""

#. Tag: para
#: intro.xml:162
#, no-c-format
msgid "A Web Bean implementation"
msgstr ""

#. Tag: para
#: intro.xml:167
#, no-c-format
msgid "Let's see what some of these terms mean, to the Web Bean developer."
msgstr ""

#. Tag: title
#: intro.xml:170
#, no-c-format
msgid "API types, binding types and dependency injection"
msgstr ""

#. Tag: para
#: intro.xml:172
#, no-c-format
msgid ""
"Web Beans usually acquire references to other Web Beans via dependency "
"injection. Any injected attribute specifies a \"contract\" that must be "
"satisfied by the Web Bean to be injected. The contract is:"
msgstr ""

#. Tag: para
#: intro.xml:177
#, no-c-format
msgid "an API type, together with"
msgstr ""

#. Tag: para
#: intro.xml:178
#, no-c-format
msgid "a set of binding types."
msgstr ""

#. Tag: para
#: intro.xml:181
#, no-c-format
msgid ""
"An API is a user-defined class or interface. (If the Web Bean is an EJB "
"session bean, the API type is the <literal>@Local</literal> interface or "
"bean-class local view). A binding type represents some client-visible "
"semantic that is satisfied by some implementations of the API and not by "
"others."
msgstr ""

#. Tag: para
#: intro.xml:186
#, no-c-format
msgid ""
"Binding types are represented by user-defined annotations that are "
"themselves annotated <literal>@BindingType</literal>. For example, the "
"following injection point has API type <literal>PaymentProcessor</literal> "
"and binding type <literal>@CreditCard</literal>:"
msgstr ""

#. Tag: programlisting
#: intro.xml:191
#, no-c-format
msgid "<![CDATA[@CreditCard PaymentProcessor paymentProcessor]]>"
msgstr ""

#. Tag: para
#: intro.xml:193
#, no-c-format
msgid ""
"If no binding type is explicitly specified at an injection point, the "
"default binding type <literal>@Current</literal> is assumed."
msgstr ""

#. Tag: para
#: intro.xml:196
#, no-c-format
msgid ""
"For each injection point, the Web Bean manager searches for a Web Bean which "
"satisfies the contract (implements the API, and has all the binding types), "
"and injects that Web Bean."
msgstr ""

#. Tag: para
#: intro.xml:200
#, no-c-format
msgid ""
"The following Web Bean has the binding type <literal>@CreditCard</literal> "
"and implements the API type <literal>PaymentProcessor</literal>. It could "
"therefore be injected to the example injection point:"
msgstr ""

#. Tag: programlisting
#: intro.xml:204
#, no-c-format
msgid ""
"<![CDATA[@CreditCard\n"
"public class CreditCardPaymentProcessor \n"
"    implements PaymentProcessor { ... }]]>"
msgstr ""

#. Tag: para
#: intro.xml:206
#, no-c-format
msgid ""
"If a Web Bean does not explicitly specify a set of binding types, it has "
"exactly one binding type: the default binding type <literal>@Current</"
"literal>."
msgstr ""

#. Tag: para
#: intro.xml:209
#, no-c-format
msgid ""
"Web Beans defines a sophisticated but intuitive <emphasis>resolution "
"algorithm</emphasis> that helps the container decide what to do if there is "
"more than one Web Bean that satisfies a particular contract. We'll get into "
"the details in <xref linkend=\"injection\"/>."
msgstr ""

#. Tag: title
#: intro.xml:217
#, no-c-format
msgid "Deployment types"
msgstr ""

#. Tag: para
#: intro.xml:219
#, no-c-format
msgid ""
"<emphasis>Deployment types</emphasis> let us classify our Web Beans by "
"deployment scenario. A deployment type is an annotation that represents a "
"particular deployment scenario, for example <literal>@Mock</literal>, "
"<literal>@Staging</literal> or <literal>@AustralianTaxLaw</literal>. We "
"apply the annotation to Web Beans which should be deployed in that scenario. "
"A deployment type allows a whole set of Web Beans to be conditionally "
"deployed, with a just single line of configuration."
msgstr ""

#. Tag: para
#: intro.xml:226
#, no-c-format
msgid ""
"Many Web Beans just use the default deployment type <literal>@Production</"
"literal>, in which case no deployment type need be explicitly specified. All "
"three Web Bean in our example have the deployment type <literal>@Production</"
"literal>."
msgstr ""

#. Tag: para
#: intro.xml:230
#, no-c-format
msgid ""
"In a testing environment, we might want to replace the "
"<literal>SentenceTranslator</literal> Web Bean with a \"mock object\":"
msgstr ""

#. Tag: programlisting
#: intro.xml:233
#, no-c-format
msgid ""
"<![CDATA[@Mock\n"
"public class MockSentenceTranslator implements Translator {\n"
"    public String translate(String sentence) {\n"
"        return \"Lorem ipsum dolor sit amet\";\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: intro.xml:236
#, no-c-format
msgid ""
"We would enable the deployment type <literal>@Mock</literal> in our testing "
"environment, to indicate that <literal>MockSentenceTranslator</literal> and "
"any other Web Bean annotated <literal>@Mock</literal> should be used."
msgstr ""

#. Tag: para
#: intro.xml:240
#, no-c-format
msgid ""
"We'll talk more about this unique and powerful feature in <xref linkend="
"\"deploymenttypes\"/>."
msgstr ""

#. Tag: title
#: intro.xml:246
#, no-c-format
msgid "Scope"
msgstr ""

#. Tag: para
#: intro.xml:248
#, no-c-format
msgid ""
"The <emphasis>scope</emphasis> defines the lifecycle and visibility of "
"instances of the Web Bean. The Web Beans context model is extensible, "
"accommodating arbitrary scopes. However, certain important scopes are built-"
"in to the specification, and provided by the Web Bean manager. A scope is "
"represented by an annotation type."
msgstr ""

#. Tag: para
#: intro.xml:254
#, no-c-format
msgid ""
"For example, any web application may have <emphasis>session scoped</"
"emphasis> Web Beans:"
msgstr ""

#. Tag: programlisting
#: intro.xml:257
#, no-c-format
msgid ""
"<![CDATA[@SessionScoped\n"
"public class ShoppingCart { ... }]]>"
msgstr ""

#. Tag: para
#: intro.xml:259
#, no-c-format
msgid ""
"An instance of a session scoped Web Bean is bound to a user session and is "
"shared by all requests that execute in the context of that session."
msgstr ""

#. Tag: para
#: intro.xml:262
#, no-c-format
msgid ""
"By default, Web Beans belong to a special scope called the "
"<emphasis>dependent pseudo-scope</emphasis>. Web Beans with this scope are "
"pure dependent objects of the object into which they are injected, and their "
"lifecycle is bound to the lifecycle of that object."
msgstr ""

#. Tag: para
#: intro.xml:267
#, no-c-format
msgid "We'll talk more about scopes in <xref linkend=\"scopescontexts\"/>."
msgstr ""

#. Tag: title
#: intro.xml:272
#, no-c-format
msgid "Web Bean names and Unified EL"
msgstr ""

#. Tag: para
#: intro.xml:274
#, no-c-format
msgid ""
"A Web Bean may have a <emphasis>name</emphasis>, allowing it to be used in "
"Unified EL expressions. It's easy to specify the name of a Web Bean:"
msgstr ""

#. Tag: programlisting
#: intro.xml:278
#, no-c-format
msgid ""
"<![CDATA[@SessionScoped @Named(\"cart\")\n"
"public class ShoppingCart { ... }]]>"
msgstr ""

#. Tag: para
#: intro.xml:280
#, no-c-format
msgid "Now we can easily use the Web Bean in any JSF or JSP page:"
msgstr ""

#. Tag: programlisting
#: intro.xml:282
#, no-c-format
msgid ""
"<![CDATA[<h:dataTable value=\"#{cart.lineItems}\" var=\"item\">\n"
"    ....\n"
"</h:dataTable>]]>"
msgstr ""

#. Tag: para
#: intro.xml:284
#, no-c-format
msgid ""
"It's even easier to just let the name be defaulted by the Web Bean manager:"
msgstr ""

#. Tag: programlisting
#: intro.xml:287
#, no-c-format
msgid ""
"<![CDATA[@SessionScoped @Named\n"
"public class ShoppingCart { ... }]]>"
msgstr ""

#. Tag: para
#: intro.xml:289
#, no-c-format
msgid ""
"In this case, the name defaults to <literal>shoppingCart</literal>&#151;the "
"unqualified class name, with the first character changed to lowercase."
msgstr ""

#. Tag: title
#: intro.xml:295
#, no-c-format
msgid "Interceptor binding types"
msgstr ""

#. Tag: para
#: intro.xml:297
#, no-c-format
msgid ""
"Web Beans supports the interceptor functionality defined by EJB 3, not only "
"for EJB beans, but also for plain Java classes. In addition, Web Beans "
"provides a new approach to binding interceptors to EJB beans and other Web "
"Beans."
msgstr ""

#. Tag: para
#: intro.xml:302
#, no-c-format
msgid ""
"It remains possible to directly specify the interceptor class via use of the "
"<literal>@Interceptors</literal> annotation:"
msgstr ""

#. Tag: programlisting
#: intro.xml:305
#, no-c-format
msgid ""
"<![CDATA[@SessionScoped \n"
"@Interceptors(TransactionInterceptor.class)\n"
"public class ShoppingCart { ... }]]>"
msgstr ""

#. Tag: para
#: intro.xml:307
#, no-c-format
msgid ""
"However, it is more elegant, and better practice, to indirect the "
"interceptor binding through an <emphasis>interceptor binding type</emphasis>:"
msgstr ""

#. Tag: programlisting
#: intro.xml:311
#, no-c-format
msgid ""
"<![CDATA[@SessionScoped @Transactional\n"
"public class ShoppingCart { ... }]]>"
msgstr ""

#. Tag: para
#: intro.xml:313
#, no-c-format
msgid ""
"We'll discuss Web Beans interceptors and decorators in <xref linkend="
"\"interceptors\"/> and <xref linkend=\"decorators\"/>."
msgstr ""

#. Tag: title
#: intro.xml:321
#, no-c-format
msgid "What kinds of objects can be Web Beans?"
msgstr ""

#. Tag: para
#: intro.xml:323
#, no-c-format
msgid ""
"We've already seen that JavaBeans, EJBs and some other Java classes can be "
"Web Beans. But exactly what kinds of objects are Web Beans?"
msgstr ""

#. Tag: title
#: intro.xml:327
#, no-c-format
msgid "Simple Web Beans"
msgstr ""

#. Tag: para
#: intro.xml:329
#, no-c-format
msgid ""
"The Web Beans specification says that a concrete Java class is a "
"<emphasis>simple</emphasis> Web Bean if:"
msgstr ""

#. Tag: para
#: intro.xml:334
#, no-c-format
msgid ""
"it is not an EE container-managed component, like an EJB, a Servlet or a JPA "
"entity,"
msgstr ""

#. Tag: para
#: intro.xml:338
#, no-c-format
msgid "it is not a non-static static inner class,"
msgstr ""

#. Tag: para
#: intro.xml:341
#, no-c-format
msgid "it is not a parameterized type, and"
msgstr ""

#. Tag: para
#: intro.xml:344
#, no-c-format
msgid ""
"it has a constructor with no parameters, or a constructor annotated "
"<literal>@Initializer</literal>."
msgstr ""

#. Tag: para
#: intro.xml:349
#, no-c-format
msgid "Thus, almost every JavaBean is a simple Web Bean."
msgstr ""

#. Tag: para
#: intro.xml:351
#, no-c-format
msgid ""
"Every interface implemented directly or indirectly by a simple Web Bean is "
"an API type of the simple Web Bean. The class and its superclasses are also "
"API types."
msgstr ""

#. Tag: title
#: intro.xml:358
#, no-c-format
msgid "Enterprise Web Beans"
msgstr ""

#. Tag: para
#: intro.xml:360
#, no-c-format
msgid ""
"The specification says that all EJB 3-style session and singleton beans are "
"<emphasis>enterprise</emphasis> Web Beans. Message driven beans are not Web "
"Beans&#151;since they are not intended to be injected into other "
"objects&#151;but they can take advantage of most of the functionality of Web "
"Beans, including dependency injection and interceptors."
msgstr ""

#. Tag: para
#: intro.xml:366
#, no-c-format
msgid ""
"Every local interface of an enterprise Web Bean that does not have a "
"wildcard type parameter or type variable, and every one of its "
"superinterfaces, is an API type of the enterprise Web Bean. If the EJB bean "
"has a bean class local view, the bean class, and every one of its "
"superclasses, is also an API type."
msgstr ""

#. Tag: para
#: intro.xml:372
#, no-c-format
msgid ""
"Stateful session beans should declare a remove method with no parameters or "
"a remove method annotated <literal>@Destructor</literal>. The Web Bean "
"manager calls this method to destroy the stateful session bean instance at "
"the end of its lifecycle. This method is called the <emphasis>destructor</"
"emphasis> method of the enterprise Web Bean."
msgstr ""

#. Tag: programlisting
#: intro.xml:378
#, no-c-format
msgid ""
"<![CDATA[@Stateful @SessionScoped\n"
"public class ShoppingCart {\n"
"\n"
"    ...\n"
"    \n"
"    @Remove\n"
"    public void destroy() {}\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: intro.xml:380
#, no-c-format
msgid ""
"So when should we use an enterprise Web Bean instead of a simple Web Bean? "
"Well, whenever we need the advanced enterprise services offered by EJB, such "
"as:"
msgstr ""

#. Tag: para
#: intro.xml:387
#, no-c-format
msgid "method-level transaction management and security,"
msgstr ""

#. Tag: para
#: intro.xml:390
#, no-c-format
msgid "concurrency management,"
msgstr ""

#. Tag: para
#: intro.xml:393
#, no-c-format
msgid ""
"instance-level passivation for stateful session beans and instance-pooling "
"for stateless session beans,"
msgstr ""

#. Tag: para
#: intro.xml:397
#, no-c-format
msgid "remote and web service invocation, and"
msgstr ""

#. Tag: para
#: intro.xml:400
#, no-c-format
msgid "timers and asynchronous methods,"
msgstr ""

#. Tag: para
#: intro.xml:404
#, no-c-format
msgid ""
"we should use an enterprise Web Bean. When we don't need any of these "
"things, a simple Web Bean will serve just fine."
msgstr ""

#. Tag: para
#: intro.xml:407
#, no-c-format
msgid ""
"Many Web Beans (including any session or application scoped Web Bean) are "
"available for concurrent access. Therefore, the concurrency management "
"provided by EJB 3.1 is especially useful. Most session and application "
"scoped Web Beans should be EJBs."
msgstr ""

#. Tag: para
#: intro.xml:412
#, no-c-format
msgid ""
"Web Beans which hold references to heavy-weight resources, or hold a lot of "
"internal state benefit from the advanced container-managed lifecycle defined "
"by the EJB <literal>@Stateless</literal>/<literal>@Stateful</literal>/"
"<literal>@Singleton</literal> model, with its support for passivation and "
"instance pooling."
msgstr ""

#. Tag: para
#: intro.xml:417
#, no-c-format
msgid ""
"Finally, it's usually obvious when method-level transaction management, "
"method-level security, timers, remote methods or asynchronous methods are "
"needed."
msgstr ""

#. Tag: para
#: intro.xml:420
#, no-c-format
msgid ""
"It's usually easy to start with simple Web Bean, and then turn it into an "
"EJB, just by adding an annotation: <literal>@Stateless</literal>, "
"<literal>@Stateful</literal> or <literal>@Singleton</literal>."
msgstr ""

#. Tag: title
#: intro.xml:427
#, no-c-format
msgid "Producer methods"
msgstr ""

#. Tag: para
#: intro.xml:429
#, no-c-format
msgid ""
"A <emphasis>producer method</emphasis> is a method that is called by the Web "
"Bean manager to obtain an instance of the Web Bean when no instance exists "
"in the current context. A producer method lets the application take full "
"control of the instantiation process, instead of leaving instantiation to "
"the Web Bean manager. For example:"
msgstr ""

#. Tag: programlisting
#: intro.xml:435
#, no-c-format
msgid ""
"<![CDATA[@ApplicationScoped\n"
"public class Generator {\n"
"\n"
"    private Random random = new Random( System.currentTimeMillis() );\n"
"    \n"
"    @Produces @Random int next() {\n"
"        return random.nextInt(100);\n"
"    }\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: intro.xml:437
#, no-c-format
msgid ""
"The result of a producer method is injected just like any other Web Bean."
msgstr ""

#. Tag: programlisting
#: intro.xml:439
#, no-c-format
msgid "<![CDATA[@Random int randomNumber]]>"
msgstr ""

#. Tag: para
#: intro.xml:441
#, no-c-format
msgid ""
"The method return type and all interfaces it extends/implements directly or "
"indirectly are API types of the producer method. If the return type is a "
"class, all superclasses are also API types."
msgstr ""

#. Tag: para
#: intro.xml:445
#, no-c-format
msgid "Some producer methods return objects that require explicit destruction:"
msgstr ""

#. Tag: programlisting
#: intro.xml:447
#, no-c-format
msgid ""
"<![CDATA[@Produces @RequestScoped Connection connect(User user) {\n"
"    return createConnection( user.getId(), user.getPassword() );\n"
"}]]>"
msgstr ""

#. Tag: para
#: intro.xml:449
#, no-c-format
msgid ""
"These producer methods may define matching <emphasis>disposal methods</"
"emphasis>:"
msgstr ""

#. Tag: programlisting
#: intro.xml:451
#, no-c-format
msgid ""
"<![CDATA[void close(@Disposes Connection connection) {\n"
"    connection.close();\n"
"}]]>"
msgstr ""

#. Tag: para
#: intro.xml:453
#, no-c-format
msgid ""
"This disposal method is called automatically by the Web Bean manager at the "
"end of the request."
msgstr ""

#. Tag: para
#: intro.xml:456
#, no-c-format
msgid ""
"We'll talk much more about producer methods in <xref linkend="
"\"producermethods\"/>."
msgstr ""

#. Tag: title
#: intro.xml:461
#, no-c-format
msgid "JMS endpoints"
msgstr ""

#. Tag: para
#: intro.xml:463
#, no-c-format
msgid ""
"Finally, a JMS queue or topic can be a Web Bean. Web Beans relieves the "
"developer from the tedium of managing the lifecycles of all the various JMS "
"objects required to send messages to queues and topics. We'll discuss JMS "
"endpoints in <xref linkend=\"jms\"/>."
msgstr ""
