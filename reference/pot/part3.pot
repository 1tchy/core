# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-06-08 19:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-xml2pot; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: para
#: part3.xml:5
#, no-c-format
msgid ""
"The second major theme of Web Beans is <emphasis>strong typing</emphasis>. "
"The information about the dependencies, interceptors and decorators of a Web "
"Bean, and the information about event consumers for an event producer, is "
"contained in typesafe Java constructs that may be validated by the compiler."
msgstr ""

#. Tag: para
#: part3.xml:10
#, no-c-format
msgid ""
"You don't see string-based identifiers in Web Beans code, not because the "
"framework is hiding them from you using clever defaulting rules &#151; so-"
"called \"configuration by convention\" &#151; but because there are simply "
"no strings there to begin with!"
msgstr ""

#. Tag: para
#: part3.xml:15
#, no-c-format
msgid ""
"The obvious benefit of this approach is that <emphasis>any</emphasis> IDE "
"can provide autocompletion, validation and refactoring without the need for "
"special tooling. But there is a second, less-immediately-obvious, benefit. "
"It turns out that when you start thinking of identifying objects, events or "
"interceptors via annotations instead of names, you have an opportunity to "
"lift the semantic level of your code."
msgstr ""

#. Tag: para
#: part3.xml:21
#, no-c-format
msgid ""
"Web Beans encourages you develop annotations that model concepts, for "
"example,"
msgstr ""

#. Tag: para
#: part3.xml:26
#, no-c-format
msgid "<literal>@Asynchronous</literal>,"
msgstr ""

#. Tag: para
#: part3.xml:29
#, no-c-format
msgid "<literal>@Mock</literal>,"
msgstr ""

#. Tag: para
#: part3.xml:32
#, no-c-format
msgid "<literal>@Secure</literal> or"
msgstr ""

#. Tag: para
#: part3.xml:35
#, no-c-format
msgid "<literal>@Updated</literal>,"
msgstr ""

#. Tag: para
#: part3.xml:39
#, no-c-format
msgid "instead of using compound names like"
msgstr ""

#. Tag: para
#: part3.xml:43
#, no-c-format
msgid "<literal>asyncPaymentProcessor</literal>,"
msgstr ""

#. Tag: para
#: part3.xml:46
#, no-c-format
msgid "<literal>mockPaymentProcessor</literal>,"
msgstr ""

#. Tag: para
#: part3.xml:49
#, no-c-format
msgid "<literal>SecurityInterceptor</literal> or"
msgstr ""

#. Tag: para
#: part3.xml:52
#, no-c-format
msgid "<literal>DocumentUpdatedEvent</literal>."
msgstr ""

#. Tag: para
#: part3.xml:56
#, no-c-format
msgid ""
"The annotations are reusable. They help describe common qualities of "
"disparate parts of the system. They help us categorize and understand our "
"code. They help us deal with common concerns in a common way. They make our "
"code more literate and more understandable."
msgstr ""

#. Tag: para
#: part3.xml:61
#, no-c-format
msgid ""
"Web Beans <emphasis>stereotypes</emphasis> take this idea a step further. A "
"stereotype models a common <emphasis>role</emphasis> in your application "
"architecture. It encapsulates various properties of the role, including "
"scope, interceptor bindings, deployment type, etc, into a single reusable "
"package."
msgstr ""

#. Tag: para
#: part3.xml:66
#, no-c-format
msgid ""
"Even Web Beans XML metadata is strongly typed! There's no compiler for XML, "
"so Web Beans takes advantage of XML schemas to validate the Java types and "
"attributes that appear in XML. This approach turns out to make the XML more "
"literate, just like annotations made our Java code more literate."
msgstr ""

#. Tag: para
#: part3.xml:71
#, no-c-format
msgid ""
"We're now ready to meet some more advanced features of Web Beans. Bear in "
"mind that these features exist to make our code both easier to validate and "
"more understandable. Most of the time you don't ever really <emphasis>need</"
"emphasis> to use these features, but if you use them wisely, you'll come to "
"appreciate their power."
msgstr ""
