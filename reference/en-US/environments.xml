<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"  [ ]>

<chapter id="environments">
   <title>Application Servers and environments supported by Web Beans</title>

   <section>
      <title>Using Web Beans with JBoss AS</title>
      
      <para>
         No special configuration of your application, beyond adding either
         <literal>META-INF/beans.xml</literal> or 
         <literal>WEB-INF/beans.xml</literal> is needed.
      </para>
      
      <para>
         If you are using JBoss AS 5.0.1.GA then you'll need to install Web 
         Beans as an extra. First we need to tell Web Beans where JBoss is located. Edit
         <literal>jboss-as/build.properties</literal> and set the
         <literal>jboss.home</literal> property. For example:
      </para>
      
      <programlisting>jboss.home=/Applications/jboss-5.0.1.GA</programlisting>
      
      <para>
         Now we can install Web Beans:
      </para>
      
      <programlisting>$ cd webbeans-$VERSION/jboss-as
$ ant update</programlisting>

      <note>
         <para>
            A new deployer,
            <literal>webbeans.deployer</literal> is added to JBoss AS. This adds supports for
            JSR-299 deployments to JBoss AS, and allows Web Beans to query the
            EJB3 container and discover which EJBs are installed in your 
            application.
         </para>
      </note>
      
      <para>
         Web Beans is built into all releases of JBoss AS from 5.1 onwards.
      </para>

   </section>
   
   <section>
      <title>GlassFish</title>
      
      <para>TODO</para>
   </section>
   
   <section>
      <title>Servlet Containers (such as Tomcat or Jetty)</title>
      
      <para>Web Beans can be used in any Servlet container such as Tomcat 6.0 or Jetty 6.1.</para>
      
      <note>
         <para>
            Web Beans doesn't support deploying session beans, injection using
            <literal>@EJB</literal>, or 
            <literal>@PersistenceContext</literal> or using transactional events
            in Servlet containers.
         </para>
      </note>
      
      <para>
         Web Beans should be used as a web application library in a servlet
         container. You should place <literal>webbeans-servlet.jar</literal>
         in <literal>WEB-INF/lib</literal>.
         <literal>webbeans-servlet.jar</literal> is an "uber-jar" provided for
         your convenience. Alternatively, you could use its component jars: 
      </para>
      
      <itemizedlist>
         <listitem>
            <para>
               <literal>jsr299-api.jar</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>webbeans-api.jar</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>webbeans-spi.jar</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>webbeans-core.jar</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>webbeans-logging.jar</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>webbeans-servlet-int.jar</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>javassist.jar</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>dom4j.jar</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>google-collections.jar</literal>
            </para>
         </listitem>
      </itemizedlist>
      
      <para>
         You also need to explicitly specify the servlet listener (used to
         boot Web Beans, and control its interaction with requests) in
         <literal>web.xml</literal>:
      </para>
         
      <programlisting role="XML"><![CDATA[<listener>
   <listener-class>org.jboss.webbeans.environment.servlet.Listener</listener-class>
</listener>]]></programlisting>

      <section>
         <title>Tomcat</title>

         <para>
            Tomcat has a read-only JNDI, so Web Beans can't automatically bind 
            the BeanManager. To bind the BeanManager into JNDI, you should populate 
            <literal>META-INF/context.xml</literal> with the following
			contents:
         </para>
      
         <programlisting role="XML"><![CDATA[<Context>
   <Resource name="BeanManager" 
      auth="Container"
      type="javax.enterprise.inject.spi.BeanManager"
      factory="org.jboss.webbeans.resources.ManagerObjectFactory"/>
</Context>]]></programlisting>

         <para>
            and make it available to your deployment by adding this to 
            the bottom of <literal>web.xml</literal>:
         </para>
      
         <programlisting role="XML"><![CDATA[<resource-env-ref>
   <resource-env-ref-name>
      BeanManager
   </resource-env-ref-name>
   <resource-env-ref-type>
      javax.enterprise.inject.spi.BeanManager
   </resource-env-ref-type>
</resource-env-ref>]]></programlisting>

         <para>
            Tomcat only allows you to bind entries to
            <literal>java:comp/env</literal>, so the BeanManager will be available 
            at <literal>java:comp/env/BeanManager</literal>
         </para>
      
         <para>
            Web Beans also supports Servlet injection in Tomcat. To enable this,
            place the <literal>webbeans-tomcat-support.jar</literal> in 
            <literal>$TOMCAT_HOME/lib</literal>, and add the following to your
            <literal>META-INF/context.xml</literal>:
         </para>
      
         <programlisting role="XML"><![CDATA[<Listener className="org.jboss.webbeans.environment.tomcat.WebBeansLifecycleListener"/>]]></programlisting>
         
      </section>

      <section>
         <title>Jetty</title>

         <para>
            Like Tomcat, Jetty has a read-only JNDI, so Web Beans can't
            automatically bind the Manager. To bind the Manager to JNDI, you
            should populate <literal>WEB-INF/jetty-env.xml</literal> with the
            following contents:
         </para>
      
         <programlisting role="XML"><![CDATA[<!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN"
   "http://jetty.mortbay.org/configure.dtd">
<Configure id="webAppCtx" class="org.mortbay.jetty.webapp.WebAppContext">
   <New id="BeanManager" class="org.mortbay.jetty.plus.naming.Resource">
      <Arg><Ref id="webAppCtx"/></Arg> 
      <Arg>BeanManager</Arg>
      <Arg>
         <New class="javax.naming.Reference">
            <Arg>javax.enterprise.inject.spi.BeanManager</Arg> 
            <Arg>org.jboss.webbeans.resources.ManagerObjectFactory</Arg>
            <Arg/>
         </New>
      </Arg>
   </New>
</Configure>]]></programlisting>

         <para>
            Notice that Jetty doesn't not have built-in support for an
            <literal>javax.naming.spi.ObjectFactory</literal> like Tomcat, so
            it's necessary to manually create the
            <literal>javax.naming.Reference</literal> to wrap around it.
         </para>

         <para>
            Jetty only allows you to bind entries to
            <literal>java:comp/env</literal>, so the BeanManager will be available 
            at <literal>java:comp/env/BeanManager</literal>
         </para>

         <para>
            Web Beans does not currently support Servlet injection in Jetty.
         </para>

      </section>

   </section>
   
   <section>
      <title>Java SE</title>
      
      <para>Apart from improved integration of the Enterprise Java stack,
      Web Beans also provides a state of the art typesafe, stateful dependency
      injection framework. This is useful in a wide range of application types,
      enterprise or otherwise. To facilitate this, Web Beans provides a simple
      means for executing in the Java Standard Edition environment independently
      of any Enterprise Edition features.
      </para>

      <para>When executing in the SE environment the following features of Web
      Beans are available:</para>

      <itemizedlist>
         <listitem>
            <para>
               <literal>Simple Web Beans (POJOs)</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>Typesafe Dependency Injection</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>Application and Dependent Contexts</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>Qualifiers</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>Stereotypes</literal>
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>Typesafe Event Model</literal>
            </para>
         </listitem>
      </itemizedlist>

      <section>
          <title>Web Beans SE Module</title>

          <para>To make life easy for developers Web Beans provides a special module with a
          main method which will boot the Web Beans manager,
          automatically registering all simple beans found on the classpath.
          This eliminates the need for application developers to write any
          bootstrapping code. The entry point for a Web Beans SE applications
          is a simple Web Bean which observes the special <literal>ContainerInitialized</literal>
          event provided by the SE module. The command line paramters can be
          injected using either of the following:
          </para>
          <programlisting role="JAVA"><![CDATA[@Parameters List<String> params;
@Parameters String[] paramsArray; // useful for compatability with existing classes]]></programlisting>
          <para>
          Here's an example of a simple Web Beans SE application:
          </para>

          <programlisting role="JAVA"><![CDATA[@ApplicationScoped
public class HelloWorld
{
    @Parameters List<String> parameters;

    public void printHello( @Observes ContainerInitialized event )
    {
        System.out.println( "Hello " + parameters.get(0) );
    }
}]]></programlisting>

          <para>Web Beans SE applications are started by running the following
          main method.</para>
          <programlisting role="JAVA"><![CDATA[java org.jboss.webbeans.environments.se.StartMain <args>]]></programlisting>

          <para>If you need to do any custom initialization of the Web Beans manager,
          for example registering custom contexts or initializing resources for
          your beans you can do so in response to the <literal>AfterBeanDiscovery</literal>
          or <literal>AfterDeploymentValidation</literal>
          events. The following example registers a custom context:</para>
          
          <programlisting role="JAVA"><![CDATA[public class PerformSetup
{

    public void setup( @Observes AfterBeanDiscovery event )
    {
        event.addContext( ThreadContext.INSTANCE );
    }
}]]></programlisting>

          <note>
             <para>
                The command line parameters do not become available for injection
                until the <literal>ContainerInitialized</literal> event is fired. If you
                need access to the parameters during initialization you can do so via the
                <literal>public static String[] getParameters()</literal> method in
                <literal>StartMain</literal>.
             </para>
          </note>

      </section>

   </section>

</chapter>
