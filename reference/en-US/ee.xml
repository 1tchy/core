<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
   "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"  [ ]>
<chapter id="ee">
   <title>Java EE integration</title>
  
   <para>
      CDI is fully integrated into the Java EE environment. Beans have access to Java EE resources and JPA persistence
      contexts. They may be used in Unified EL expressions in JSF and JSP pages. They may even be injected into other
      platform components, such as Servlets and Message-Driven Beans, which are not beans themselves.
   </para>
  
   <section>
      <title>Injecting Java EE resources into a bean</title>
    
      <para>
         All managed beans may take advantage of Java EE dependency injection using <literal>@Resource</literal>,
         <literal>@EJB</literal> and <literal>@PersistenceContext</literal>. We've already seen a couple of examples of
         this, though we didn't pay much attention at the time:
      </para>
    
      <programlisting role="JAVA"><![CDATA[@Transactional @Interceptor
public class TransactionInterceptor {
   @Resource Transaction transaction;

   @AroundInvoke public Object manageTransaction(InvocationContext ctx) { ... }
}]]></programlisting>

      <programlisting role="JAVA"><![CDATA[@SessionScoped
public class Login {
   @Inject Credentials credentials;
   @PersistenceContext EntityManager userDatabase;
    ...
}]]></programlisting>
    
      <para>
         The Java EE <literal>@PostConstruct</literal> and <literal>@PreDestroy</literal> callbacks are also supported
         for all managed beans. The <literal>@PostConstruct</literal> method is called after <emphasis>all</emphasis>
         injection has been performed.
      </para>
    
      <para>
         There is one restriction to be aware of here: <literal>@PersistenceContext(type=EXTENDED)</literal> is not
         supported for non-session beans (that's strictly a feature of stateful session beans).
      </para>
    
   </section>
  
   <section>
      <title>Calling a bean from a Servlet</title>
    
      <para>
         It's easy to use a bean from a Servlet in Java EE 6. Simply inject the bean using field or initializer method
         injection.
      </para>
    
      <programlisting role="JAVA"><![CDATA[public class Login extends HttpServlet {
   @Inject Credentials credentials;
   @Inject Login login;

   @Override
   public void service(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
      credentials.setUsername(request.getParameter("username")):
      credentials.setPassword(request.getParameter("password")):
      login.login();
      if ( login.isLoggedIn() ) {
         response.sendRedirect("/home.jsp");
      }
      else {
         response.sendRedirect("/loginError.jsp");
      }
   }
            
}]]></programlisting>

      <para>
         Since instances of Servlets are shared across all incoming threads, the bean client proxy takes care of routing
         method invocations from the Servlet to the correct instances of <literal>Credentials</literal> and
         <literal>Login</literal> for the current request and HTTP session.
      </para> 
    
   </section>
  
   <section>
      <title>Calling a bean from a Message-Driven Bean</title>
    
      <para>
         CDI injection applies to all EJBs, even when they aren't managed beans. In particular, you can use CDI
         injection in Message-Driven Beans, which are not considered beans because you can't inject them and their
         instances are not contextual (not even dependent).
      </para>
    
      <para>You can even use CDI interceptor bindings for Message-Driven Beans.</para>

      <programlisting role="JAVA"><![CDATA[@Transactional @MessageDriven
public class ProcessOrder implements MessageListener {
   @Inject Inventory inventory;
   @PersistenceContext EntityManager em;

   public void onMessage(Message message) {
      ...
   }
}]]></programlisting>

      <para>
         Thus, receiving messages is super-easy in an environment with CDI (e.g., Java EE 6). But beware that there is
         no session or conversation context available when a message is delivered to a Message-Driven Bean. Only
         <literal>@RequestScoped</literal> and <literal>@ApplicationScoped</literal> beans are available.
      </para>
    
      <para>
         It's also easy to send messages using beans, if you require the full event bus of JMS rather than the
         architecturally simpler CDI event notification facility.
      </para>

   </section>
  
   <section id="jms">
      <title>JMS endpoints</title>
    
      <para>
         Sending messages using JMS can be quite complex, because of the number of different objects you need to deal
         with. For queues we have <literal>Queue</literal>, <literal>QueueConnectionFactory</literal>,
         <literal>QueueConnection</literal>, <literal>QueueSession</literal> and <literal>QueueSender</literal>. For
         topics we have <literal>Topic</literal>, <literal>TopicConnectionFactory</literal>,
         <literal>TopicConnection</literal>, <literal>TopicSession</literal> and <literal>TopicPublisher</literal>. Each
         of these objects has its own lifecycle and threading model that we need to worry about.
      </para>
    
      <para>
         You can use producer fields and methods to prepare all of these resources for injection into a bean:
      </para>

      <programlisting role="JAVA"><![CDATA[public class OrderResources {
   @Resource(name="jms/ConnectionFactory")
   private ConnectionFactory connectionFactory;
  
   @Resource(name="jms/OrderQueue")
   private Queue orderQueue;
  
   @Produces @OrderConnection
   public Connection createOrderConnection() throws JMSException {
    return connectionFactory.createConnection();
   }
  
   public void closeOrderConnection(@Disposes @OrderConnection Connection connection)
         throws JMSException {
      connection.close();
   }
  
   @Produces @OrderSession
   public Session createOrderSession(@OrderConnection Connection connection)
         throws JMSException {
      return connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
   }
  
   public void closeOrderSession(@Disposes @OrderSession Session session)
         throws JMSException {
      session.close();
   }
  
   @Produces @OrderMessageProducer
   public MessageProducer createOrderMessageProducer(@OrderSession Session session)
         throws JMSException {
      return session.createProducer(orderQueue);
   }
  
   public void closeOrderMessageProducer(@Disposes @OrderMessageProducer MessageProducer producer)
         throws JMSException {
      producer.close();
   }
}]]></programlisting> 

      <para>
         In this example, we can just inject the prepared <literal>MessageProducer</literal>,
         <literal>Connection</literal> or <literal>QueueSession</literal>:
      </para>
    
      <programlisting role="JAVA"><![CDATA[@Inject Order order;
@Inject @OrderMessageProducer MessageProducer producer;
@Inject @OrderSession QueueSession orderSession;

public void sendMessage() {
   MapMessage msg = orderSession.createMapMessage();
   msg.setLong("orderId", order.getId());
   ...
   producer.send(msg);
}]]></programlisting>
    
      <!--
      <programlisting role="JAVA"><![CDATA[@Inject @StockPrices TopicPublisher pricePublisher;
@Inject @StockPrices TopicSession priceSession;

public void sendMessage(String price) {
   pricePublisher.send(priceSession.createTextMessage(price));
}]]></programlisting>
      -->

      <para>
         The lifecycle of the injected JMS objects is completely controlled by the container.
      </para> 
    
   </section>
  
   <section>
      <title>Packaging and deployment</title>
    
      <para>
         CDI doesn't define any special deployment archive. You can package beans in JARs, EJB-JARs or WARs &#151; any
         deployment location in the application classpath. However, the archive must be a "bean archive". That means
         each archive that contains beans <emphasis>must</emphasis> include a file named <literal>beans.xml</literal> in
         the <literal>META-INF</literal> directory of the classpath or <literal>WEB-INF</literal> directory of the web
         root (for WAR archives). The file may be empty. Beans deployed in archives that do not have a
         <literal>beans.xml</literal> file (i.e., not in a bean archive) will not be available for use in the
         application.

      </para>
    
      <para>
         For Java SE execution, beans may be deployed in any location in which EJBs may be deployed for execution by the
         embeddable EJB Lite container. Again, each location must contain a <literal>beans.xml</literal> file. (That
         doesn't rule out the possibility of having an extention which provides support for normal Java SE execution,
         like the Weld Java SE module).
      </para>
    
   </section>
  
<!--
vim:et:ts=3:sw=3:tw=120
-->
</chapter>
