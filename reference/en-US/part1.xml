<!DOCTYPE partintro PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"  [ ]>

<partintro>
  
  <para>The Web Beans (JSR-299) specification defines a set of services for
  the Java EE environment that makes applications much easier to develop.
  Web Beans layers an enhanced lifecycle and interaction model over existing 
  Java component types including JavaBeans and Enterprise Java Beans. As a
  complement to the traditional Java EE programming model, the Web Beans 
  services provide:</para>
  
  <itemizedlist>
    <listitem>
      <para>an improved lifecycle for stateful components, bound to well-defined 
      <emphasis>contexts</emphasis>,</para>
    </listitem>
    <listitem>
      <para>a typesafe approach to <emphasis>dependency injection</emphasis>,</para>
    </listitem>
    <listitem>
      <para>interaction via an <emphasis>event notification</emphasis> facility, 
      and</para>
    </listitem>
    <listitem>
      <para>a better approach to binding <emphasis>interceptors</emphasis> to
      components, along with a new kind of interceptor, called a 
      <emphasis>decorator</emphasis>, that is more appropriate for use in
      solving business problems.</para>
    </listitem>
  </itemizedlist>
  
  <para>Dependency injection, together with contextual lifecycle management, 
  saves the user of an unfamiliar API from having to ask and answer the following 
  questions:</para>

  <itemizedlist>
    <listitem>
      <para>what is the lifecycle of this object?</para>
    </listitem>
    <listitem>
      <para>how many simultaneous clients can it have?</para>
    </listitem>
    <listitem>
      <para>is it multithreaded?</para>
    </listitem>
    <listitem>
      <para>where can I get one from?</para>
    </listitem>
    <listitem>
      <para>do I need to explicitly destroy it?</para>
    </listitem>
    <listitem>
      <para>where should I keep my reference to it when I'm not
      using it directly?</para>
    </listitem>
    <listitem>
      <para>how can I add an indirection layer, so that the implementation
      of this object can vary at deployment time?</para>
    </listitem>
    <listitem>
      <para>how should I go about sharing this object between other objects?</para>
    </listitem>
  </itemizedlist>
  
  <para>A Web Bean specifies only the type and semantics of other Web Beans
  it depends upon. It need not be aware of the actual lifecycle, concrete 
  implementation, threading model or other clients of any Web Bean it depends 
  upon. Even better, the concrete implementation, lifecycle and threading model 
  of a Web Bean it depends upon may vary according to the deployment scenario, 
  without affecting any client.</para>
  
  <para>Events, interceptors and decorators enhance the <emphasis>loose-coupling</emphasis> 
  that is inherent in this model:</para>
  
  <itemizedlist>
    <listitem>
      <para><emphasis>event notifications</emphasis> decouple event producers 
      from event consumers,</para>
    </listitem>
    <listitem>
      <para><emphasis>interceptors</emphasis> decouple technical concerns from 
      business logic, and</para>
    </listitem>
    <listitem>
      <para><emphasis>decorators</emphasis> allow business concerns to be 
      compartmentalized.</para>
    </listitem>
  </itemizedlist>
  
  <para>Most importantly, Web Beans provides all these facilities in a
  <emphasis>typesafe</emphasis> way. Web Beans never uses string-based
  identifiers to determine how collaborating objects fit together. And
  XML, though it remains an option, is rarely used. Instead, Web Beans
  uses the typing information that is already available in the Java
  object model, together with a new pattern, called 
  <emphasis>binding annotations</emphasis>, to wire together Web Beans,
  their dependencies, their interceptors and decorators and their event
  consumers.</para>
  
  <para>The Web Beans services are general and apply to the following types of 
  components that exist in the Java EE environment:</para>
  
  <itemizedlist>
    <listitem>
      <para>all JavaBeans,</para>
    </listitem>
    <listitem>
      <para>all EJBs, and</para>
    </listitem>
    <listitem>
      <para>all Servlets.</para>
    </listitem>
  </itemizedlist>
  
  <para>Web Beans even provides the necessary integration points so that other
  kinds of components defined by future Java EE specifications or by non-standard
  frameworks may be cleanly integrated with Web Beans, take advantage of the Web 
  Beans services, and interact with any other kind of Web Bean.</para>
  
  <para>Web Beans was influenced by a number of existing Java frameworks,
  including Seam, Guice and Spring. However, Web Beans has its own very distinct 
  character: more typesafe than Seam, more stateful and less XML-centric than 
  Spring, more web and enterprise-application capable than Guice.</para>
  
  <para>Most importantly, Web Beans is a JCP standard that integrates
  cleanly with Java EE, and with any Java SE environment where embeddable
  EJB Lite is available.</para>
  
</partintro>