# translation of events.po to
# Language de-DE translations for Introduction_to_Web_Beans package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: events\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-01-10 14:18+0000\n"
"PO-Revision-Date: 2009-02-13 08:17+1100\n"
"Last-Translator: \n"
"Language-Team:  <en@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#: events.xml:4
#, no-c-format
msgid "Events"
msgstr "Ereignisse"

#. Tag: para
#: events.xml:6
#, no-c-format
msgid ""
"The Web Beans event notification facility allows Web Beans to interact in a "
"totally decoupled manner. Event <emphasis>producers</emphasis> raise events "
"that are then delivered to event <emphasis>observers</emphasis> by the Web "
"Bean manager. This basic schema might sound like the familiar observer/"
"observable pattern, but there are a couple of twists:"
msgstr ""
"Die Web Beans Ereignisbenachrichtigungs-Facility gestattet es Web Beans auf eine völlig abgekoppelte "
"Weise zu interagieren. Ereignis <emphasis>Producer</emphasis> bringen Ereignisse auf, die dann vom Web Bean Manager an Ereignis <emphasis>Observer</emphasis> geliefert werden. Dieses schlichte Schema klingt zwar etwas nach dem bekannten Observer/observierbar Muster, aber es gibt ein paar Überraschungen:"

#. Tag: para
#: events.xml:14
#, no-c-format
msgid ""
"not only are event producers decoupled from observers; observers are "
"completely decoupled from producers,"
msgstr "nicht nur sind Ereignis-Producer von Observern abgekoppelt, Observer sind auch komplett von Producern abgekoppelt, "

#. Tag: para
#: events.xml:18
#, no-c-format
msgid ""
"observers can specify a combination of \"selectors\" to narrow the set of "
"event notifications they will receive, and"
msgstr "Observer können eine Kombination von \"Selektoren\" festlegen, um den Satz von Ereignisbenachrichtigungen einzugrenzen, die sie erhalten und "

#. Tag: para
#: events.xml:22
#, no-c-format
msgid ""
"observers can be notified immediately, or can specify that delivery of the "
"event should be delayed until the end of the current transaction"
msgstr "Observer können sofort benachrichtigt werden oder sie können festlegen, dass die Lieferung des Ereignisses bis zum Abschluss der aktuellen Transaktion verschoben wird "

#. Tag: title
#: events.xml:28
#, no-c-format
msgid "Event observers"
msgstr "Ereignis-Observer"

#. Tag: para
#: events.xml:30
#, no-c-format
msgid ""
"An <emphasis>observer method</emphasis> is a method of a Web Bean with a "
"parameter annotated <literal>@Observes</literal>."
msgstr "Eine <emphasis>Observer-Methode</emphasis> ist eine Methode eines Web Beans mit einem Parameter, der <literal>@Observes</literal> annotiert ist."

#. Tag: programlisting
#: events.xml:33
#, no-c-format
msgid ""
"<![CDATA[public void onAnyDocumentEvent(@Observes Document document) "
"{ ... }]]>"
msgstr ""
"<![CDATA[public void onAnyDocumentEvent(@Observes Document document) "
"{ ... }]]>"

#. Tag: para
#: events.xml:35
#, no-c-format
msgid ""
"The annotated parameter is called the <emphasis>event parameter</emphasis>. "
"The type of the event parameter is the observed <emphasis>event type</"
"emphasis>. Observer methods may also specify \"selectors\", which are just "
"instances of Web Beans binding types. When a binding type is used as an "
"event selector, it is called an <emphasis>event binding type</emphasis>."
msgstr ""
"Der annotierte Parameter heißt <emphasis>Ereignisparameter</emphasis>. "
"Der Typ des Ereignisparameter ist der beobachtete <emphasis>Ereignistyp</"
"emphasis>. Observer-Methoden können auch \"Selektoren\" festlegen, die nur Instanzen von von Web Beans Binding-Typen sind. Wird ein Binding-Typ als Ereignis-Selektor verwendet, so wird dies als <emphasis>Ereignis Binding-Typ</emphasis>."

#. Tag: programlisting
#: events.xml:41
#, no-c-format
msgid ""
"<![CDATA[@BindingType\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Updated { ... }]]>"
msgstr ""
"<![CDATA[@BindingType\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Updated { ... }]]>"

#. Tag: para
#: events.xml:43
#, no-c-format
msgid ""
"We specify the event bindings of the observer method by annotating the event "
"parameter:"
msgstr "Wir legen die Ereignis-Bindings der Observer-Methode durch Annotation des Ereignisparameters fest:"

#. Tag: programlisting
#: events.xml:46 events.xml:190
#, no-c-format
msgid ""
"<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document "
"document) { ... }]]>"
msgstr ""
"<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document "
"document) { ... }]]>"

#. Tag: para
#: events.xml:48
#, no-c-format
msgid ""
"An observer method need not specify any event bindings &#151; in this case it "
"is interested in <emphasis>all</emphasis> events of a particular type. If it "
"does specify event bindings, it is only interested in events which also have "
"those event bindings."
msgstr "Eine Observer-Methode muss keine Ereignis-Bindings &#151; festlegen, in diesem Fall interessiert sie sich für <emphasis>alle</emphasis> Ereignisse eines bestimmten Typs. Legt sie Ereignis-Bindings fest, so interessiert sie sich nur für Ereignisse, die diese Ereignis-Bindings besitzen."

#. Tag: para
#: events.xml:53
#, no-c-format
msgid ""
"The observer method may have additional parameters, which are injected "
"according to the usual Web Beans method parameter injection semantics:"
msgstr "Die Observer-Methode kann zusätzliche Parameter besitzen, die gemäß der üblichen Einspeisungssemantik Web Beans Methodenparameter eingespeist werden:"

#. Tag: programlisting
#: events.xml:56
#, no-c-format
msgid ""
"<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document "
"document, User user) { ... }]]>"
msgstr ""
"<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document "
"document, User user) { ... }]]>"

#. Tag: title
#: events.xml:61
#, no-c-format
msgid "Event producers"
msgstr "Ereignis-Producer"

#. Tag: para
#: events.xml:63
#, no-c-format
msgid ""
"The event producer may obtain an <emphasis>event notifier</emphasis> object "
"by injection:"
msgstr "Der Ereignis-Producer kann ein <emphasis>Ereignisbenachrichtigungs</emphasis>-Objekt durch Einspeisung erhalten:"

#. Tag: programlisting
#: events.xml:66
#, no-c-format
msgid "<![CDATA[@Observable Event<Document> documentEvent]]>"
msgstr "<![CDATA[@Observable Event<Document> documentEvent]]>"

#. Tag: para
#: events.xml:68
#, no-c-format
msgid ""
"The <literal>@Observable</literal> annotation implicitly defines a Web Bean "
"with scope <literal>@Dependent</literal> and deployment type "
"<literal>@Standard</literal>, with an implementation provided by the Web "
"Bean manager."
msgstr ""
"Die <literal>@Observable</literal>-Annotation definiert implizit ein Web Bean "
"mit Geltungsbereich <literal>@Dependent</literal> und Deployment-Typ "
"<literal>@Standard</literal> mit einer durch den Web Bean Manager bereitgestellten Implementierung."

#. Tag: para
#: events.xml:72
#, no-c-format
msgid ""
"A producer raises events by calling the <literal>fire()</literal> method of "
"the <literal>Event</literal> interface, passing an <emphasis>event object</"
"emphasis>:"
msgstr "Ein Producer bringt durch Aufruf der <literal>fire()</literal>-Methode des <literal>Event</literal>-Interface Ereignisse auf, wobei ein <emphasis>Ereignisobjekt</emphasis> weitergegeben wird:"

#. Tag: programlisting
#: events.xml:75
#, no-c-format
msgid "<![CDATA[documentEvent.fire(document);]]>"
msgstr "<![CDATA[documentEvent.fire(document);]]>"

#. Tag: para
#: events.xml:77
#, no-c-format
msgid ""
"An event object may be an instance of any Java class that has no type "
"variables or wildcard type parameters. The event will be delivered to every "
"observer method that:"
msgstr "Ein Ereignis-Objekt kann eine Instanz einer beliebigen Java-Klasse sein, die keine Typ-Variablen oder Platzhalter-Typenparameter besitzt. Das Ereignis wird an jede Observer-Methode geliefert, die:"

#. Tag: para
#: events.xml:83 events.xml:107 events.xml:126
#, no-c-format
msgid "has an event parameter to which the event object is assignable, and"
msgstr "einen Ereignisparameter besitzt, dem das Ereignisobjekt zugeschrieben werden kann und "

#. Tag: para
#: events.xml:86
#, no-c-format
msgid "specifies no event bindings."
msgstr "keine Ereignis-Bindings festlegt."

#. Tag: para
#: events.xml:90
#, no-c-format
msgid ""
"The Web Bean manager simply calls all the observer methods, passing the "
"event object as the value of the event parameter. If any observer method "
"throws an exception, the Web Bean manager stops calling observer methods, "
"and the exception is rethrown by the <literal>fire()</literal> method."
msgstr "Der Web Bean Manager ruft einfach alle Observer-Methoden auf und gibt das Ereignis-Objekt als den Wert des Ereignisparameters weiter. Meldet eine Observer-Methode eine Ausnahme, so stoppt der Web Bean Manager den Aufruf von Observer-Methoden und die Ausnahme wird durch die <literal>fire()</literal>-Methode erneut gemeldet."

#. Tag: para
#: events.xml:95
#, no-c-format
msgid ""
"To specify a \"selector\", the event producer may pass an instance of the "
"event binding type to the <literal>fire()</literal> method:"
msgstr "Um einen \"Selektor\" festzulegen kann der Ereignis-Producer eine Instanz des Ereignis-Binding-Typs an die <literal>fire()</literal>-Methode weitergeben:"

#. Tag: programlisting
#: events.xml:98
#, no-c-format
msgid ""
"<![CDATA[documentEvent.fire( document, new AnnotationLiteral<Updated>()"
"{} );]]>"
msgstr ""
"<![CDATA[documentEvent.fire( document, new AnnotationLiteral<Updated>()"
"{} );]]>"

#. Tag: para
#: events.xml:100
#, no-c-format
msgid ""
"The helper class <literal>AnnotationLiteral</literal> makes it possible to "
"instantiate binding types inline, since this is otherwise difficult to do in "
"Java."
msgstr "Die Helferklasse <literal>AnnotationLiteral</literal> ermöglicht die Instanziierung der Binding-Typen inline, da es andernfalls schwierig ist, die in Java zu tun."

#. Tag: para
#: events.xml:103
#, no-c-format
msgid "The event will be delivered to every observer method that:"
msgstr "Das Ereignis wird an jede Observer-Methode geliefert, die:"

#. Tag: para
#: events.xml:110
#, no-c-format
msgid ""
"does not specify any event binding <emphasis>except</emphasis> for the event "
"bindings passed to <literal>fire()</literal>."
msgstr ""
"kein Ereignis-Binding festlegt <emphasis>außer</emphasis> für die an "
"<literal>fire()</literal> weitergegebenen Ereignis-Bindings."

#. Tag: para
#: events.xml:115
#, no-c-format
msgid ""
"Alternatively, event bindings may be specified by annotating the event "
"notifier injection point:"
msgstr "Alternativ können Ereignis-Bindings durch Festlegen des Einspeisungspunkts der Ereignisbenachrichtigung festgelegt werden:"

#. Tag: programlisting
#: events.xml:118
#, no-c-format
msgid "<![CDATA[@Observable @Updated Event<Document> documentUpdatedEvent]]>"
msgstr "<![CDATA[@Observable @Updated Event<Document> documentUpdatedEvent]]>"

#. Tag: para
#: events.xml:120
#, no-c-format
msgid ""
"Then every event fired via this instance of <literal>Event</literal> has the "
"annotated event binding. The event will be delivered to every observer "
"method that:"
msgstr "Dann besitzt jedes über diese Instanz abgegebene Ereignis das <literal>Event</literal> annotierte Ereignis-Binding. Das Ereignis wird an jede Observer-Methode geliefert, die: "

#. Tag: para
#: events.xml:129
#, no-c-format
msgid ""
"does not specify any event binding <emphasis>except</emphasis> for the event "
"bindings passed to <literal>fire()</literal> or the annotated event bindings "
"of the event notifier injection point."
msgstr "Kein Ereignis-Binding festlegt <emphasis>außer</emphasis> für die an <literal>fire()</literal> oder die annotierten Ereignis-Bindings des Einspeisungspunkts für Ereignisbenachrichtigungen weitergegebenen."

#. Tag: title
#: events.xml:138
#, no-c-format
msgid "Registering observers dynamically"
msgstr "Dynamische Registrierung von Observern"

#. Tag: para
#: events.xml:140
#, no-c-format
msgid ""
"It's often useful to register an event observer dynamically. The application "
"may implement the <literal>Observer</literal> interface and register an "
"instance with an event notifier by calling the <literal>observe()</literal> "
"method."
msgstr "Es ist oft hilfreich, einen Ereignis-Observer dynamisch zu registrieren. Die Anwendung kann das <literal>Observer</literal>-Interface implementieren und eine Instanz mit einer Ereignisbenachrichtigung registrieren, indem die <literal>observe()</literal>-Methode aufgerufen wird."

#. Tag: programlisting
#: events.xml:144
#, no-c-format
msgid ""
"<![CDATA[documentEvent.observe( new Observer<Document>() { public void notify"
"(Document doc) { ... } } );]]>"
msgstr ""
"<![CDATA[documentEvent.observe( new Observer<Document>() { public void notify"
"(Document doc) { ... } } );]]>"

#. Tag: para
#: events.xml:146
#, no-c-format
msgid ""
"Event binding types may be specified by the event notifier injection point "
"or by passing event binding type instances to the <literal>observe()</"
"literal> method:"
msgstr ""
"Typen von Ereignis-Bindings können durch den Einspeisungspunkt für Ereignisbenachrichtigungen oder Weitergabe von Instanzen von Typen von Ereignis-Bindings an die <literal>observe()</"
"literal>-Methode festgelegt werden:"

#. Tag: programlisting
#: events.xml:149
#, no-c-format
msgid ""
"<![CDATA[documentEvent.observe( new Observer<Document>() { public void notify"
"(Document doc) { ... } }, \n"
"                                                new "
"AnnotationLiteral<Updated>(){} );]]>"
msgstr ""
"<![CDATA[documentEvent.observe( new Observer<Document>() { public void notify"
"(Document doc) { ... } }, \n"
"                                                new "
"AnnotationLiteral<Updated>(){} );]]>"

#. Tag: title
#: events.xml:154
#, no-c-format
msgid "Event bindings with members"
msgstr "Ereignis-Bindings mit Mitgliedern"

#. Tag: para
#: events.xml:156
#, no-c-format
msgid "An event binding type may have annotation members:"
msgstr "Ein Ereignis-Binding-Typ kann Annotationsmitglieder besitzen:"

#. Tag: programlisting
#: events.xml:158
#, no-c-format
msgid ""
"<![CDATA[@BindingType\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Role {\n"
"    RoleType value();\n"
"}]]>"
msgstr ""
"<![CDATA[@BindingType\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Role {\n"
"    RoleType value();\n"
"}]]>"

#. Tag: para
#: events.xml:160
#, no-c-format
msgid "The member value is used to narrow the messages delivered to the observer:"
msgstr "Der Mitgliederwert dient der Eingrenzung von an den Observer gelieferten Nachrichten: "

#. Tag: programlisting
#: events.xml:162
#, no-c-format
msgid ""
"<![CDATA[public void adminLoggedIn(@Observes @Role(ADMIN) LoggedIn event) "
"{ ... }]]>"
msgstr ""
"<![CDATA[public void adminLoggedIn(@Observes @Role(ADMIN) LoggedIn event) "
"{ ... }]]>"

#. Tag: para
#: events.xml:164
#, no-c-format
msgid ""
"Event binding type members may be specified statically by the event "
"producer, via annotations at the event notifier injection point:"
msgstr "Typenmitglieder von Ereignis-Bindings können durch den Ereignis-Producer statisch festgelegt werden - dies erfolgt über Annotationen am Einspeisungspunkt der Ereignisbenachrichtigungen:"

#. Tag: programlisting
#: events.xml:167
#, no-c-format
msgid "<![CDATA[@Observable @Role(ADMIN) Event<LoggedIn> LoggedInEvent;}}]]>"
msgstr "<![CDATA[@Observable @Role(ADMIN) Event<LoggedIn> LoggedInEvent;}}]]>"

#. Tag: para
#: events.xml:169
#, no-c-format
msgid ""
"Alternatively, the value of the event binding type member may be determined "
"dynamically by the event producer. We start by writing an abstract subclass "
"of <literal>AnnotationLiteral</literal>:"
msgstr "Alternativ kann der Wert des Typenmitglieds des Ereignis-Bindings dynamisch durch den Ereignis-Producer bestimmt werden. Wir beginnen durch Schreiben einer abstrakten Unterklasse von <literal>AnnotationLiteral</literal>:"

#. Tag: programlisting
#: events.xml:172
#, no-c-format
msgid ""
"<![CDATA[abstract class RoleBinding \n"
"    extends AnnotationLiteral<Role> \n"
"    implements Role {}]]>"
msgstr ""
"<![CDATA[abstract class RoleBinding \n"
"    extends AnnotationLiteral<Role> \n"
"    implements Role {}]]>"

#. Tag: para
#: events.xml:174
#, no-c-format
msgid ""
"The event producer passes an instance of this class to <literal>fire()</"
"literal>:"
msgstr "Der Ereignis-Producer gibt eine Instanz dieser Klasse an <literal>fire()</literal> weiter:"

#. Tag: programlisting
#: events.xml:176
#, no-c-format
msgid ""
"<![CDATA[documentEvent.fire( document, new RoleBinding() { public void value"
"() { return user.getRole(); } } );]]>"
msgstr ""
"<![CDATA[documentEvent.fire( document, new RoleBinding() { public void value"
"() { return user.getRole(); } } );]]>"

#. Tag: title
#: events.xml:181
#, no-c-format
msgid "Multiple event bindings"
msgstr "Multiple Ereignis-Bindings"

#. Tag: para
#: events.xml:183
#, no-c-format
msgid "Event binding types may be combined, for example:"
msgstr "Typen von Ereignis-Bindings können kombiniert werden, zum Beispiel:"

#. Tag: programlisting
#: events.xml:185
#, no-c-format
msgid ""
"<![CDATA[@Observable @Blog Event<Document> blogEvent;\n"
"...\n"
"if (document.isBlog()) blogEvent.fire(document, new "
"AnnotationLiteral<Updated>(){});]]>"
msgstr ""
"<![CDATA[@Observable @Blog Event<Document> blogEvent;\n"
"...\n"
"if (document.isBlog()) blogEvent.fire(document, new "
"AnnotationLiteral<Updated>(){});]]>"

#. Tag: para
#: events.xml:187
#, no-c-format
msgid ""
"When this event occurs, all of the following observer methods will be "
"notified:"
msgstr "Findet dieses Ereignis statt, so werden alle folgenden Observer-Methoden benachrichtigt:"

#. Tag: programlisting
#: events.xml:189
#, no-c-format
msgid ""
"<![CDATA[public void afterBlogUpdate(@Observes @Updated @Blog Document "
"document) { ... }]]>"
msgstr ""
"<![CDATA[public void afterBlogUpdate(@Observes @Updated @Blog Document "
"document) { ... }]]>"

#. Tag: programlisting
#: events.xml:191
#, no-c-format
msgid ""
"<![CDATA[public void onAnyBlogEvent(@Observes @Blog Document document) "
"{ ... }]]>"
msgstr ""
"<![CDATA[public void onAnyBlogEvent(@Observes @Blog Document document) "
"{ ... }]]>"

#. Tag: programlisting
#: events.xml:192
#, no-c-format
msgid ""
"<![CDATA[public void onAnyDocumentEvent(@Observes Document document) "
"{ ... }}}]]>"
msgstr ""
"<![CDATA[public void onAnyDocumentEvent(@Observes Document document) "
"{ ... }}}]]>"

#. Tag: title
#: events.xml:197
#, no-c-format
msgid "Transactional observers"
msgstr "Transaktionale Observer"

#. Tag: para
#: events.xml:199
#, no-c-format
msgid ""
"Transactional observers receive their event notifications during the before "
"or after completion phase of the transaction in which the event was raised. "
"For example, the following observer method needs to refresh a query result "
"set that is cached in the application context, but only when transactions "
"that update the <literal>Category</literal> tree succeed:"
msgstr "Transaktionale Observers erhalten ihre Ereignisbenachrichtigungen vor oder nach der Abschlussphase der Transaktion während derer das Ereignis aufgegekommen ist. Zum Beispiel muss die folgende Observer-Methode einen Satz von Abfrageergebnissen neu laden, der im Applikationskontext gecacht ist, jedoch nur dann, wenn die den  <literal>Category</literal>-Baum aktualisierenden Transaktionen erfolgreich sind: "

#. Tag: programlisting
#: events.xml:205
#, no-c-format
msgid ""
"<![CDATA[public void refreshCategoryTree(@AfterTransactionSuccess @Observes "
"CategoryUpdateEvent event) { ... }]]>"
msgstr ""
"<![CDATA[public void refreshCategoryTree(@AfterTransactionSuccess @Observes "
"CategoryUpdateEvent event) { ... }]]>"

#. Tag: para
#: events.xml:207
#, no-c-format
msgid "There are three kinds of transactional observers:"
msgstr "Es gibt drei Arten von transaktionalen Observern:"

#. Tag: para
#: events.xml:211
#, no-c-format
msgid ""
"<literal>@AfterTransactionSuccess</literal> observers are called during the "
"after completion phase of the transaction, but only if the transaction "
"completes successfully"
msgstr "<literal>@AfterTransactionSuccess</literal>-Observers werden während der Abschlussphase der Transaktion aufgerufen, jedoch nur bei erfolgreichem Abschluss der Transaktion"

#. Tag: para
#: events.xml:216
#, no-c-format
msgid ""
"<literal>@AfterTransactionFailure</literal> observers are called during the "
"after completion phase of the transaction, but only if the transaction fails "
"to complete successfully"
msgstr "<literal>@AfterTransactionFailure</literal>-Observer werden während der Abschlussphase der Transaktion aufgerufen, jedoch nur, wenn der erfolgreiche Abschluss der Transaktion fehlschlägt"

#. Tag: para
#: events.xml:221
#, no-c-format
msgid ""
"<literal>@AfterTransactionCompletion</literal> observers are called during "
"the after completion phase of the transaction"
msgstr "<literal>@AfterTransactionCompletion</literal>-Observer werden während der Nach-Abschlussphase der Transaktion aufgerufen "

#. Tag: para
#: events.xml:225
#, no-c-format
msgid ""
"<literal>@BeforeTransactionCompletion</literal> observers are called during "
"the before completion phase of the transaction"
msgstr "<literal>@BeforeTransactionCompletion</literal>-Observer werden während der Vor-Abschlussphase der Transaktion aufgerufen"

#. Tag: para
#: events.xml:230
#, no-c-format
msgid ""
"Transactional observers are very important in a stateful object model like "
"Web Beans, because state is often held for longer than a single atomic "
"transaction."
msgstr ""
"Transaktional Observer sind in einem \"stateful\" Objektmodell wie "
"Web Beans sehr wichtig, da der Status oft länger bestehen bleibt als eine einzelne atomare Transaktion."

#. Tag: para
#: events.xml:233
#, no-c-format
msgid "Imagine that we have cached a JPA query result set in the application scope:"
msgstr "Stellen wir uns vor, wir besitzen einen gecachten Satz von JPA-Abfrageergebnissen im Geltungsbereich der Anwendung:"

#. Tag: programlisting
#: events.xml:235
#, no-c-format
msgid ""
"<![CDATA[@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"\n"
"    @PersistenceContext EntityManager em;\n"
"    \n"
"    List<Product> products;\n"
"\n"
"    @Produces @Catalog \n"
"    List<Product> getCatalog() {\n"
"        if (products==null) {\n"
"            products = em.createQuery(\"select p from Product p where p."
"deleted = false\")\n"
"                .getResultList();\n"
"        }\n"
"        return products;\n"
"    }\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"\n"
"    @PersistenceContext EntityManager em;\n"
"    \n"
"    List<Product> products;\n"
"\n"
"    @Produces @Catalog \n"
"    List<Product> getCatalog() {\n"
"        if (products==null) {\n"
"            products = em.createQuery(\"select p from Product p where p."
"deleted = false\")\n"
"                .getResultList();\n"
"        }\n"
"        return products;\n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#: events.xml:237
#, no-c-format
msgid ""
"From time to time, a <literal>Product</literal> is created or deleted. When "
"this occurs, we need to refresh the <literal>Product</literal> catalog. But "
"we should wait until <emphasis>after</emphasis> the transaction completes "
"successfully before performing this refresh!"
msgstr "Von Zeit zu Zeit wird ein <literal>Product</literal> erstellt oder gelöscht. Ist dies der Fall, so müssen wir den <literal>Product</literal>-Katalog neu laden. Wir sollten damit aber bis <emphasis>nach</emphasis> dem erfolgreichen Abschluss der Transaktion warten!"

#. Tag: para
#: events.xml:242
#, no-c-format
msgid ""
"The Web Bean that creates and deletes <literal>Product</literal>s could "
"raise events, for example:"
msgstr "Das Web Bean, das <literal>Product</literal>s erstellt oder löscht könnte Ereignisse aufrufen, zum Beispiel:"

#. Tag: programlisting
#: events.xml:245
#, no-c-format
msgid ""
"<![CDATA[@Stateless\n"
"public class ProductManager {\n"
"\n"
"    @PersistenceContext EntityManager em;\n"
"    @Observable Event<Product> productEvent;\n"
"\n"
"    public void delete(Product product) {\n"
"        em.delete(product);\n"
"        productEvent.fire(product, new AnnotationLiteral<Deleted>(){});\n"
"    }\n"
"    \n"
"    public void persist(Product product) {\n"
"        em.persist(product);\n"
"        productEvent.fire(product, new AnnotationLiteral<Created>(){});\n"
"    }\n"
"    \n"
"    ...\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[@Stateless\n"
"public class ProductManager {\n"
"\n"
"    @PersistenceContext EntityManager em;\n"
"    @Observable Event<Product> productEvent;\n"
"\n"
"    public void delete(Product product) {\n"
"        em.delete(product);\n"
"        productEvent.fire(product, new AnnotationLiteral<Deleted>(){});\n"
"    }\n"
"    \n"
"    public void persist(Product product) {\n"
"        em.persist(product);\n"
"        productEvent.fire(product, new AnnotationLiteral<Created>(){});\n"
"    }\n"
"    \n"
"    ...\n"
"    \n"
"}]]>"

#. Tag: para
#: events.xml:247
#, no-c-format
msgid ""
"And now <literal>Catalog</literal> can observe the events after successful "
"completion of the transaction:"
msgstr "Und jetzt kann <literal>Catalog</literal> die Ereignisse nach erfolgreichem Abschluss der Transaktion beobachten:"

#. Tag: programlisting
#: events.xml:250
#, no-c-format
msgid ""
"<![CDATA[@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"\n"
"    ...\n"
"    \n"
"    void addProduct(@AfterTransactionSuccess @Observes @Created Product "
"product) {\n"
"        products.add(product);\n"
"    }\n"
"    \n"
"    void addProduct(@AfterTransactionSuccess @Observes @Deleted Product "
"product) {\n"
"        products.remove(product);\n"
"    }\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"\n"
"    ...\n"
"    \n"
"    void addProduct(@AfterTransactionSuccess @Observes @Created Product "
"product) {\n"
"        products.add(product);\n"
"    }\n"
"    \n"
"    void addProduct(@AfterTransactionSuccess @Observes @Deleted Product "
"product) {\n"
"        products.remove(product);\n"
"    }\n"
"    \n"
"}]]>"

