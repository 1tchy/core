# translation of injection.po to
# Language de-DE translations for Introduction_to_Web_Beans package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: injection\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-01-10 14:18+0000\n"
"PO-Revision-Date: 2009-02-15 15:56+1100\n"
"Last-Translator: \n"
"Language-Team:  <en@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#: injection.xml:4
#, no-c-format
msgid "Dependency injection"
msgstr "Dependency-Einspeisung"

#. Tag: para
#: injection.xml:6
#, no-c-format
msgid "Web Beans supports three primary mechanisms for dependency injection:"
msgstr "Web Beans unterstützt drei primäre Mechanismen für \"Dependency\"-Einspeisung:"

#. Tag: para
#: injection.xml:8
#, no-c-format
msgid "Constructor parameter injection:"
msgstr "Konstruktorparameter-Einspeisung:"

#. Tag: programlisting
#: injection.xml:10
#, no-c-format
msgid ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private final ShoppingCart cart;\n"
"    \n"
"    @Initializer\n"
"    public Checkout(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private final ShoppingCart cart;\n"
"    \n"
"    @Initializer\n"
"    public Checkout(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"\n"
"}]]>"

#. Tag: para
#: injection.xml:12
#, no-c-format
msgid "<emphasis>Initializer</emphasis> method parameter injection:"
msgstr "<emphasis>Initializer</emphasis>-Methode Parameter-Einspeisung:"

#. Tag: programlisting
#: injection.xml:14
#, no-c-format
msgid ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private ShoppingCart cart;\n"
"\n"
"    @Initializer \n"
"    void setShoppingCart(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private ShoppingCart cart;\n"
"\n"
"    @Initializer \n"
"    void setShoppingCart(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#: injection.xml:16
#, no-c-format
msgid "And direct field injection:"
msgstr "Und direkte Feldeinspeisung:"

#. Tag: programlisting
#: injection.xml:18
#, no-c-format
msgid ""
"<![CDATA[public class Checkout {\n"
"\n"
"    private @Current ShoppingCart cart;\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[public class Checkout {\n"
"\n"
"    private @Current ShoppingCart cart;\n"
"    \n"
"}]]>"

#. Tag: para
#: injection.xml:20
#, no-c-format
msgid ""
"Dependency injection always occurs when the Web Bean instance is first "
"instantiated."
msgstr "Dependency-Einspeisung findet stets bei der ersten Instantiierung der Web Bean Instanz statt."

#. Tag: para
#: injection.xml:25
#, no-c-format
msgid ""
"First, the Web Bean manager calls the Web Bean constructor, to obtain an "
"instance of the Web Bean."
msgstr "Zuerst ruft der Web Bean Manager den Web Bean Konstruktor auf, um eine Instanz des Web Beans zu erhalten."

#. Tag: para
#: injection.xml:29
#, no-c-format
msgid ""
"Next, the Web Bean manager initializes the values of all injected fields of "
"the Web Bean."
msgstr "Als nächstes initialisiert der Web Bean Manager die Werte aller eingespeisten Felder des Web Beans."

#. Tag: para
#: injection.xml:33
#, no-c-format
msgid "Next, the Web Bean manager calls all initializer methods of Web Bean."
msgstr "Anschließend ruft der Web Bean Manager alle Initialisierermethoden des Web Beans auf."

#. Tag: para
#: injection.xml:37
#, no-c-format
msgid ""
"Finally, the <literal>@PostConstruct</literal> method of the Web Bean, if "
"any, is called."
msgstr "Zuletzt wird die <literal>@PostConstruct</literal>-Methode des Web Bean, falls vorhanden, aufgerufen."

#. Tag: para
#: injection.xml:42
#, no-c-format
msgid ""
"Constructor parameter injection is not supported for EJB beans, since the "
"EJB is instantiated by the EJB container, not the Web Bean manager."
msgstr ""
"Die Einspeisung von Konstruktorparametern wird für EJB-Beans nicht unterstützt, da das "
"EJB durch den EJB-Container und nicht den Web Bean Manager instantiiert wird."

#. Tag: para
#: injection.xml:45
#, no-c-format
msgid ""
"Parameters of constructors and initializer methods need not be explicitly "
"annotated when the default binding type <literal>@Current</literal> applies. "
"Injected fields, however, <emphasis>must</emphasis> specify a binding type, "
"even when the default binding type applies. If the field does not specify a "
"binding type, it will not be injected."
msgstr ""
"Parameter von Konstruktoren und Initialisierermethoden müssen nicht explizit annotiert werden, wenn der standardmäßige Binding-Typ <literal>@Current</literal> gilt."
"Eingespeiste Felder jedoch <emphasis>müssen</emphasis> einen Binding-Typ festlegen, selbst wenn der standardmäßige Binding-Typ gilt. Legt das Feld keinen standardmäßige Binding-Typ fest, so wird es nicht eingespeist."

#. Tag: para
#: injection.xml:51
#, no-c-format
msgid "Producer methods also support parameter injection:"
msgstr "Producer-Methoden unterstützen Parametereinspeisung ebenfalls:"

#. Tag: programlisting
#: injection.xml:53
#, no-c-format
msgid ""
"<![CDATA[@Produces Checkout createCheckout(ShoppingCart cart) {\n"
"    return new Checkout(cart);\n"
"}]]>"
msgstr ""
"<![CDATA[@Produces Checkout createCheckout(ShoppingCart cart) {\n"
"    return new Checkout(cart);\n"
"}]]>"

#. Tag: para
#: injection.xml:55
#, no-c-format
msgid ""
"Finally, observer methods (which we'll meet in <xref linkend=\"events\"/>), "
"disposal methods and destructor methods all support parameter injection."
msgstr ""
"Observer-Methoden (auf die wir in <xref linkend=\"events\"/> näher eingehen), "
"\"Disposal\"-Methoden und \"Destructor\"-Methoden unterstützen allesamt die Parametereinspeisung."

#. Tag: para
#: injection.xml:58
#, no-c-format
msgid ""
"The Web Beans specification defines a procedure, called the "
"<emphasis>typesafe resolution algorithm</emphasis>, that the Web Bean "
"manager follows when identifying the Web Bean to inject to an injection "
"point. This algorithm looks complex at first, but once you understand it, "
"it's really quite intuitive. Typesafe resolution is performed at system "
"initialization time, which means that the manager will inform the user "
"immediately if a Web Bean's dependencies cannot be satisfied, by throwing a "
"<literal>UnsatisfiedDependencyException</literal> or "
"<literal>AmbiguousDependencyException</literal>."
msgstr ""
"Die Web Beans Spezifikation definiert eine Prozedur namens <emphasis>typesicherer Auflösungsalgorithmus</emphasis> (sog. typesafe resolution algorithm), den der Web Bean "
"Manager bei der Identifizierung des an einem Einspeisungspunkt einzuspeisenden Web Beans folgt. Dieser  Algorithmus sieht auf den ersten Blick recht komplex aus, ist es aber nach kurzer Eingewöhnung nicht. Typensichere Auflösung wird zum Initialisierungszeitpunkt des Systems durchgeführt, was bedeutet, dass der Manager den Benutzer sofort darüber informiert, falls die Abhängigkeiten eines Web Beans nicht erfüllt werden können - dies erfolgt durch Meldung von <literal>UnsatisfiedDependencyException</literal> oder "
"<literal>AmbiguousDependencyException</literal>."

#. Tag: para
#: injection.xml:67
#, no-c-format
msgid ""
"The purpose of this algorithm is to allow multiple Web Beans to implement "
"the same API type and either:"
msgstr "Der Zweck dieses Algorithmus ist es, mehreren Web Beans die Einspeisung desselben API-Typs zu gestatten und entweder:"

#. Tag: para
#: injection.xml:72
#, no-c-format
msgid ""
"allow the client to select which implementation it requires using "
"<emphasis>binding annotations</emphasis>,"
msgstr "Dem Client mittels <emphasis>Binding-Annotationen</emphasis> zu gestatten auszuwählen, welche Implemetierung er benötigt, "

#. Tag: para
#: injection.xml:77
#, no-c-format
msgid ""
"allow the application deployer to select which implementation is appropriate "
"for a particular deployment, without changes to the client, by enabling or "
"disabling <emphasis>deployment types</emphasis>, or"
msgstr "Dem Anwendungs-Deployer durch Aktivierung oder Deaktivierung von <emphasis>Deployment-Typen</emphasis> gestatten auszuwählen, welche Implementierung die passende für eine bestimmte Umgebung ist, ohne dass es zu Änderungen am Client kommt oder "

#. Tag: para
#: injection.xml:82
#, no-c-format
msgid ""
"allow one implementation of an API to override another implementation of the "
"same API at deployment time, without changes to the client, using "
"<emphasis>deployment type precedence</emphasis>."
msgstr ""
"Einer Implementierung eines API mittels <emphasis>Deployment-Typ Präzedenz</emphasis> (\"Deployment Type Precedence\") gestatten, zum Deployment-Zeitpunkt eine andere Implementerung desselben API außer Kraft zu setzen, ohne dass dies zu Änderungen am Client führt."
"."

#. Tag: para
#: injection.xml:88
#, no-c-format
msgid "Let's explore how the Web Beans manager determines a Web Bean to be injected."
msgstr "Schauen wir uns jetzt näher an, wie der Web Beans Manager ein einzuspeisendes Web Bean bestimmt."

#. Tag: title
#: injection.xml:91
#, no-c-format
msgid "Binding annotations"
msgstr "Binding-Annotationen"

#. Tag: para
#: injection.xml:93
#, no-c-format
msgid ""
"If we have more than one Web Bean that implements a particular API type, the "
"injection point can specify exactly which Web Bean should be injected using "
"a binding annotation. For example, there might be two implementations of "
"<literal>PaymentProcessor</literal>:"
msgstr "Falls mehr als ein Web Bean existiert, das einen bestimmten API-Typ implementiert, so kann der Einspeisungspunkt genau festlegen welches Web Bean eingespeist wird mittels Binding-Annotation. Zum Beispiel können zwei Implementierungen von <literal>PaymentProcessor</literal> vorhanden sein:"

#. Tag: programlisting
#: injection.xml:98
#, no-c-format
msgid ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"
msgstr ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: programlisting
#: injection.xml:100
#, no-c-format
msgid ""
"<![CDATA[@PayByCreditCard\n"
"public class CreditCardPaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"
msgstr ""
"<![CDATA[@PayByCreditCard\n"
"public class CreditCardPaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: para
#: injection.xml:102
#, no-c-format
msgid ""
"Where <literal>@PayByCheque</literal> and <literal>@PayByCreditCard</"
"literal> are binding annotations:"
msgstr "Wo <literal>@PayByCheque</literal> und <literal>@PayByCreditCard</literal> Binding-Annotationen sind:"

#. Tag: programlisting
#: injection.xml:105
#, no-c-format
msgid ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCheque {}]]>"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCheque {}]]>"

#. Tag: programlisting
#: injection.xml:107
#, no-c-format
msgid ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCreditCard {}]]>"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCreditCard {}]]>"

#. Tag: para
#: injection.xml:109
#, no-c-format
msgid ""
"A client Web Bean developer uses the binding annotation to specify exactly "
"which Web Bean should be injected."
msgstr "Ein Client Web Bean Entwickler verwendet die Binding-Annotation um genau festzulegen, welches Web Bean eingespeist werden sollte."

#. Tag: para
#: injection.xml:112
#, no-c-format
msgid "Using field injection:"
msgstr "Verwendung der Feldeinspeisung:"

#. Tag: programlisting
#: injection.xml:114
#, no-c-format
msgid ""
"<![CDATA[@PayByCheque PaymentProcessor chequePaymentProcessor;\n"
"@PayByCreditCard PaymentProcessor creditCardPaymentProcessor;]]>"
msgstr ""
"<![CDATA[@PayByCheque PaymentProcessor chequePaymentProcessor;\n"
"@PayByCreditCard PaymentProcessor creditCardPaymentProcessor;]]>"

#. Tag: para
#: injection.xml:116
#, no-c-format
msgid "Using initializer method injection:"
msgstr "Verwendung der Initialisierermethoden-Einspeisung:"

#. Tag: programlisting
#: injection.xml:118
#, no-c-format
msgid ""
"<![CDATA[@Initializer\n"
"public void setPaymentProcessors(@PayByCheque PaymentProcessor "
"chequePaymentProcessor, \n"
"                                 @PayByCreditCard PaymentProcessor "
"creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"
msgstr ""
"<![CDATA[@Initializer\n"
"public void setPaymentProcessors(@PayByCheque PaymentProcessor "
"chequePaymentProcessor, \n"
"                                 @PayByCreditCard PaymentProcessor "
"creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"

#. Tag: para
#: injection.xml:120
#, no-c-format
msgid "Or using constructor injection:"
msgstr "Oder Verwendung der Konstruktoreinspeisung:"

#. Tag: programlisting
#: injection.xml:122
#, no-c-format
msgid ""
"<![CDATA[@Initializer\n"
"public Checkout(@PayByCheque PaymentProcessor chequePaymentProcessor, \n"
"                @PayByCreditCard PaymentProcessor "
"creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"
msgstr ""
"<![CDATA[@Initializer\n"
"public Checkout(@PayByCheque PaymentProcessor chequePaymentProcessor, \n"
"                @PayByCreditCard PaymentProcessor "
"creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"

#. Tag: title
#: injection.xml:125
#, no-c-format
msgid "Binding annotations with members"
msgstr "Binding-Annotationen mit Mitgliedern"

#. Tag: para
#: injection.xml:127
#, no-c-format
msgid "Binding annotations may have members:"
msgstr "Binding-Annotationen können Mitglieder besitzen:"

#. Tag: programlisting
#: injection.xml:129
#, no-c-format
msgid ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayBy {\n"
"    PaymentType value();\n"
"}]]>"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayBy {\n"
"    PaymentType value();\n"
"}]]>"

#. Tag: para
#: injection.xml:131
#, no-c-format
msgid "In which case, the member value is significant:"
msgstr "Wobei in diesem Fall der Mitgliederwert von Bedeutung ist:"

#. Tag: programlisting
#: injection.xml:133
#, no-c-format
msgid ""
"<![CDATA[@PayBy(CHEQUE) PaymentProcessor chequePaymentProcessor;\n"
"@PayBy(CREDIT_CARD) PaymentProcessor creditCardPaymentProcessor;]]>"
msgstr ""
"<![CDATA[@PayBy(CHEQUE) PaymentProcessor chequePaymentProcessor;\n"
"@PayBy(CREDIT_CARD) PaymentProcessor creditCardPaymentProcessor;]]>"

#. Tag: para
#: injection.xml:135
#, no-c-format
msgid ""
"You can tell the Web Bean manager to ignore a member of a binding annotation "
"type by annotating the member <literal>@NonBinding</literal>."
msgstr "Sie können den Web Bean Manager anweisen, ein Mitglied eines Binding-Annotationstyps zu ignorieren, indem Sie das Mitglied mit <literal>@NonBinding</literal> annotieren."

#. Tag: title
#: injection.xml:141
#, no-c-format
msgid "Combinations of binding annnotations"
msgstr "Kombinationen von Binding-Annnotationen"

#. Tag: para
#: injection.xml:143
#, no-c-format
msgid "An injection point may even specify multiple binding annotations:"
msgstr "Ein Einspeisungspunkt kann sogar mehrere Binding-Annotationen festlegen:"

#. Tag: programlisting
#: injection.xml:145
#, no-c-format
msgid "<![CDATA[@Asynchronous @PayByCheque PaymentProcessor paymentProcessor]]>"
msgstr "<![CDATA[@Asynchronous @PayByCheque PaymentProcessor paymentProcessor]]>"

#. Tag: para
#: injection.xml:147
#, no-c-format
msgid ""
"In this case, only a Web Bean which has <emphasis>both</emphasis> binding "
"annotations would be eligible for injection."
msgstr "In diesem Fall würde nur ein Web Bean mit <emphasis>beiden</emphasis> Binding-Annotationen eingespeist."

#. Tag: title
#: injection.xml:153
#, no-c-format
msgid "Binding annotations and producer methods"
msgstr "Binding-Annotationen und Producer-Methoden"

#. Tag: para
#: injection.xml:155
#, no-c-format
msgid "Even producer methods may specify binding annotations:"
msgstr "Sogar Producer-Methoden können Binding-Annotationen festlegen:"

#. Tag: programlisting
#: injection.xml:157
#, no-c-format
msgid ""
"<![CDATA[@Produces \n"
"@Asynchronous @PayByCheque \n"
"PaymentProcessor createAsyncPaymentProcessor(@PayByCheque PaymentProcessor "
"processor) {\n"
"    return new AsynchronousPaymentProcessor(processor);\n"
"}]]>"
msgstr ""
"<![CDATA[@Produces \n"
"@Asynchronous @PayByCheque \n"
"PaymentProcessor createAsyncPaymentProcessor(@PayByCheque PaymentProcessor "
"processor) {\n"
"    return new AsynchronousPaymentProcessor(processor);\n"
"}]]>"

#. Tag: title
#: injection.xml:162
#, no-c-format
msgid "The default binding type"
msgstr "Der standardmäßige Binding-Typ"

#. Tag: para
#: injection.xml:164
#, no-c-format
msgid ""
"Web Beans defines a binding type <literal>@Current</literal> that is the "
"default binding type for any injection point or Web Bean that does not "
"explicitly specify a binding type."
msgstr "Web Beans definiert einen Binding-Typ <literal>@Current</literal>, der der standardmäßige Binding-Typ für jeden Einspeisungspunkt oder Web Bean ist, der nicht explizit einen  Binding-Typ festlegt."

#. Tag: para
#: injection.xml:168
#, no-c-format
msgid ""
"There are two common circumstances in which it is necessary to explicitly "
"specify <literal>@Current</literal>:"
msgstr "Es existieren zwei gängige Umstände, bei denen es notwendig ist, <literal>@Current</literal> festzulegen:"

#. Tag: para
#: injection.xml:173
#, no-c-format
msgid ""
"on a field, in order to declare it as an injected field with the default "
"binding type, and"
msgstr "An einem Feld, um es als eingespeistes Feld zu deklarieren mit dem standardmäßigen Binding-Typ und "

#. Tag: para
#: injection.xml:177
#, no-c-format
msgid ""
"on a Web Bean which has another binding type in addition to the default "
"binding type."
msgstr "an einem Web Bean, das neben dem standardmäßigen Binding-Type einen weiteren Binding-Typ besitzt."

#. Tag: title
#: injection.xml:187
#, no-c-format
msgid "Deployment types"
msgstr "Deployment Typen"

#. Tag: para
#: injection.xml:189
#, no-c-format
msgid ""
"All Web Beans have a <emphasis>deployment type</emphasis>. Each deployment "
"type identifies a set of Web Beans that should be conditionally installed in "
"some deployments of the system."
msgstr "Alle Web Beans besitzen einen <emphasis>Deployment-Typ</emphasis>. Jeder Deployment-Typ identifiziert einen Satz von Web Beans mit Vorbehalt in einigen Deployments des Systems installiert werden sollten."

#. Tag: para
#: injection.xml:193
#, no-c-format
msgid ""
"For example, we could define a deployment type named <literal>@Mock</"
"literal>, which would identify Web Beans that should only be installed when "
"the system executes inside an integration testing environment:"
msgstr "Zum Beispiel könnten wir einen Deployment-Typ namens <literal>@Mock</literal> definieren, der Web Beans identifiziert, die nur installiert werden sollen, wenn das System innerhalb einer Integrationstestumgebung ausgeführt wird:"

#. Tag: programlisting
#: injection.xml:197
#, no-c-format
msgid ""
"<![CDATA[@Retention(RUNTIME)\n"
"  @Target({TYPE, METHOD})\n"
"  @DeploymentType\n"
"  public @interface Mock {}]]>"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"  @Target({TYPE, METHOD})\n"
"  @DeploymentType\n"
"  public @interface Mock {}]]>"

#. Tag: para
#: injection.xml:199
#, no-c-format
msgid ""
"Suppose we had some Web Bean that interacted with an external system to "
"process payments:"
msgstr "Nehmen wir an, wir hätten ein Web Bean, das mit einem externen System interagiert, um Zahlungen zu bearbeiten:"

#. Tag: programlisting
#: injection.xml:202
#, no-c-format
msgid ""
"<![CDATA[public class ExternalPaymentProcessor {\n"
"        \n"
"    public void process(Payment p) {\n"
"        ...\n"
"    }\n"
"    \n"
"}]]>"
msgstr ""
"<![CDATA[public class ExternalPaymentProcessor {\n"
"        \n"
"    public void process(Payment p) {\n"
"        ...\n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#: injection.xml:204
#, no-c-format
msgid ""
"Since this Web Bean does not explicitly specify a deployment type, it has "
"the default deployment type <literal>@Production</literal>."
msgstr "Da dieses Web Bean nicht explizit einen Deployment-Typ festlegt gilt der standardmäßige Deployment-Typ <literal>@Production</literal>."

#. Tag: para
#: injection.xml:207
#, no-c-format
msgid ""
"For integration or unit testing, the external system is slow or unavailable. "
"So we would create a mock object:"
msgstr "Für Integration oder das Testen von Einheiten ist das externe System langsam oder nicht verfügbar. Daher würden wir ein \"Mock\"-Objekt erstellen:"

#. Tag: programlisting
#: injection.xml:210
#, no-c-format
msgid ""
"<![CDATA[@Mock \n"
"public class MockPaymentProcessor implements PaymentProcessor {\n"
"\n"
"    @Override\n"
"    public void process(Payment p) {\n"
"        p.setSuccessful(true);\n"
"    }\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[@Mock \n"
"public class MockPaymentProcessor implements PaymentProcessor {\n"
"\n"
"    @Override\n"
"    public void process(Payment p) {\n"
"        p.setSuccessful(true);\n"
"    }\n"
"\n"
"}]]>"

#. Tag: para
#: injection.xml:212
#, no-c-format
msgid ""
"But how does the Web Bean manager determine which implementation to use in a "
"particular deployment?"
msgstr "Wie aber bestimmt der Web Bean Manager, welche Implementierung in einem bestimmten Deployment verwendet werden soll?"

#. Tag: title
#: injection.xml:216
#, no-c-format
msgid "Enabling deployment types"
msgstr "Aktivierung von Deployment-Typen"

#. Tag: para
#: injection.xml:218
#, no-c-format
msgid ""
"Web Beans defines two built-in deployment types: <literal>@Production</"
"literal> and <literal>@Standard</literal>. By default, only Web Beans with "
"the built-in deployment types are enabled when the system is deployed. We "
"can identify additional deployment types to be enabled in a particular "
"deployment by listing them in <literal>web-beans.xml</literal>."
msgstr ""
"Web Beans definieren zwei eingebaute Deployment-Typen: <literal>@Production</"
"literal> und <literal>@Standard</literal>. Standardmäßig sind nur Web Beans mit den eingebauten Deployment-Typen bei Deployment des Systems aktiviert. Wir können weitere Deployment-Typen identifizieren, die bei einem bestimmten Deployment aktiviert werden sollen, indem wir diese in <literal>web-beans.xml</literal> aufführen."

#. Tag: para
#: injection.xml:224
#, no-c-format
msgid ""
"Going back to our example, when we deploy our integration tests, we want all "
"our <literal>@Mock</literal> objects to be installed:"
msgstr "Kehren wir zu unserem Beispiel zurück, wenn wir Integrationsstests deployen und wir möchten, dass alle unsere <literal>@Mock</literal>-Objekte installiert werden:"

#. Tag: programlisting
#: injection.xml:227
#, no-c-format
msgid ""
"<![CDATA[<WebBeans>\n"
"    <Deploy>\n"
"        <Standard/>\n"
"        <Production/>\n"
"        <test:Mock/>\n"
"    </Deploy>\n"
"</WebBeans>]]>"
msgstr ""
"<![CDATA[<WebBeans>\n"
"    <Deploy>\n"
"        <Standard/>\n"
"        <Production/>\n"
"        <test:Mock/>\n"
"    </Deploy>\n"
"</WebBeans>]]>"

#. Tag: para
#: injection.xml:229
#, no-c-format
msgid ""
"Now the Web Bean manager will identify and install all Web Beans annotated "
"<literal>@Production</literal>, <literal>@Standard</literal> or "
"<literal>@Mock</literal> at deployment time."
msgstr "Jetzt identifiziert und installiert der Web Bean Manager alle mit <literal>@Production</literal>, <literal>@Standard</literal> oder <literal>@Mock</literal> annotierten Web Beans zum Zeitpunkt des Deployments."

#. Tag: para
#: injection.xml:233
#, no-c-format
msgid ""
"The deployment type <literal>@Standard</literal> is used only for certain "
"special Web Beans defined by the Web Beans specification. We can't use it "
"for our own Web Beans, and we can't disable it."
msgstr ""
"Der Deployment-Typ <literal>@Standard</literal> wird nur für bestimmte, spezielle "
"durch die Web Beans Spezifikation definierte Web Beans verwendet. Wir können ihn nicht für unsere eigenen Web Beans benutzen und wir können ihn nicht deaktivieren."

#. Tag: para
#: injection.xml:237
#, no-c-format
msgid ""
"The deployment type <literal>@Production</literal> is the default deployment "
"type for Web Beans which don't explicitly declare a deployment type, and may "
"be disabled."
msgstr "Der Deployment-Typ <literal>@Production</literal> ist der standardmäßige Deployment-Typ für Web Beans, die keinen expliziten Deployment-Typ festlegen oder deaktiviert sind."

#. Tag: title
#: injection.xml:244
#, no-c-format
msgid "Deployment type precedence"
msgstr "Deployment-Typ Präzedenz"

#. Tag: para
#: injection.xml:246
#, no-c-format
msgid ""
"If you've been paying attention, you're probably wondering how the Web Bean "
"manager decides which implementation &#151; <literal>ExternalPaymentProcessor</"
"literal> or <literal>MockPaymentProcessor</literal> &#151; to choose. Consider "
"what happens when the manager encounters this injection point:"
msgstr ""
"Wenn Sie aufgepasst haben, fragen Sie sich jetzt wahrscheinlich, wie der Web Bean "
"Manager entscheidet, welche Implementierung &#151; <literal>ExternalPaymentProcessor</"
"literal> oder <literal>MockPaymentProcessor</literal> &#151; er wählt. Überlegen Sie sich, was passiert, wenn der Manager auf diesen Einspeisungspunkt trifft:"

#. Tag: programlisting
#: injection.xml:251
#, no-c-format
msgid "<![CDATA[@Current PaymentProcessor paymentProcessor]]>"
msgstr "<![CDATA[@Current PaymentProcessor paymentProcessor]]>"

#. Tag: para
#: injection.xml:253
#, no-c-format
msgid ""
"There are now two Web Beans which satisfy the <literal>PaymentProcessor</"
"literal> contract. Of course, we can't use a binding annotation to "
"disambiguate, since binding annotations are hard-coded into the source at "
"the injection point, and we want the manager to be able to decide at "
"deployment time!"
msgstr "Es gibt jetzt zwei Web Beans, die den <literal>PaymentProcessor</literal>-Vertrag erfüllen. Natürlich können wir keine Binding-Annotation zur eindeutig Machung verwenden, da Binding-Annotationen in die Quelle am Einspeisungspunkt hardcodiert und wir wollen, dass der Manager zum Deployment-Zeotpunkt entscheiden können soll!"

#. Tag: para
#: injection.xml:258
#, no-c-format
msgid ""
"The solution to this problem is that each deployment type has a different "
"<emphasis>precedence</emphasis>. The precedence of the deployment types is "
"determined by the order in which they appear in <literal>web-beans.xml</"
"literal>. In our example, <literal>@Mock</literal> appears later than "
"<literal>@Production</literal> so it has a higher precedence."
msgstr "Die Lösung dieses Problems ist, dass jeder Deployment-Typ eine andere <emphasis>Präzendenz</emphasis> besitzt. Die Präzendenz der Deployment-Typen wird durch die Reihenfolge, in der sie in <literal>web-beans.xml</literal> erscheinen, festgelegt. In unserem Beispiel erscheint <literal>@Mock</literal> später als <literal>@Production</literal>, so dass es eine höhere Präzendenz besitzt."

#. Tag: para
#: injection.xml:264
#, no-c-format
msgid ""
"Whenever the manager discovers that more than one Web Bean could satisfy the "
"contract (API type plus binding annotations) specified by an injection "
"point, it considers the relative precedence of the Web Beans. If one has a "
"higher precedence than the others, it chooses the higher precedence Web Bean "
"to inject. So, in our example, the Web Bean manager will inject "
"<literal>MockPaymentProcessor</literal> when executing in our integration "
"testing environment (which is exactly what we want)."
msgstr "Findet der Manager mehr als ein Web Bean, das den von einem Einspeisungspunkt festgelegten Vertrag erfüllt (API-Typ plus Binding-Annotationen), so gilt die relative Präzedenz der Web Beans. Besitzt eines eine höhere Präzedenz als andere, so wird es für die Einspeisung gewählt. In unserem Beispiel speist der Web Bean Manager also <literal>MockPaymentProcessor</literal> bei der Ausführung unserer Integrationstestumgebung aus (und das ist es auch, was wir möchten)."

#. Tag: para
#: injection.xml:271
#, no-c-format
msgid ""
"It's interesting to compare this facility to today's popular manager "
"architectures. Various \"lightweight\" containers also allow conditional "
"deployment of classes that exist in the classpath, but the classes that are "
"to be deployed must be explicity, individually, listed in configuration code "
"or in some XML configuration file. Web Beans does support Web Bean "
"definition and configuration via XML, but in the common case where no "
"complex configuration is required, deployment types allow a whole set of Web "
"Beans to be enabled with a single line of XML. Meanwhile, a developer "
"browsing the code can easily identify what deployment scenarios the Web Bean "
"will be used in."
msgstr ""
"Es ist interessant dies mit den heutzutage beliebten Manager Architekturen zu vergleichen. Verschiedene \"leichtgewichtige\" Container gestatten uns auch das bedingte Deployment von im Klassenpfad existierenden Klassen, aber Klassen, die deployt werden sollen müssen explizit, individuell im Konfigurationscode oder einer XML-Konfigurationsdatei aufgeführt sein. Web Beans unterstützt die Web Bean "
"Definition und Konfiguration via XML, aber im gängigen Fall, in dem keine komplexe Konfiguration erforderlich ist, gestatten Deployment-Types die Aktivierung eines gesamten Satzes von Web Beans mittels einer einzigen XML-Zeile. Währenddessen kann ein den Code durchsehender Entwickler leicht einsehen, in welchen Deployment-Szenarien das Web Bean eingesetzt wird."

#. Tag: title
#: injection.xml:284
#, no-c-format
msgid "Example deployment types"
msgstr "Beispiel Deployment-Typen"

#. Tag: para
#: injection.xml:286
#, no-c-format
msgid "Deployment types are useful for all kinds of things, here's some examples:"
msgstr "Deployment-Typen sind hilfreich für allerlei Dinge, hier sind ein paar Beispiele: "

#. Tag: para
#: injection.xml:290
#, no-c-format
msgid ""
"<literal>@Mock</literal> and <literal>@Staging</literal> deployment types "
"for testing"
msgstr "<literal>@Mock</literal> und <literal>@Staging</literal> Deployment-Typen zu Testzwecken "

#. Tag: para
#: injection.xml:294
#, no-c-format
msgid "<literal>@AustralianTaxLaw</literal> for site-specific Web Beans"
msgstr "<literal>@AustralianTaxLaw</literal> für site-spezifische Web Beans"

#. Tag: para
#: injection.xml:297
#, no-c-format
msgid ""
"<literal>@SeamFramework</literal>, <literal>@Guice</literal> for third-party "
"frameworks which build on Web Beans"
msgstr "<literal>@SeamFramework</literal>, <literal>@Guice</literal> für Frameworks Dritter, die auf Web Beans bauen"

#. Tag: para
#: injection.xml:301
#, no-c-format
msgid ""
"<literal>@Standard</literal> for standard Web Beans defined by the Web Beans "
"specification"
msgstr "<literal>@Standard</literal> für standardmäßige, durch die Web Beans Spezifikation definierte Web Beans "

#. Tag: para
#: injection.xml:306
#, no-c-format
msgid "I'm sure you can think of more applications..."
msgstr "Ihnen fallen sicher noch andere Anwendungen ein..."

#. Tag: title
#: injection.xml:313
#, no-c-format
msgid "Fixing unsatisfied dependencies"
msgstr "Unbefriedigende Abhängigkeiten beheben"

#. Tag: para
#: injection.xml:315
#, no-c-format
msgid ""
"The typesafe resolution algorithm fails when, after considering the binding "
"annotations and and deployment types of all Web Beans that implement the API "
"type of an injection point, the Web Bean manager is unable to identify "
"exactly one Web Bean to inject."
msgstr "Der typensichere Auflösungsalgorithmus schlägt fehl, wenn - nach Betrachtung der Binding-Annotationen und der Deployment-Typen aller den API-Typ implementierender Web Beans eines Einspeisungspunktes - der Web Bean Manager nicht dazu in der Lage ist, ein einzuspeisendes Web Bean zu identifizieren."

#. Tag: para
#: injection.xml:320
#, no-c-format
msgid ""
"It's usually easy to fix an <literal>UnsatisfiedDependencyException</"
"literal> or <literal>AmbiguousDependencyException</literal>."
msgstr ""
"Es ist in der Regel einfach, Probleme mit einer <literal>UnsatisfiedDependencyException</"
"literal> oder <literal>AmbiguousDependencyException</literal> zu beheben."

#. Tag: para
#: injection.xml:323
#, no-c-format
msgid ""
"To fix an <literal>UnsatisfiedDependencyException</literal>, simply provide "
"a Web Bean which implements the API type and has the binding types of the "
"injection point &#151; or enable the deployment type of a Web Bean that "
"already implements the API type and has the binding types."
msgstr "Um eine <literal>UnsatisfiedDependencyException</literal> zu beheben, stellen Sie einfach ein Web Bean bereit, das den API-Typ implementiert und die Binding-Typen des Einspeisungspunkts besitzt&#151; oder aktivieren Sie den Deployment-Typ eines Web Beans, das den API-Typ bereits implementiert und die Binding-Typen besitzt."

#. Tag: para
#: injection.xml:328
#, no-c-format
msgid ""
"To fix an <literal>AmbiguousDependencyException</literal>, introduce a "
"binding type to distinguish between the two implementations of the API type, "
"or change the deployment type of one of the implementations so that the Web "
"Bean manager can use deployment type precedence to choose between them. An "
"<literal>AmbiguousDependencyException</literal> can only occur if two Web "
"Beans share a binding type and have exactly the same deployment type."
msgstr "Um eine <literal>AmbiguousDependencyException</literal> zu beheben, führen Sie einen Binding-Typ ein, um zwischen den beiden Implementierungen des API-Typs zu unterscheiden oder ändern Sie den Deployment-Typ einer der Implementierungen damit der Web Bean Manager Deployment-Typ Präzedenz zur Auswahl zwischen den beiden verwenden kann. Eine <literal>AmbiguousDependencyException</literal> kann nur vorkommen, wenn zwei Web Beans sich einen Binding-Typ teilen und genau denselben Deployment-Typ besitzen."

#. Tag: para
#: injection.xml:335
#, no-c-format
msgid ""
"There's one more issue you need to be aware of when using dependency "
"injection in Web Beans."
msgstr "Es gibt eine weitere Sache, derer man sich bei der Verwendung von \"Dependency\"-Einspeisung in Web Beans gewahr sein sollte."

#. Tag: title
#: injection.xml:341
#, no-c-format
msgid "Client proxies"
msgstr "Client-Proxies"

#. Tag: para
#: injection.xml:343
#, no-c-format
msgid ""
"Clients of an injected Web Bean do not usually hold a direct reference to a "
"Web Bean instance."
msgstr ""
"Clients eines eingespeisten Web Beans enthalten in der Regel keinen direkten Verweis an eine "
"Web Bean Instanz."

#. Tag: para
#: injection.xml:346
#, no-c-format
msgid ""
"Imagine that a Web Bean bound to the application scope held a direct "
"reference to a Web Bean bound to the request scope. The application scoped "
"Web Bean is shared between many different requests. However, each request "
"should see a different instance of the request scoped Web bean!"
msgstr "Stellen wir uns vor, ein an den Geltungsbereich der Anwendung gebundenes Web Bean hielte einen direkten Verweis auf ein an den Geltungsbereich der Anfrage gebundenes Web Bean. Das an den Geltungsbereich der Anwendung gebundene Web Bean wird von vielen verschiedenen Anfragen geteilt. Jedoch sollte jede Anfrage eine andere Instanz des an den Geltungsbereich der Anfrage gebundenen Web Beans sehen!"

#. Tag: para
#: injection.xml:351
#, no-c-format
msgid ""
"Now imagine that a Web Bean bound to the session scope held a direct "
"reference to a Web Bean bound to the application scope. From time to time, "
"the session context is serialized to disk in order to use memory more "
"efficiently. However, the application scoped Web Bean instance should not be "
"serialized along with the session scoped Web Bean!"
msgstr "Stellen Sie sich nun vor das an den Geltungsbereich der Session gebundene Web Bean hielte einen direkten Verweis auf ein an den Geltungsbereich der Anwendung gebundenes Web Bean. FVon Zeit zu Zeit wird der Session Kontext auf Disk serialisiert, um den Speicher effizienter zu nutzen. Die durch den Geltungsbereich der Anwendung begrenzte Instanz des Web Beans sollte jedoch nicht mit dem durch den Geltungsbereich der Session begrenzetn Web Bean serialisiert werden!"

#. Tag: para
#: injection.xml:357
#, no-c-format
msgid ""
"Therefore, unless a Web Bean has the default scope <literal>@Dependent</"
"literal>, the Web Bean manager must indirect all injected references to the "
"Web Bean through a proxy object. This <emphasis>client proxy</emphasis> is "
"responsible for ensuring that the Web Bean instance that receives a method "
"invocation is the instance that is associated with the current context. The "
"client proxy also allows Web Beans bound to contexts such as the session "
"context to be serialized to disk without recursively serializing other "
"injected Web Beans."
msgstr ""
"Daher muss der Web Bean Manageralle eingespeisten Verweise auf das Web Bean durch ein Proxy-Objekt einleiten, wenn das Web Bean nicht den Standard-Geltungsbereich <literal>@Dependent</"
"literal> besitzt. Dieser <emphasis>Client-Proxy</emphasis> ist verantwortlich dafür sicher zu stellen, dass die einen Methodenaufruf erhaltende Web Bean Instanz, die mit dem aktuellen Kontext assoziierte ist. Der "
"Client-Proxy gestattet außerdem die Serialisierung auf Disk von an Kontexte gebundenen Web Beans, ohne dass"
"rekursiv andere eingespeiste Web Beans serialisiert werden."

#. Tag: para
#: injection.xml:365
#, no-c-format
msgid ""
"Unfortunately, due to limitations of the Java language, some Java types "
"cannot be proxied by the Web Bean manager. Therefore, the Web Bean manager "
"throws an <literal>UnproxyableDependencyException</literal> if the type of "
"an injection point cannot be proxied."
msgstr "Leider können aufgrund von Einschränkungen von Java einige Java-Typen nicht vom Web Bean Manager geproxiet werden. Daher meldet der Web Bean Manager eine <literal>UnproxyableDependencyException</literal>, wenn der Typ eines Einspeisungspunkts nicht geproxiet werden kann."

#. Tag: para
#: injection.xml:370
#, no-c-format
msgid "The following Java types cannot be proxied by the Web Bean manager:"
msgstr "Die folgenden Java-Typen können nicht durch den Web Bean Manager geproxiet werden:"

#. Tag: para
#: injection.xml:374
#, no-c-format
msgid ""
"classes which are declared <literal>final</literal> or have a "
"<literal>final</literal> method,"
msgstr "Als <literal>final</literal> deklarierte Klassen oder die eine <literal>final</literal>-Methode besitzen,"

#. Tag: para
#: injection.xml:378
#, no-c-format
msgid "classes which have no non-private constructor with no parameters, and"
msgstr "Klassen, die keinen nicht-privaten Konstruktor ohne Parameter besitzen sowie "

#. Tag: para
#: injection.xml:381
#, no-c-format
msgid "arrays and primitive types."
msgstr "Arrays und primitive Typen."

#. Tag: para
#: injection.xml:385
#, no-c-format
msgid ""
"It's usually very easy to fix an <literal>UnproxyableDependencyException</"
"literal>. Simply add a constructor with no parameters to the injected class, "
"introduce an interface, or change the scope of the injected Web Bean to "
"<literal>@Dependent</literal>."
msgstr ""
"Es ist in der Regel ganz leicht eine <literal>UnproxyableDependencyException</"
"literal> zu beheben. Fügen Sie der eingespeisten Klasse einfach einen Konstruktor ohne Parameters hinzu, "
"führen Sie ein Interface ein oder ändern Sie den Gelstungsbereich des eingespeisten Web Bean zu "
"<literal>@Dependent</literal>."

#. Tag: title
#: injection.xml:392
#, no-c-format
msgid "Obtaining a Web Bean by programatic lookup"
msgstr "Erhalt eines Web Beans durch programmatsichen \"Lookup\""

#. Tag: para
#: injection.xml:394
#, no-c-format
msgid ""
"The application may obtain an instance of the interface <literal>Manager</"
"literal> by injection:"
msgstr "Die Anwendung kann durch Einspeisung eine Instanz des Interface <literal>Manager</literal> erhalten:"

#. Tag: programlisting
#: injection.xml:397
#, no-c-format
msgid "<![CDATA[@Current Manager manager;]]>"
msgstr "<![CDATA[@Current Manager manager;]]>"

#. Tag: para
#: injection.xml:399
#, no-c-format
msgid ""
"The <literal>Manager</literal> object provides a set of methods for "
"obtaining a Web Bean instance programatically."
msgstr "Das <literal>Manager</literal>-Objekt liefert einen Satz von Methoden zum programmatischen Erhalt einer Web Bean Instanz."

#. Tag: programlisting
#: injection.xml:402
#, no-c-format
msgid ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class);]]>"
msgstr ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class);]]>"

#. Tag: para
#: injection.xml:404
#, no-c-format
msgid ""
"Binding annotations may be specified by subclassing the helper class "
"<literal>AnnotationLiteral</literal>, since it is otherwise difficult to "
"instantiate an annotation type in Java."
msgstr "Binding-Annotationen können durch Subklassifizierung der Helferklasse <literal>AnnotationLiteral</literal> festgelegt werden, da es ansonsten schwierig ist, einen Annotationstyp in Java zu instantiieren."

#. Tag: programlisting
#: injection.xml:408
#, no-c-format
msgid ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class, \n"
"                                               new "
"AnnotationLiteral<CreditCard>(){});]]>"
msgstr ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class, \n"
"                                               new "
"AnnotationLiteral<CreditCard>(){});]]>"

#. Tag: para
#: injection.xml:410
#, no-c-format
msgid ""
"If the binding type has an annotation member, we can't use an anonymous "
"subclass of <literal>AnnotationLiteral</literal> &#151; instead we'll need to "
"create a named subclass:"
msgstr "Besitzt der Binding-Typ ein Annotationsmitglied, so können wir keine anonyme Unterklasse von <literal>AnnotationLiteral</literal> &#151; verwenden - stattdessen werden wir eine benannte Unterklasse erstellen müssen:"

#. Tag: programlisting
#: injection.xml:413
#, no-c-format
msgid ""
"<![CDATA[abstract class CreditCardBinding \n"
"    extends AnnotationLiteral<CreditCard> \n"
"    implements CreditCard {}]]>"
msgstr ""
"<![CDATA[abstract class CreditCardBinding \n"
"    extends AnnotationLiteral<CreditCard> \n"
"    implements CreditCard {}]]>"

#. Tag: programlisting
#: injection.xml:415
#, no-c-format
msgid ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class, \n"
"                                               new CreditCardBinding() { \n"
"                                                   public void value() "
"{ return paymentType; } \n"
"                                               } );]]>"
msgstr ""
"<![CDATA[PaymentProcessor p = manager.getInstanceByType(PaymentProcessor."
"class, \n"
"                                               new CreditCardBinding() { \n"
"                                                   public void value() "
"{ return paymentType; } \n"
"                                               } );]]>"

#. Tag: title
#: injection.xml:419
#, no-c-format
msgid ""
"Lifecycle callbacks, <literal>@Resource</literal>, <literal>@EJB</literal> "
"and <literal>@PersistenceContext</literal>"
msgstr ""
"Lebenszyklus-Callbacks, <literal>@Resource</literal>, <literal>@EJB</literal> "
"und <literal>@PersistenceContext</literal>"

#. Tag: para
#: injection.xml:422
#, no-c-format
msgid ""
"Enterprise Web Beans support all the lifecycle callbacks defined by the EJB "
"specification: <literal>@PostConstruct</literal>, <literal>@PreDestroy</"
"literal>, <literal>@PrePassivate</literal> and <literal>@PostActivate</"
"literal>."
msgstr "Enterprise Web Beans unterstützen alle durch die EJB-Spezifikation definierten Lebenszyklus-Callbacks: <literal>@PostConstruct</literal>, <literal>@PreDestroy</literal>, <literal>@PrePassivate</literal> und <literal>@PostActivate</literal>."

#. Tag: para
#: injection.xml:426
#, no-c-format
msgid ""
"Simple Web Beans support only the <literal>@PostConstruct</literal> and "
"<literal>@PreDestroy</literal> callbacks."
msgstr ""
"Einfache Web Beans unterstützen nur die <literal>@PostConstruct</literal> und "
"<literal>@PreDestroy</literal> Callbacks."

#. Tag: para
#: injection.xml:429
#, no-c-format
msgid ""
"Both enterprise and simple Web Beans support the use of <literal>@Resource</"
"literal>, <literal>@EJB</literal> and <literal>@PersistenceContext</literal> "
"for injection of Java EE resources, EJBs and JPA persistence contexts, "
"respectively. Simple Web Beans do not support the use of "
"<literal>@PersistenceContext(type=EXTENDED)</literal>."
msgstr ""
"Sowohl Enterprise als auch einfache Web Beans unterstützen den Gebrauch von <literal>@Resource</"
"literal>, <literal>@EJB</literal> und <literal>@PersistenceContext</literal> "
"zur Einspeisung von Java EE Ressourcen bzw. EJBs und JPA-Persistenzkontexten. Einfache Web Beans unterstützen den Gebrauch von <literal>@PersistenceContext(type=EXTENDED)</literal> nicht."

#. Tag: para
#: injection.xml:434
#, no-c-format
msgid ""
"The <literal>@PostConstruct</literal> callback always occurs after all "
"dependencies have been injected."
msgstr "Der <literal>@PostConstruct</literal>-Callback erfolgt immer, nachdem alle Abhängigkeiten eingespeist wurden."

#. Tag: title
#: injection.xml:440
#, no-c-format
msgid "The <literal>InjectionPoint</literal> object"
msgstr "Das <literal>InjectionPoint</literal>-Objekt"

#. Tag: para
#: injection.xml:442
#, no-c-format
msgid ""
"There are certain kinds of dependent objects &#151; Web Beans with scope "
"<literal>@Dependent</literal> &#151; that need to know something about the "
"object or injection point into which they are injected in order to be able "
"to do what they do. For example:"
msgstr ""
"Es gibt bestimmte Arten abhängiger Objekte &#151; Web Beans mit Geltungsbereich "
"<literal>@Dependent</literal> &#151; die etwas über das Objekt oder den Einspeisungspunkt in die sie eingespeist werden wissen müssen, um ihre Aufgabe zu erledigen. Zum Beispiel: "

#. Tag: para
#: injection.xml:448
#, no-c-format
msgid ""
"The log category for a <literal>Logger</literal> depends upon the class of "
"the object that owns it."
msgstr "Die Protokollkategorie für einen <literal>Logger</literal> hängt von der Klasse des sie besitzenden Objekts ab."

#. Tag: para
#: injection.xml:452
#, no-c-format
msgid ""
"Injection of a HTTP parameter or header value depends upon what parameter or "
"header name was specified at the injection point."
msgstr "Die Einspeisung eines HTTP-Parameters oder Header-Werts hängt davon ab, welcher Parameter oder Header-Name am Einspeisungspunkt festgelegt wurde."

#. Tag: para
#: injection.xml:456
#, no-c-format
msgid ""
"Injection of the result of an EL expression evaluation depends upon the "
"expression that was specified at the injection point."
msgstr "Einspeisung als Ergebnis der Evaluierung eines EL-Ausdrucks hängt von vom am Einspeisungspunkt festgelegten Ausdruck ab."

#. Tag: para
#: injection.xml:461
#, no-c-format
msgid ""
"A Web Bean with scope <literal>@Dependent</literal> may inject an instance "
"of <literal>InjectionPoint</literal> and access metadata relating to the "
"injection point to which it belongs."
msgstr "Ein Web Bean mit Geltungsbereich <literal>@Dependent</literal> kann eine Instanz von <literal>InjectionPoint</literal> einspeisen und auf Metadaten zugreifen, die mit dem zugehörigen Einspeisungspunkt zu tun haben."

#. Tag: para
#: injection.xml:465
#, no-c-format
msgid ""
"Let's look at an example. The following code is verbose, and vulnerable to "
"refactoring problems:"
msgstr "Sehen wir uns ein Beispiel an. Der folgende Code ist umfangreich und empfänglich für Refaktorierungsprobleme:"

#. Tag: programlisting
#: injection.xml:468
#, no-c-format
msgid "<![CDATA[Logger log = Logger.getLogger(MyClass.class.getName());]]>"
msgstr "<![CDATA[Logger log = Logger.getLogger(MyClass.class.getName());]]>"

#. Tag: para
#: injection.xml:470
#, no-c-format
msgid ""
"This clever little producer method lets you inject a JDK <literal>Logger</"
"literal> without explicitly specifying the log category:"
msgstr ""
"Diese schlaue kleine Producer-Methode gestattet die Einspeisung eines JDK <literal>Logger</"
"literal>, ohne dass explizit eine Protokollkategorie festgelegt werden müsste:"

#. Tag: programlisting
#: injection.xml:473
#, no-c-format
msgid ""
"<![CDATA[class LogFactory {\n"
"\n"
"   @Produces Logger createLogger(InjectionPoint injectionPoint) { \n"
"      return Logger.getLogger(injectionPoint.getMember().getDeclaringClass()."
"getName()); \n"
"   }\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[class LogFactory {\n"
"\n"
"   @Produces Logger createLogger(InjectionPoint injectionPoint) { \n"
"      return Logger.getLogger(injectionPoint.getMember().getDeclaringClass()."
"getName()); \n"
"   }\n"
"\n"
"}]]>"

#. Tag: para
#: injection.xml:475
#, no-c-format
msgid "We can now write:"
msgstr "Wir können jetzt schreiben:"

#. Tag: programlisting
#: injection.xml:477
#, no-c-format
msgid "<![CDATA[@Current Logger log;]]>"
msgstr "<![CDATA[@Current Logger log;]]>"

#. Tag: para
#: injection.xml:479
#, no-c-format
msgid ""
"Not convinced? Then here's a second example. To inject HTTP parameters, we "
"need to define a binding type:"
msgstr "Sie sind noch nicht ganz überzeugt? Dann sehen Sie sich ein weiteres Beispiel an. Zur Einspeisung von HTTP-Parametern müssen wir einen Binding-Typ festlegen:"

#. Tag: programlisting
#: injection.xml:482
#, no-c-format
msgid ""
"<![CDATA[@BindingType\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"public @interface HttpParam {\n"
"   @NonBinding public String value();\n"
"}]]>"
msgstr ""
"<![CDATA[@BindingType\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"public @interface HttpParam {\n"
"   @NonBinding public String value();\n"
"}]]>"

#. Tag: para
#: injection.xml:484
#, no-c-format
msgid "We would use this binding type at injection points as follows:"
msgstr "Wir würden diesen Binding-Typ an Einspeisungspunkten wie folgt verwenden:"

#. Tag: programlisting
#: injection.xml:486
#, no-c-format
msgid ""
"<![CDATA[@HttpParam(\"username\") String username;\n"
"@HttpParam(\"password\") String password;]]>"
msgstr ""
"<![CDATA[@HttpParam(\"username\") String username;\n"
"@HttpParam(\"password\") String password;]]>"

#. Tag: para
#: injection.xml:488
#, no-c-format
msgid "The following producer method does the work:"
msgstr "Die folgende Producer-Methode erledigt die Arbeit:"

#. Tag: programlisting
#: injection.xml:490
#, no-c-format
msgid ""
"<![CDATA[class HttpParams\n"
"\n"
"   @Produces @HttpParam(\"\")\n"
"   String getParamValue(ServletRequest request, InjectionPoint ip) {\n"
"      return request.getParameter(ip.getAnnotation(HttpParam.class).value"
"());\n"
"   }\n"
"\n"
"}]]>"
msgstr ""
"<![CDATA[class HttpParams\n"
"\n"
"   @Produces @HttpParam(\"\")\n"
"   String getParamValue(ServletRequest request, InjectionPoint ip) {\n"
"      return request.getParameter(ip.getAnnotation(HttpParam.class).value"
"());\n"
"   }\n"
"\n"
"}]]>"

#. Tag: para
#: injection.xml:492
#, no-c-format
msgid ""
"(Note that the <literal>value()</literal> member of the <literal>HttpParam</"
"literal> annotation is ignored by the Web Bean manager since it is annotated "
"<literal>@NonBinding.</literal>)"
msgstr ""
"(Beachten Sie, dass das <literal>value()</literal>-Mitglied der <literal>HttpParam</"
"literal>-Annotation vom Web Bean Manager wird, da es mit <literal>@NonBinding.</literal> annotiert ist)"

#. Tag: para
#: injection.xml:495
#, no-c-format
msgid ""
"The Web Bean manager provides a built-in Web Bean that implements the "
"<literal>InjectionPoint</literal> interface:"
msgstr "Der Web Bean Manager liefert ein eingebautes Web Bean, das das <literal>InjectionPoint</literal>-Interface implementiert:"

#. Tag: programlisting
#: injection.xml:498
#, no-c-format
msgid ""
"<![CDATA[public interface InjectionPoint { \n"
"   public Object getInstance(); \n"
"   public Bean<?> getBean(); \n"
"   public Member getMember(): \n"
"   public <T extends Annotation> T getAnnotation(Class<T> annotation); \n"
"   public Set<T extends Annotation> getAnnotations(); \n"
"}]]>"
msgstr ""
"<![CDATA[public interface InjectionPoint { \n"
"   public Object getInstance(); \n"
"   public Bean<?> getBean(); \n"
"   public Member getMember(): \n"
"   public <T extends Annotation> T getAnnotation(Class<T> annotation); \n"
"   public Set<T extends Annotation> getAnnotations(); \n"
"}]]>"

